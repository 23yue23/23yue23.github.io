<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜗牛笔记</title>
  
  <subtitle>永不设限，尽在自律。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://23yue23.github.io/"/>
  <updated>2019-12-10T11:11:50.796Z</updated>
  <id>https://23yue23.github.io/</id>
  
  <author>
    <name>蜗牛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>azkaban-剖析篇</title>
    <link href="https://23yue23.github.io/2019/12/10/azkaban-%E5%89%96%E6%9E%90%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/12/10/azkaban-剖析篇/</id>
    <published>2019-12-10T08:34:59.000Z</published>
    <updated>2019-12-10T11:11:50.796Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="74be8796acb571a32549cef2278f79ae3cb1c9cfebbe132fe6e6b4049b679231">57585474b857f8a3b036d7bc94a8e0cfdb0ee40f4a45c42e1ac44bb0e83a529348b92e153b1101a3ae145b515cea719012b14baf31132d39f76360efb12245a1806503fd57f585fc3e921727c936b308aa2e02e1b2a12ade48f7145ccf602a36dbb457f55806a7151093d0b37132a7648771ce14032df44fc9cb921f472c8fc98ec3d3b91a86f6e3f308e5a6766ec64750b74b5fdc1cd6eeb4dc587b622e4ea4e06cc2d9f1f2068f8d4ebaed75d358a13c6eb551610412634e55b3cca4d94718922db4b16ab1ac6cb7f72d853abd77f124c45068ced7c67ad17055df506dbbb86a79e610221607592fa84ed9417036378a27774aa624d3ec120062ca5b1bb9cc57a514b400dff35745e8a1394143746eed3ac048f663e6beeaab16f1ffcb542cad439f8ebacc93c0ace2d917022b86d6bd5222d034a93f2f1488a6dd76908a028429252bd3c56d96c7acfaeed587404b03dcbc30dc6f94e518b12de7174b62c8fbdff521994e7efbd73b87bd5eaacb13b6f9a16b740f125303175a29ac7a6d55c8ff56a9b9ffb99cc183649f992a8db9868ecba89a6dfa6cfbc5fefbfddfdd5e0d213b4eb027b668cbefd4bc9658d09f26f9a0f379829f3754efbcff410e5ba131300887c05e353979d030ad97fbe0d75c1c3b5eaaa0f4300d91d92b35ae8511c0b42031d86e7f3998d885e16b667268de33d2563f612d9ead8b4215a2d01a6e03a5aea40048a8c9a61565c29fe9e4861f3da451509288763adf6cbc8da16b6609ef401a74c36a7f884f9fa8e894edad38057b29fe23331f5b5349b62b9b5967392889a7dce6ad4e9be7432bd1b55b3d50062607e7955cce44571c5bda7c4e185080d592e47751c7b2d539bb4574d8dc0ac5da1e9c02eb03b06df400614dc15ffa6dd99374503aedb5fea93de08705f58f832acaf21dd67561bdcaee91f7f92b1aac9c1be4139a72511638ebfb9b6b110e7344e634ec20b9fd36fbbee36c19dd4aca853cbeb5cb98a6bff0e5c617013eec5b29f43d0344432dd529bfe680ef0e78cc48dba8793cc4bdd871a31cf8ed10eff28a06032959996f492fcb975506b5b32b7930d7d8609f44382b329656379123e47317a381b9f7da15eb98e66f043af6fc02e8cb1b3ba3020bcd15a9ff601a19d3b09fa405e80f2c847e3a76f30b2cc8330134f19227c9db7cadaf7f3c510b4aaa0efd898d227366450553613923a3b49f2d025b1d302ac712911b9a976daf8c9728fefcd9d347e1fd166f7b0ff97539635090d4068209648ec20abd278fff48fca21c2de0fd52024ffc3305db2ea2ead893501b239bff19e5d8342ae72b4ca3dde17c878fcbed543bb4f0a61bbd502c0fb9292e966980072cad04c7bffb4a8a702c01620e0e86264e9fb1b3e4ae96196f74ade4ca3d1495627ffbc7c06bd1882174b1d49ad5573ca976571708ff82c02aa3581768049cc59ce2ff5991d5d63fd0e7f2ce5887cef13f48e8731f78d787d3f97afcd2408511f181895db4fc2c953ade0766b3524c4830fc326937db06d90d1846b9762c3c838ac70c8939605a16e9723db9d98cd8cf895f72d1ba94ddbd9eb6860924c21a0f73e32eb174d77edc4c5b03d46d7483ee52ef94309021a45fe2626e2dc9c226d2a2559d872d76e11136b5e966ca919217458c7c8399ff99cd2f22f1e963e7d338caed379505c2f5eea92caff84650ed766ed6419917fed5b11392fb07e2942ca2e7ac9777c8f48b09ab40b9126ead2c6990bb84fe3b20a08eea233980470153a5b6ed058ffc44803392b0052a07a9fa99baa5f51baffa431dde9f9e679a9770460e8b6418201b5a4a5ad72403430488a8f7b31c994d62a8d166d9c08f4f469b55ccc05fb67385f16dfef91a60dadb8272e60d9bb5182d55a98643b3135d8cdb06ad64028da5a460c768e0db87706c86524c521d12014f9a03eb2b6ce3f71bba344bce21926fe5d4f10070c8213efc4365952a5d25d17d83ccc7655481d1114684636fc0f691ba18a4947a5a9f58e31662b38532b0ee9282d62e3c80763b0c8786b19640b398e8e72332995c2336737c0cd39abc7b50e66ff7aa44da9e64348591b7c5deeb06e47186448b839c7e177d874695b99c447ec7a7510f44025abaebbb3619abea309c296f296fe884fe55dff28781039774f233dd4bd777555a44a44453de463fa514c66206d2c82f5788b48646e3ea38621ed5a6235e20a80a240908ad6f4add2185b83d4e918345592410197a46125ab3add496984cbf1e6b0af7aa781ff2d48de55b413afdf22d67193360cac63cc15f585bb31704d2089c6ad7a6078c7adb1c8f13232789d8ffc113aef7eef8b3fdb89c24f35043e61ad5df0ca8a7ded62c2de529811e5f0ae3cfc4fab002f137f0819a3de7526874448ca3ee5039d89df280459fbc88dfbfd9f414ae2e4d6a90a8c6821767ab7044042fc148b98259ae7d5d4bd56110e792eebcf22bd97580c19924d68cd07c6280e60979ad4b7058a2b838d2e0f964b78f508e2bda7153fab4a86cb0352cb65361836896442a5cb90316e6cfe699d3abc6d8648afd4e815ed3c2aeff8eb2a7a6c5fc6801d1e3f499c3532da564161fdd23b6c0656a8de284bb567e21913540bcee1ebdf8fa58c473ad90f5369d1c71636e572d3b3cefa9a01bf46ed71ef2d1744eb41ab8ca7003266d651ff4437ed2b21c8141bfc7e767ca47ede6b46266f8538562b9aec3eb83fdff9692618fda35b8ddbf382a4aaac5b4ad2a8a8e5a4d2b5f1ff224e7ce03ef1feefbaf79c8</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="azkaban" scheme="https://23yue23.github.io/categories/azkaban/"/>
    
    
      <category term="azkaban-剖析篇" scheme="https://23yue23.github.io/tags/azkaban-%E5%89%96%E6%9E%90%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>httpd</title>
    <link href="https://23yue23.github.io/2019/12/10/httpd/"/>
    <id>https://23yue23.github.io/2019/12/10/httpd/</id>
    <published>2019-12-10T05:53:26.000Z</published>
    <updated>2019-12-10T10:10:56.321Z</updated>
    
    <content type="html"><![CDATA[<h4 id="httpd-服务简介"><a href="#httpd-服务简介" class="headerlink" title="httpd 服务简介"></a>httpd 服务简介</h4><blockquote><p><a href="https://httpd.apache.org/docs/2.4/" target="_blank" rel="noopener">Apache http 服务器2.4 文档</a></p></blockquote><blockquote><p><a href="https://httpd.apache.org/download.cgi" target="_blank" rel="noopener">download</a></p></blockquote><hr><h4 id="2-httpd-作为文件服务的使用"><a href="#2-httpd-作为文件服务的使用" class="headerlink" title="2.httpd 作为文件服务的使用"></a>2.httpd 作为文件服务的使用</h4><blockquote><p>安装使用</p></blockquote><pre><code>#安装sudo yum install httpdsudo su#测试配置是否正常httpd -t#starthttpd -k start#stophttpd -k stop</code></pre><blockquote><p>服务目录    /etc/httpd</p></blockquote><blockquote><p>主配置文件    /etc/httpd/conf/httpd.conf</p></blockquote><blockquote><p>网站数据目录    /var/www/html</p></blockquote><blockquote><p>访问日志    /var/log/httpd/access_log</p></blockquote><blockquote><p>错误日志    /var/log/httpd/error_log</p></blockquote><p><a href=".httpd.png">配置结构</a></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><blockquote><p>对服务机地址目录启动成文件访问服务</p></blockquote><hr><h4 id="3-Httpd-集成ldap"><a href="#3-Httpd-集成ldap" class="headerlink" title="3.Httpd 集成ldap"></a>3.Httpd 集成ldap</h4><blockquote><p>集成前需安装 mod_ldap</p></blockquote><pre><code>sudo suyum -y install mod_ldap</code></pre><blockquote><p>vim conf.d/auth_ldap.conf</p></blockquote><pre><code>&lt;Directory /data/dataplatform/zepplin/http_server/file/&gt;# AuthName &quot;LDAP Authentication&quot;AuthName &quot;zeppelin_file&quot;AuthType BasicAuthBasicProvider ldapAuthLDAPURL &quot;ldap://*****:389/ou=acs,dc=****,dc=com?uid?sub?(objectClass=*)&quot;AuthLDAPBindDN &quot;uid=gateway,ou=open,dc=****,dc=com&quot;AuthLDAPBindPassword &quot;********&quot;Require valid-user&lt;/Directory&gt;</code></pre><blockquote><p>测试配置是否异常 httpd -t</p></blockquote><blockquote><p>重启 httpd -k restart</p></blockquote><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;httpd-服务简介&quot;&gt;&lt;a href=&quot;#httpd-服务简介&quot; class=&quot;headerlink&quot; title=&quot;httpd 服务简介&quot;&gt;&lt;/a&gt;httpd 服务简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://httpd.ap
      
    
    </summary>
    
      <category term="httpd" scheme="https://23yue23.github.io/categories/httpd/"/>
    
    
      <category term="httpd" scheme="https://23yue23.github.io/tags/httpd/"/>
    
  </entry>
  
  <entry>
    <title>k8s-问题篇</title>
    <link href="https://23yue23.github.io/2019/11/12/k8s-%E9%97%AE%E9%A2%98%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/11/12/k8s-问题篇/</id>
    <published>2019-11-12T06:16:23.000Z</published>
    <updated>2019-12-10T10:26:01.726Z</updated>
    
    <content type="html"><![CDATA[<p>####1. Unable to connect to the server: dial tcp 192.168.99.100:8443: connect: no route to host</p><blockquote><p>问题原因：<br>     链接不上服务地址，可能是机器没有启动，或者节点已经丢失。</p></blockquote><blockquote><p>解决方案：<br>    查看运行状态 minikube status<br>     启动机器（测试虚拟机）</p></blockquote><hr><p>####2. error: unable to forward port because pod is not running. Current status=Pending</p><blockquote><p>查看问题：<br>  kubectl get nodes 首先查看node 是不是Ready 状态<br>  kubectl get pods (查看当前的pods)<br>  kubectl describe nodes （查看node 的vm 详细信息）<br>  kubectl get services (查看运行服务)</p></blockquote><hr><p>####3. Kube-proxy: error looking for path of conntrack</p><blockquote><p>kube-proxy 报错，并且 service 的 DNS 解析异常</p></blockquote><pre><code> kube-proxy[2241]: E0502 15:55:13.889842    2241 conntrack.go:42]  conntrack returned error: error looking for path of conntrack: exec: &quot;conntrack&quot;: executable file not found in $PATH</code></pre><blockquote><p>解决方式是安装 conntrack-tools 包后重启 kube-proxy 即可。</p></blockquote><hr><p>####4. “Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?”</p><blockquote><p>问题原因：是因为docker服务没有启动，所以在相应的/var/run/ 路径下找不到docker的进程。<br>解决方式：<br>   1.service docker start<br>   2.查看docker-machine是否安装。<br>  <a href="https://blog.csdn.net/Aaron_80726/article/details/83676014" target="_blank" rel="noopener">其他原因及解决方案</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####1. Unable to connect to the server: dial tcp 192.168.99.100:8443: connect: no route to host&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题原因：&lt;br&gt;     链接不上服务地
      
    
    </summary>
    
      <category term="k8s" scheme="https://23yue23.github.io/categories/k8s/"/>
    
    
      <category term="k8s-问题篇" scheme="https://23yue23.github.io/tags/k8s-%E9%97%AE%E9%A2%98%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>k8s-实战篇</title>
    <link href="https://23yue23.github.io/2019/10/25/k8s-%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/25/k8s-实战篇/</id>
    <published>2019-10-25T02:15:02.000Z</published>
    <updated>2019-12-10T10:27:21.093Z</updated>
    
    <content type="html"><![CDATA[<p>####1. 安装kubectl</p><p>####2. 安装minikube</p><blockquote><p>1.下载virtualbox</p></blockquote><blockquote><p>2.brew cask install minikube</p></blockquote><blockquote><p>3.minikube start –vm-driver=virtualbox</p></blockquote><blockquote><p>4.minikube config set vm-driver virtualbox</p></blockquote><blockquote><p>5.kubectl version 查看版本</p></blockquote><hr><p>####3. 重用Docker 守护程序使用本地映像</p><pre><code>eval $(minikube docker-env)docker ps</code></pre><hr><p>####4. 学习案例一</p><pre><code>#启动并创建集群minikube start#查看仪表盘minikube dashboard#使用现有镜像kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10#访问时将端口进行公开映射kubectl expose deployment hello-minikube --type=NodePort --port=8080#查看是否已经正在运行kubectl get pods#获取公开服务的URL以查看服务详细信息minikube service hello-minikube --url#curl 获取的url 查看本地集群的详细信息curl http://192.168.99.100:30083#删除 hello-minikube 服务kubectl delete services hello-minikube#删除 hello-minikube 部署kubectl delete deployment hello-minikube#停止本地minikube 集群minikube stop#删除本地minikube 集群minikube delete</code></pre><hr><p>####5. minikube 应用和服务</p><pre><code>********************# 应用和服务 #*************#启动minikubeminikube start#部署应用kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080#确定deploymentkubectl get deployment#查看部署的应用kubectl get pods#发布应用kubectl expose deployment hello-minikube --type=NodePort#查看发布的内容kubectl get services#访问服务1.虚拟机：curl http://ip:port2.curl $(minikube service hello-minikube --url)#获取服务url 链接minikube service --url service_name#查看控制台minikube dashboard查看所有Kubernetes Pod的部署状态kubectl get po -A#删除服务kubectl delete services hello-minikube#删除应用kubectl delete deployment hello-minikube#删除podskubectl delete pods podName#停止minikubeminikube stop#进入minikube 控制台minikube ssh</code></pre><hr><p>####6. kubectl 权限</p><pre><code>**********************# 权限问题 #*************************查看是否有权限：kubectl auth can-i &lt;list|create|edit|delete&gt; pods</code></pre><hr><p>####7. 集群相关</p><pre><code>**********************# 集群相关 #**************************#获取集群的ipminikube ip#获取集群节点kubectl get nodes#启动第二个本地集群minikube start -p cluster2#停止本地集群minikube stop#删除本地集群minikube delete#删除所有本地集群和配置文件minikube delete --all获取网桥ipminikube ssh &quot;route -n | grep ^0.0.0.0 | awk &#39;{ print \$2 }&#39;&quot;链接到集群minikubeminikube sshtelnet ip port</code></pre><hr><p>####8. minikube 附加组件</p><pre><code>********************************* 附加组件 ********************#查询可添加的组件minikube addons list#启用组件minikube addons enable &lt;name&gt;#与组件交互minikube addons open &lt;name&gt;#禁用组件minikube addons disable &lt;name&gt;</code></pre><hr><p>####9. minikube 调试</p><pre><code>************************** 启动调试日志 *******************--v=0将输出INFO级别的日志--v=1将输出警告级别的日志--v=2将输出错误级别的日志--v=3将输出libmachine日志记录--v=7将输出libmachine –debug级日志记录minikube start --v=7 将启动minikube并将所有重要的调试日志输出到stdout#收集虚拟机日志，要调试Kubernetes部署失败的问题，收集Kubernetes pod和内核日志非常有用minikube logs#立即查看启动失败minikube logs --problems#查看所有Kubernetes Pod的部署状态kubectl get po -A</code></pre><hr><p>####10. 查看docker镜像</p><pre><code>登录minikube 控制台minikube ssh docker images</code></pre><hr><p>####11. 常用故障排查以及修改命令</p><blockquote><p>scale </p></blockquote><pre><code>scale命令进行横向扩展，将原本为1的副本，提高到3kubectl scale --current-replicas=1 --replicas=3 deployment/nginx</code></pre><blockquote><p>autoscale</p></blockquote><pre><code>和scale不同的是autoscale则会根据负载进行调解kubectl autoscale deployment nginx --min=2 --max=5</code></pre><blockquote><p>cordon</p></blockquote><pre><code>查询nodeAddresskubectl get pods -o wide设定nodeAddress，使得nodeAddress不可使用，使用get node确认，其状态显示SchedulingDisabledkubectl cordon nodeAddress案例：设定134不可用：kubectl cordon 192.168.32.134横向扩展：kubectl scale --replicas=6 deployment/nginx发现没有pods 再执行在134这台机器上。</code></pre><blockquote><p>kubectl uncordon</p></blockquote><pre><code>解除限制kubectl uncordon nodeAddress</code></pre><blockquote><p>kubectl drain </p></blockquote><pre><code>drain命令用于对某个node进行设定，是为了设定此node为维护做准备。此命令主要执行的操作是：1. 设定此node不可以使用（cordon)2. evict（回收）了其上的两个pod</code></pre><blockquote><p>kubectl api-versions</p></blockquote><pre><code>查看当前版本的kubernetes的服务器端所支持的api版本信息</code></pre><blockquote><p>kubectl get all -o wide</p></blockquote><pre><code>列出pod services deployment replicaset 的信息</code></pre><blockquote><p>kubectl 可get 的信息</p></blockquote><pre><code>kubectl get deploymentskubectl get podskubectl get namespaces</code></pre><blockquote><p>kubectl 查看详情信息</p></blockquote><pre><code>kubectl describe node 192.168.32.132kubectl describe deployment mysql</code></pre><blockquote><p>kubectl 查看日志</p></blockquote><pre><code>kubectl logs podsName</code></pre><p>####12. 学习案例2</p><pre><code>[root@node1 wordpress]# cat wordpress-db.yaml---apiVersion: apps/v1beta1kind: Deploymentmetadata:name: mysql-deploylabels:app: mysqlspec:template:metadata:labels:app: mysqlspec:containers:- name: mysqlimage: mysql:5.7imagePullPolicy: IfNotPresentports:- containerPort: 3306name: dbportenv:- name: MYSQL_ROOT_PASSWORDvalue: rootPassW0rd- name: MYSQL_DATABASEvalue: wordpress- name: MYSQL_USERvalue: wordpress- name: MYSQL_PASSWORDvalue: wordpressvolumeMounts:- name: dbmountPath: /var/lib/mysqlvolumes:- name: dbhostPath:path: /var/lib/mysql---apiVersion: v1kind: Servicemetadata:name: mysqlspec:selector:app: mysqlports:- name: mysqlportprotocol: TCPport: 3306targetPort: dbport[root@node1 wordpress]# cat wordpress.yamlapiVersion: apps/v1beta1kind: Deploymentmetadata:name: wordpress-deploylabels:app: wordpressspec:template:metadata:labels:app: wordpressspec:containers:- name: wordpressimage: wordpressimagePullPolicy: IfNotPresentports:- containerPort: 80name: wdportenv:- name: WORDPRESS_DB_HOSTvalue: mysql:3306- name: WORDPRESS_DB_USERvalue: wordpress- name: WORDPRESS_DB_PASSWORDvalue: wordpress---apiVersion: v1kind: Servicemetadata:name: wordpressspec:type: NodePortselector:app: wordpressports:- name: wordpressportprotocol: TCPport: 80targetPort: wdport#### 启动容器kubectl create -f wordpress-db.yamlkubectl create -f wordpress.yaml#### 查看集群信息kubectl get all -A -l app=wordpressNAMESPACE NAME READY STATUS RESTARTS AGEdefault pod/wordpress-deploy-f9c5cf5c6-tj2bc 1/1 Running 0 80mNAMESPACE NAME READY UP-TO-DATE AVAILABLE AGEdefault deployment.apps/wordpress-deploy 1/1 1 1 80mNAMESPACE NAME DESIRED CURRENT READY AGEdefault replicaset.apps/wordpress-deploy-f9c5cf5c6 1 1 1 80m#### 配置ingress[root@node1 wordpress]# cat ingress.yamlapiVersion: extensions/v1beta1kind: Ingressmetadata:name: wordpress-ingressnamespace: defaultannotations:kubernetes.io/ingress.class: &quot;nginx&quot;spec:rules:- host: wordpress.boshao.wanghttp:paths:- backend:serviceName: wordpressservicePort: 80#### 创建ingresskubectl create -f ingress.yaml#### 查看ingres信息[root@node1 wordpress]# kubectl get ing wordpress-ingressNAME HOSTS ADDRESS PORTS AGEwordpress-ingress wordpress.boshao.wang 80 78m[root@node1 wordpress]# kubectl describe ingress wordpress-ingressName: wordpress-ingressNamespace: defaultAddress:Default backend: default-http-backend:80 (&lt;none&gt;)Rules:Host Path Backends---- ---- --------wordpress.boshao.wangwordpress:80 (10.233.70.27:80)Annotations:kubernetes.io/ingress.class: nginxEvents: &lt;none&gt;#### 最后绑定域名wordpress.boshao.wang  到node节点即可。通过ingress-nginx 暴露的端口进行访问，即可。ingress-nginx service/ingress-nginx NodePort 10.233.29.94 &lt;none&gt; 80:31661/TCP,443:30250/TCP 6d2h访问方式：wordpress.boshao.wang → node ip:31661 http://wordpress.boshao.wang:31661/</code></pre><hr><h4 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h4><blockquote><p><a href="https://minikube.sigs.k8s.io/" target="_blank" rel="noopener">minikube参考</a></p></blockquote><blockquote><p><a href="https://k8smeetup.github.io/docs/user-guide/kubectl/v1.7/#-strong-getting-started-strong-" target="_blank" rel="noopener">命令查询</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####1. 安装kubectl&lt;/p&gt;
&lt;p&gt;####2. 安装minikube&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.下载virtualbox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.brew cask install miniku
      
    
    </summary>
    
      <category term="k8s" scheme="https://23yue23.github.io/categories/k8s/"/>
    
    
      <category term="k8s-实战篇" scheme="https://23yue23.github.io/tags/k8s-%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>python-常用篇</title>
    <link href="https://23yue23.github.io/2019/10/24/python-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/24/python-常用篇/</id>
    <published>2019-10-24T10:26:44.000Z</published>
    <updated>2019-11-20T02:38:41.294Z</updated>
    
    <content type="html"><![CDATA[<p>####pyenv 的使用</p><pre><code> #查看python 版本信息   pyenv versions #python 切换版本   pyenv local 版本号</code></pre><p><a href="https://github.com/eteplus/blog/issues/4" target="_blank" rel="noopener">Mac下pyenv与pyenv-virtualenv的安装和使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####pyenv 的使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; #查看python 版本信息
   pyenv versions

 #python 切换版本
   pyenv local 版本号&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="python" scheme="https://23yue23.github.io/categories/python/"/>
    
    
      <category term="python-常用篇" scheme="https://23yue23.github.io/tags/python-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>cassandra-案例篇</title>
    <link href="https://23yue23.github.io/2019/10/15/cassandra-%E6%A1%88%E4%BE%8B%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/15/cassandra-案例篇/</id>
    <published>2019-10-15T07:40:19.000Z</published>
    <updated>2019-10-15T07:42:04.031Z</updated>
    
    <content type="html"><![CDATA[<h4 id="java-链接cassandra-查询"><a href="#java-链接cassandra-查询" class="headerlink" title="java 链接cassandra 查询"></a>java 链接cassandra 查询</h4><pre><code>导入依赖 &lt;!-- https://mvnrepository.com/artifact/com.datastax.cassandra/cassandra-driver-core --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.datastax.cassandra&lt;/groupId&gt;    &lt;artifactId&gt;cassandra-driver-core&lt;/artifactId&gt;    &lt;version&gt;3.7.1&lt;/version&gt; &lt;/dependency&gt;import com.datastax.driver.core.Cluster;import com.datastax.driver.core.ResultSet;import com.datastax.driver.core.Row;import com.datastax.driver.core.Session;import java.util.List;/** * @author xianchang.yue * @date 2019-10-15 14:59 */public class TestCassandra {    public static void main(String[] args) {        Cluster cluster = null;        try {            cluster = Cluster.builder().addContactPoints(&quot;127.0.0.1&quot;).withPort(9042).build();            Session session = cluster.connect();            ResultSet execute = session.execute(&quot;select * from system_schema.keyspaces&quot;);            List&lt;Row&gt; all = execute.all();            for (Row row : all) {                String keyspace_name = row.getString(&quot;keyspace_name&quot;);                System.out.println(keyspace_name);            }        } finally {            if (cluster != null) {                cluster.close();            }        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;java-链接cassandra-查询&quot;&gt;&lt;a href=&quot;#java-链接cassandra-查询&quot; class=&quot;headerlink&quot; title=&quot;java 链接cassandra 查询&quot;&gt;&lt;/a&gt;java 链接cassandra 查询&lt;/h4&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="cassandra" scheme="https://23yue23.github.io/categories/cassandra/"/>
    
    
      <category term="cassandra-案例篇" scheme="https://23yue23.github.io/tags/cassandra-%E6%A1%88%E4%BE%8B%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>k8s-学习篇</title>
    <link href="https://23yue23.github.io/2019/10/15/k8s-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/15/k8s-学习篇/</id>
    <published>2019-10-15T04:03:49.000Z</published>
    <updated>2019-11-20T05:46:13.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="k8s-介绍"><a href="#k8s-介绍" class="headerlink" title="k8s 介绍"></a>k8s 介绍</h4><p>Kubernetes 是一个生产级的开源平台，用于协调计算机集群内部和跨计算机集群的应用程序容器的分发(调度)和运行。<br>一个 Master 是集群的调度节点。<br>nodes 是应用程序实际运行的工作节点。</p><h4 id="k8s-重要组件"><a href="#k8s-重要组件" class="headerlink" title="k8s 重要组件"></a>k8s 重要组件</h4><p>k8s核心组件：</p><blockquote><p>etcd保存了整个集群的状态；  </p></blockquote><blockquote><p>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；  </p></blockquote><blockquote><p>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；  </p></blockquote><blockquote><p>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；  </p></blockquote><blockquote><p>kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；  </p></blockquote><blockquote><p>Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）；  </p></blockquote><blockquote><p>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；  </p></blockquote><p>推荐的Add-ons：</p><blockquote><p>kube-dns负责为整个集群提供DNS服务</p></blockquote><blockquote><p>Ingress Controller为服务提供外网入口</p></blockquote><blockquote><p>Heapster提供资源监控</p></blockquote><blockquote><p>Dashboard提供GUI</p></blockquote><blockquote><p>Federation提供跨可用区的集群</p></blockquote><blockquote><p>Fluentd-elasticsearch提供集群日志采集、存储与查询</p></blockquote><h4 id="k8s-部署"><a href="#k8s-部署" class="headerlink" title="k8s 部署"></a>k8s 部署</h4><p>在k8s中，通过发布 Deployment，可以创建应用程序 (docker image) 的实例 (docker container)，这个实例会被包含在称为 Pod 的概念中，Pod 是 k8s 中最小单元的可管理单元</p><p>在 k8s 集群中发布 Deployment 后，Deployment 将指示 k8s 如何创建和更新应用程序的实例，master 节点将应用程序实例调度到集群中的具体的节点上。</p><p>创建应用程序实例后，Kubernetes Deployment Controller 会持续监控这些实例。如果运行实例的 worker 节点关机或被删除，则 Kubernetes Deployment Controller 将在群集中资源最优的另一个 worker 节点上重新创建一个新的实例。这提供了一种自我修复机制来解决机器故障或维护问题。</p><p>在容器编排之前的时代，各种安装脚本通常用于启动应用程序，但是不能够使应用程序从机器故障中恢复。通过创建应用程序实例并确保它们在集群节点中的运行实例个数，Kubernetes Deployment 提供了一种完全不同的方式来管理应用程序。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/ingress/</a></p><p>nginx官方介绍：<a href="https://www.nginx.com/products/nginx/kubernetes-ingress-controller" target="_blank" rel="noopener">https://www.nginx.com/products/nginx/kubernetes-ingress-controller</a></p><h4 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h4><p><a href="https://kubernetes.github.io/ingress-nginx/deploy/#prerequisite-generic-deployment-command" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/deploy/#prerequisite-generic-deployment-command</a></p><p>首先先下载相关的yaml文件，保存到本地。</p><p>deployments：<br>kubectl apply -f <a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml</a></p><p>service： 这里官方提供了各种云平台，系统等相关配置。我们这里是自建的k8s集群，所以我们选择裸机版本。</p><p>Bare-metal<br>Using NodePort:</p><p>kubectl apply -f <a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml</a></p><p>安装完后。看看集群信息。</p><p>[root@node1 ingress-nginx]# kubectl get all -A -l app.kubernetes.io/name=ingress-nginx<br>NAMESPACE NAME READY STATUS RESTARTS AGE<br>ingress-nginx pod/nginx-ingress-controller-79f6884cf6-vh2w2 1/1 Running 0 5d3h</p><p>NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE<br>ingress-nginx service/ingress-nginx NodePort 10.233.29.94 <none> 80:31661/TCP,443:30250/TCP 6d2h</none></p><p>NAMESPACE NAME READY UP-TO-DATE AVAILABLE AGE<br>ingress-nginx deployment.apps/nginx-ingress-controller 1/1 1 1 6d3h</p><p>NAMESPACE NAME DESIRED CURRENT READY AGE<br>ingress-nginx replicaset.apps/nginx-ingress-controller-79f6884cf6 1 1 1 6d3h</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;k8s-介绍&quot;&gt;&lt;a href=&quot;#k8s-介绍&quot; class=&quot;headerlink&quot; title=&quot;k8s 介绍&quot;&gt;&lt;/a&gt;k8s 介绍&lt;/h4&gt;&lt;p&gt;Kubernetes 是一个生产级的开源平台，用于协调计算机集群内部和跨计算机集群的应用程序容器的分发(调度
      
    
    </summary>
    
      <category term="k8s" scheme="https://23yue23.github.io/categories/k8s/"/>
    
    
      <category term="k8s-学习篇" scheme="https://23yue23.github.io/tags/k8s-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>sql-常用篇</title>
    <link href="https://23yue23.github.io/2019/10/15/sql-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/15/sql-常用篇/</id>
    <published>2019-10-15T03:17:16.000Z</published>
    <updated>2019-10-15T03:17:44.017Z</updated>
    
    <content type="html"><![CDATA[<h4 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h4><p><a href="https://www.sqlstyle.guide/zh/" target="_blank" rel="noopener">https://www.sqlstyle.guide/zh/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;编程规范&quot;&gt;&lt;a href=&quot;#编程规范&quot; class=&quot;headerlink&quot; title=&quot;编程规范&quot;&gt;&lt;/a&gt;编程规范&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.sqlstyle.guide/zh/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="sql" scheme="https://23yue23.github.io/categories/sql/"/>
    
    
      <category term="sql-常用篇" scheme="https://23yue23.github.io/tags/sql-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>详细文档设计规范</title>
    <link href="https://23yue23.github.io/2019/10/15/%E8%AF%A6%E7%BB%86%E6%96%87%E6%A1%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>https://23yue23.github.io/2019/10/15/详细文档设计规范/</id>
    <published>2019-10-15T02:55:47.000Z</published>
    <updated>2019-11-12T09:07:25.369Z</updated>
    
    <content type="html"><![CDATA[<h4 id="详细设计的目标"><a href="#详细设计的目标" class="headerlink" title="详细设计的目标"></a>详细设计的目标</h4><p>在项目实施之前进行问题、方案等重要项目信息的归纳整理。书写文档的过程中模块负责人能够更深入的思考问题与解决方案，提升对目标的理解、后续工作的质量、效率，降低项目风险。文档本身作为组织资产进行信息载体，发挥长期的价值。</p><h4 id="详细设计文档原则"><a href="#详细设计文档原则" class="headerlink" title="详细设计文档原则"></a>详细设计文档原则</h4><p>能够面向不了解业务&amp;技术背景的人群</p><p>清晰表述完主要问题以及解决方案</p><p>详细设计阶段必须定义接口(也可以单独书写接口文档)</p><p>考虑到测试、运维、产品的主要关注点</p><h4 id="设计文档的格式以及载体"><a href="#设计文档的格式以及载体" class="headerlink" title="设计文档的格式以及载体"></a>设计文档的格式以及载体</h4><p>格式: markdown 或 word(更新时使用审阅模式)</p><p>载体: gitlab , 文档存放项目下doc目录, 每次发版tag携带最新文档</p><h4 id="详细设计的适用场景"><a href="#详细设计的适用场景" class="headerlink" title="详细设计的适用场景"></a>详细设计的适用场景</h4><h5 id="需要写详细设计文档的场景"><a href="#需要写详细设计文档的场景" class="headerlink" title="需要写详细设计文档的场景"></a>需要写详细设计文档的场景</h5><p>新的线上模块</p><p>架构的大调整</p><p>对业务产生较大的影响的版本</p><h5 id="不需要写详细设计文档的场景"><a href="#不需要写详细设计文档的场景" class="headerlink" title="不需要写详细设计文档的场景"></a>不需要写详细设计文档的场景</h5><p>不影响架构bug修复和升级且不影响主体逻辑和接口</p><h4 id="详细设计文档规范"><a href="#详细设计文档规范" class="headerlink" title="详细设计文档规范"></a>详细设计文档规范</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;详细设计的目标&quot;&gt;&lt;a href=&quot;#详细设计的目标&quot; class=&quot;headerlink&quot; title=&quot;详细设计的目标&quot;&gt;&lt;/a&gt;详细设计的目标&lt;/h4&gt;&lt;p&gt;在项目实施之前进行问题、方案等重要项目信息的归纳整理。书写文档的过程中模块负责人能够更深入的思考问题
      
    
    </summary>
    
      <category term="杂七杂八" scheme="https://23yue23.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="详细文档设计规范" scheme="https://23yue23.github.io/tags/%E8%AF%A6%E7%BB%86%E6%96%87%E6%A1%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>shell-案例篇</title>
    <link href="https://23yue23.github.io/2019/10/15/shell-%E6%A1%88%E4%BE%8B%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/15/shell-案例篇/</id>
    <published>2019-10-15T02:50:56.000Z</published>
    <updated>2019-11-12T09:06:35.412Z</updated>
    
    <content type="html"><![CDATA[<pre><code>## 此shell脚本只在bash解释器下测试运行过, sh解释器不保证一定正确## 关于bash和sh有啥区别, 大家可自行Google, 我建议大家使用bash## 可能大部分Linux系统, bash跟sh不会有太多区别, 但是如果你用Debian或者Ubuntu的话## 你会发现之前写的脚本sh运行会爆出一堆语法错误, 因为他们的sh等于Dash, 很蛋疼.###################PRODUCTLINE=&quot;rta&quot;PROJECT=&quot;ga-device&quot;## 自带出错邮件报警: 尽量使用邮件组而不是使用具体某个人的邮箱## 因为科比曾经说过: 朋友来来走走, 冠军旗帜永不倒## 使用具体某个人的邮箱回头离职了邮件就发不出来了ALARM_ADDR=&quot;bin.li@mobvista.com&quot;ALARM_CC=&quot;bin.li@mobvista.com&quot;## 钉钉报警有个好处是你可以建立群组, 而且可以分类, 不重要的信息你## 可以发到一个群里, 然后大家屏蔽群消息就好, 出问题的时候再去翻## dingtalkid: 钉钉群讨论的ID, 我想不需要我教你怎么获得这个IDALARM_DINGDING_TALKID=&quot;62138ba2d704500d24b21064663659e2288bdf5f6b72d8a8d5895746f2ee0f8f&quot;# https://oapi.dingtalk.com/robot/send?access_token=62138ba2d704500d24b21064663659e2288bdf5f6b72d8a8d5895746f2ee0f8fINFO_DINGDING_TALKID=&quot;d49490482e23f0780bf017ad04cb29d027755e0550578ff4324e48f989e7a4c1&quot;# https://oapi.dingtalk.com/robot/send?access_token=d49490482e23f0780bf017ad04cb29d027755e0550578ff4324e48f989e7a4c1## kibana使用的EleasticSearch的地址, 数据上报到ES, 才能用kibana展示出来## 尽量用公司统一的, 不要自己单独整## 如果觉得别人搞的不好用, 尽量推动别人优化## 而不是自己搭一个扔在那里没人管ES_ADDR=&quot;bj-report-ELB20151027-2124151593.us-east-1.elb.amazonaws.com:80&quot;ES_USER=&quot;mob_report&quot;ES_PASSWD=&quot;Mobvista_256&quot;## 顾名思义, 就是把一个JSON document推到ES## 这里面有一些概念: docid, doc, index, type(如果不知道啥意思, 自行google)## 参数:##   + docid: doc唯一的ID, 很多人喜欢让ES自己生成, 但是这个地方尽量不要,##     因为将来你的任务失败你还会补数呢, 找一个唯一的ID, 或者拼一个出来,##     将来补数原来的doc会被自动覆盖掉, 不至于数据重复##   + doc: json doc##     任何你想塞进去的信息, 如果你足够聪明, 请塞一个格式化好的时间(北京时区)和##     一个时间戳进去function doc2es() {    local __docid=&quot;$1&quot;    local __doc=&quot;$2&quot;    curl -XPUT &quot;$ES_ADDR/mp_rba/cap_updater_jobstatus/$__docid&quot; \         -H &#39;Content-Type: application/json&#39; \         -u &quot;$ES_USER:$ES_PASSWD&quot; -d&quot;$__doc&quot;}## 邮件报警, 会使用全局变量里面的收件人地址 ALARM_ADDR &amp; ALARM_CC## 两个参数:##   + sub: 邮件主题##   + body: 报警内容(别JB图省事, 多写点东西又不会死, 让别人一眼看出来发生了什么吧!)function email_alarm() {    local _sub=$1    local _body=&quot;$2&quot;    cat &quot;$_body&quot; | mail -s &quot;[$PRODUCTLINE][$PROJECT]$_sub&quot; -c &quot;$ALARM_CC&quot; &quot;$ALARM_ADDR&quot;}function send_dingding_msg() {    local _dingtalkid=&quot;$1&quot;    local _msg=&quot;$2&quot;    url=&quot;https://oapi.dingtalk.com/robot/send?access_token=$_dingtalkid&quot;    body=&quot;{         \&quot;msgtype\&quot;: \&quot;text\&quot;,         \&quot;text\&quot;: {             \&quot;content\&quot;: \&quot;[$PRODUCTLINE][$PROJECT] Failed !!! [$_msg]\&quot;         },        \&quot;at\&quot;: {             \&quot;atMobiles\&quot;: [],             \&quot;isAtAll\&quot;: false         }    }&quot;    curl &quot;$url&quot;  -H &#39;Content-Type: application/json&#39; -X POST -d &quot;$body&quot;}## 钉钉报警, 会使用全局变量里面的收件人地址 ALARM_ADDR &amp; ALARM_CC## 参数:##   + msg: 报警内容(别JB图省事, 多写点东西又不会死, 让别人一眼看出来发生了什么吧!)function dingding_alarm() {    send_dingding_msg $ALARM_DINGDING_TALKID &quot;$1&quot;}function dingding_info() {    send_dingding_msg $INFO_DINGDING_TALKID &quot;$1&quot;}## 就是想让输出多个时间而已## 参数: 你想打的消息function info() {    local _msg=&quot;$1&quot;    echo &quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) INFO [$_msg]&quot;}## 就是想让输出多个时间而已## 参数: 你想打的消息function error() {    local _msg=&quot;$1&quot;    echo &quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) ERROR [$_msg]&quot;}## 任务运行结束, 清理掉临时文件## 参数: 给个文件名function clean_file() {    local _f=&quot;$1&quot;    if [ -f $_f ]; then        info &quot;rm $_f&quot;        rm $_f    fi}## 任务运行结束, 备份重要结果文件## 参数: 给个文件名和后缀## 比如: back_file file-name 2019032013function back_file() {    local _f=&quot;$1&quot;    local _postfix=&quot;$2&quot;    if [ -f $_f ]; then        info &quot;mv $_f $_f.$_postfix&quot;        mv $_f $_f.$_postfix    fi}</code></pre><pre><code># 为了方便CTI和CVR的计算, 我们需要从s3拉取一些中间结果下来# 这个地方定义一个下载函数# 希望达到的效果是, 给定一个输入路径, 可以把这个路径下的所有文件都下载下来# 并且导到一个目标文件中# 当然还需要做一下文件大小的check, 别把本地磁盘给撑爆了function download_from_s3_dir() {    local _s3_dir=$1    local _local_file=$2    local _tmp_index=&quot;__tmp_index_for_download_s3_file__$(date +&quot;%s&quot;).$RANDOM&quot;    local _sz_max=4000000000    # local _sz_max=1000    # check file size 1st    if [ -f $_tmp_index ]; then        rm $_tmp_index    fi    run_with_check &quot;aws s3 ls $_s3_dir &gt; $_tmp_index&quot;    if [ 0 -eq $(wc -l $_tmp_index | awk &#39;{print $1}&#39;) ]; then        echo &quot;WARNING: no file in $_s3_dir&quot;        touch $_local_file    else        local _sz_tt=0        for sz in $(cat $_tmp_index | awk &#39;{print $3}&#39;)        do            echo $sz  # debug            _sz_tt=$((_sz_tt+$sz))        done        if [ $_sz_tt -gt $_sz_max ]; then            echo &quot;ERROR: files too large exit!!! [$_sz_tt &gt; $_sz_max]&quot;            exit 1        fi        if [ -f $_local_file ]; then            rm $_local_file        fi        for f in $(cat $_tmp_index | awk &#39;{print $3&quot;|&quot;$4}&#39;)        do            local _sz=$(echo &quot;$f&quot; | awk -F&#39;|&#39; &#39;{print $1}&#39;)            local _ff=$(echo &quot;$f&quot; | awk -F&#39;|&#39; &#39;{print $2}&#39;)            local _ff_local=$_ff&quot;.$(date +&quot;%s&quot;).$RANDOM&quot;            if [ x&quot;0&quot; = x&quot;$_sz&quot; ]; then                continue            fi            run_with_check &quot;aws s3 cp $_s3_dir$_ff $_ff_local&quot;            run_with_check &quot;cat $_ff_local &gt;&gt; $_local_file&quot;            if [ -f $_ff_local ]; then                rm $_ff_local            fi        done    fi    if [ -f $_tmp_index ]; then        rm $_tmp_index    fi}</code></pre><pre><code>## 这个函数我想大家都可以用到## 把你任务一些可能会失败的操作过程, 比如从s3拷个文件## 比如执行一个py脚本, 比如curl一个东西## run_with_check, 发现失败, 自动报警, 而且立马终止任务## 参数: 你要执行的命令## 比如: run_with_check &quot;python demo.py&quot;function run_with_check {    cmd=&quot;$1&quot;    info &quot;$cmd&quot;    eval &quot;$cmd&quot;    if [ 0 -ne $? ]; then        error &quot;[$cmd] failed!!!!! exit !!!!!!!!&quot;        email_alarm &quot;[$PRODUCTLINE][$PROJECT] Failed !!!&quot; &quot;command exit code not 0: $cmd&quot;        dingding_alarm &quot;command exit code not 0: $cmd&quot;        exit 1    fi}</code></pre><h4 id="微信报警接口"><a href="#微信报警接口" class="headerlink" title="微信报警接口"></a>微信报警接口</h4><pre><code>#!/usr/bin/env python# coding:utf-8import sysimport urllib2import timeimport jsonimport requestsimport redisreload(sys)sys.setdefaultencoding(&#39;utf-8&#39;)print sys.argvmessage = sys.argv[3]   # 位置参数获取title 适用于zabbixuser = sys.argv[1] # 位置参数获取content 适用于zabbixPOOL = redis.ConnectionPool(host=&#39;&#39;,port=3721,password=&#39;&#39;,db=1)rs=redis.Redis(connection_pool=POOL)def send_msg(user,message):    # 发送消息    qs_token = rs.get(&#39;weixin&#39;)    url = &quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={0}&quot;.format(        qs_token)    payload = {        &quot;touser&quot;:user,        &quot;msgtype&quot;: &quot;text&quot;,        &quot;agentid&quot;: &quot;2&quot;,        &quot;text&quot;: {                   &quot;content&quot;: message        },        &quot;safe&quot;: &quot;0&quot;    }    ret = requests.post(url, data=json.dumps(payload, ensure_ascii=False))    print ret.json()if __name__ == &#39;__main__&#39;:    send_msg(user,message)# 使用方法：python  wetchat.py mail@qq.com subject message</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;## 此shell脚本只在bash解释器下测试运行过, sh解释器不保证一定正确
## 关于bash和sh有啥区别, 大家可自行Google, 我建议大家使用bash
## 可能大部分Linux系统, bash跟sh不会有太多区别, 但是如果你用Debian
      
    
    </summary>
    
      <category term="shell" scheme="https://23yue23.github.io/categories/shell/"/>
    
    
      <category term="shell-案例篇" scheme="https://23yue23.github.io/tags/shell-%E6%A1%88%E4%BE%8B%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>shell-常用篇</title>
    <link href="https://23yue23.github.io/2019/10/15/shell-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/15/shell-常用篇/</id>
    <published>2019-10-15T02:47:25.000Z</published>
    <updated>2019-10-16T06:10:22.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell-编程"><a href="#shell-编程" class="headerlink" title="shell 编程"></a>shell 编程</h4><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><pre><code>=    两个字符串相等返回true!=    两个字符串不相等返回true-z    字符串长度为0返回true-n    字符串长度不为0返回true-d file    检测文件是否是目录，如果是，则返回 true-r file    检测文件是否可读，如果是，则返回 true-w file    检测文件是否可写，如果是，则返回 true-x file    检测文件是否可执行，如果是，则返回 true-s file    检测文件是否为空（文件大小是否大于0，不为空返回 true-e file    检测文件（包括目录）是否存在，如果是，则返回 true</code></pre><hr><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><pre><code>#!/bin/bash#定义字符串mtext=&quot;hello&quot;  mtext2=&quot;world&quot;#字符串的拼接mtext3=$mtext&quot; &quot;$mtext2  #输出字符串echo $mtext3 #输出字符串长度echo ${#mtext3}  #截取字符串echo ${mtext3:1:4}  </code></pre><hr><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><pre><code>#!/bin/bash#定义数组array=(1 2 3 4 5)  array2=(aa bb cc dd ee)  #找到某一个下标的数，然后赋值value=${array[3]}  echo $value  #找到某一个下标的数，然后赋值value2=${array2[3]} echo $value2  #获取数组长度length=${#array[*]} echo $length</code></pre><hr><h5 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h5><pre><code> #输出并且换行echo &quot;hello \nworld&quot; #重定向到文件echo &quot;hello world&quot; &gt; a.txt  #输出当前系统时间echo `date`  </code></pre><hr><h5 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h5><pre><code>#!/bin/sh#测试各种字符串比较操作。#shell中对变量的值添加单引号，爽引号和不添加的区别：对类型来说是无关的，即不是添加了引号就变成了字符串类型，#单引号不对相关量进行替换，如不对$符号解释成变量引用，从而用对应变量的值替代，双引号则会进行替代#author:tenfyguoA=&quot;$1&quot;B=&quot;$2&quot;echo &quot;输入的原始值：A=$A,B=$B&quot;#判断字符串是否相等if [ &quot;$A&quot; = &quot;$B&quot; ];thenecho &quot;[ = ]&quot;fi#判断字符串是否相等，与上面的=等价if [ &quot;$A&quot; == &quot;$B&quot; ];thenecho &quot;[ == ]&quot;fi#注意:==的功能在[[]]和[]中的行为是不同的，如下#如果$a以”a”开头(模式匹配)那么将为true if [[ &quot;$A&quot; == a* ]];thenecho &quot;[[ ==a* ]]&quot;fi#如果$a等于a*(字符匹配),那么结果为trueif [[ &quot;$A&quot; == &quot;a*&quot; ]];thenecho &quot;==/&quot;a*/&quot;&quot;fi  #File globbing(通配) 和word splitting将会发生, 此时的a*会自动匹配到对应的当前以a开头的文件#如在当前的目录中有个文件：add_crontab.sh,则下面会输出ok#if [ &quot;add_crontab.sh&quot; == a* ];then #echo &quot;ok&quot;#fiif [ &quot;$A&quot; == a* ];thenecho &quot;[ ==a* ]&quot;fi#如果$a等于a*(字符匹配),那么结果为trueif [ &quot;$A&quot; == &quot;a*&quot; ];thenecho &quot;==/&quot;a*/&quot;&quot;fi#字符串不相等if [ &quot;$A&quot; != &quot;$B&quot; ];thenecho &quot;[ != ]&quot;fi#字符串不相等if [[ &quot;$A&quot; != &quot;$B&quot; ]];thenecho &quot;[[ != ]]&quot;fi#字符串不为空，长度不为0if [ -n &quot;$A&quot; ];thenecho &quot;[ -n ]&quot;fi#字符串为空.就是长度为0.if [ -z &quot;$A&quot; ];thenecho &quot;[ -z ]&quot;fi#需要转义&lt;，否则认为是一个重定向符号if [ $A /&lt; $B ];thenecho &quot;[ &lt; ]&quot;  fiif [[ $A &lt; $B ]];thenecho &quot;[[ &lt; ]]&quot;  fi#需要转义&gt;，否则认为是一个重定向符号if [ $A /&gt; $B ];thenecho &quot;[ &gt; ]&quot;  fiif [[ $A &gt; $B ]];thenecho &quot;[[ &gt; ]]&quot;  fi</code></pre><pre><code>注意：1.if 和 [ ] 之间要有空格2.[ ] 和“ ”之间要有空格3.“ ”和 = 之间要有空格</code></pre><hr><h5 id="test-查看文件是否存在"><a href="#test-查看文件是否存在" class="headerlink" title="test 查看文件是否存在"></a>test 查看文件是否存在</h5><p><a href="https://blog.csdn.net/qq_34337272/article/details/85640050" target="_blank" rel="noopener">https://blog.csdn.net/qq_34337272/article/details/85640050</a></p><pre><code>test $[num1] -eq $[num2]  #判断两个变量是否相等test num1=num2  #判断两个数字是否相等-e file    文件存在则返回真-r file    文件存在并且可读则返回真-w file    文件存在并且可写则返回真-x file    文件存在并且可执行则返回真-s file    文件存在并且内容不为空则返回真-d file    文件目录存在则返回真</code></pre><h5 id="case…-esac"><a href="#case…-esac" class="headerlink" title="case….esac"></a>case….esac</h5><pre><code>case 值 in模式1)    command1    command2    command3    ;;模式2）    command1    command2    command3    ;;*)    command1    command2    command3    ;;esac# 匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。# ;; 与其他语言中的 break 类似，意思是不执行接下来的语句而是跳到整个 case 语句的最后。# *)与default相似，如果上面没有匹配到的模式，则执行*)里的内容。模式支持正则表达式:*       任意字串?       任意字元[abc]   a, b, 或c三字元其中之一[a-n]   从a到n的任一字元|       多重选择举例：#!/bin/sh case $1 instart | begin)    echo &quot;I am started!&quot;      ;;stop | end)    echo &quot;I am stopped!&quot;      ;;*)    echo &quot;Other command!&quot;      ;;esac</code></pre><hr><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><pre><code>#!/bin/bashfor i in {1..5}do   echo $idonefor i in 5 6 7 8 9 do   echo $idonefor FILE in $HOME/.bash* do   echo $FILEdone</code></pre><hr><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><pre><code>#!/bin/bashCOUNTER=0while [ $COUNTER lt 5 ]do    COUNTER=`expr $COUNTER + 1`        echo $COUNTERdoneecho &#39;请输入。。。&#39;echo &#39;ctrl + d 即可停止该程序&#39;while read FILM do    echo &quot;Yeah! great film the $FILM&quot;done</code></pre><hr><h4 id="Shell-脚本执行返回状态码："><a href="#Shell-脚本执行返回状态码：" class="headerlink" title="Shell 脚本执行返回状态码："></a>Shell 脚本执行返回状态码：</h4><p>状态码</p><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>命令成功完成</td></tr><tr><td>1</td><td>通常的未知错误</td></tr><tr><td>2</td><td>误用shell命令</td></tr><tr><td>126</td><td>命令无法执行</td></tr><tr><td>127</td><td>没有找到命令</td></tr><tr><td>128</td><td>无效的退出参数</td></tr><tr><td>128+x</td><td>使用Linux信号x的致命错误。</td></tr><tr><td>130</td><td>使用Ctrl-C终止的命令</td></tr><tr><td>255</td><td>规范外的退出状态</td></tr></tbody></table><h4 id="Shell-特殊变量列表"><a href="#Shell-特殊变量列表" class="headerlink" title="Shell 特殊变量列表"></a>Shell 特殊变量列表</h4><pre><code>特殊变量列表变量    含义$0    当前脚本的文件名$n    传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。$#    传递给脚本或函数的参数个数。$*    传递给脚本或函数的所有参数。$@    传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。$?    上个命令的退出状态，或函数的返回值。$$    当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</code></pre><h5 id="变量注意事项"><a href="#变量注意事项" class="headerlink" title="变量注意事项"></a>变量注意事项</h5><pre><code>变量名=变量值等号“=”前后不可以有空格变量名不可以直接和其他字符相连，如果想相连，必须用括号：echo “this is $(he)llo!”</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;shell-编程&quot;&gt;&lt;a href=&quot;#shell-编程&quot; class=&quot;headerlink&quot; title=&quot;shell 编程&quot;&gt;&lt;/a&gt;shell 编程&lt;/h4&gt;&lt;h5 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="shell" scheme="https://23yue23.github.io/categories/shell/"/>
    
    
      <category term="shell-常用篇" scheme="https://23yue23.github.io/tags/shell-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>go-常用篇</title>
    <link href="https://23yue23.github.io/2019/10/15/go-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/15/go-常用篇/</id>
    <published>2019-10-15T02:34:37.000Z</published>
    <updated>2019-11-12T08:12:50.448Z</updated>
    
    <content type="html"><![CDATA[<h4 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h4><p><a href="http://docscn.studygolang.com/doc/effective_go.html" target="_blank" rel="noopener">http://docscn.studygolang.com/doc/effective_go.html</a></p><h4 id="单测样例"><a href="#单测样例" class="headerlink" title="单测样例"></a>单测样例</h4><p><a href="http://gitlab.mobvista.com/mtech/mtech/blob/master/开发-Go单元测试.md" target="_blank" rel="noopener">http://gitlab.mobvista.com/mtech/mtech/blob/master/开发-Go单元测试.md</a></p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>开发可自由选择编辑器，推荐使用IDE：<a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">https://www.jetbrains.com/go/</a></p><h4 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h4><p>标准库: <a href="http://docscn.studygolang.com/pkg/" target="_blank" rel="noopener">http://docscn.studygolang.com/pkg/</a><br>日志: <a href="https://github.com/cihub/seelog" target="_blank" rel="noopener">https://github.com/cihub/seelog</a><br>配置: <a href="https://github.com/spf13/viper" target="_blank" rel="noopener">https://github.com/spf13/viper</a><br>uuid: <a href="https://github.com/satori/go.uuid" target="_blank" rel="noopener">https://github.com/satori/go.uuid</a><br>leveldb: <a href="https://github.com/syndtr/goleveldb/leveldb" target="_blank" rel="noopener">https://github.com/syndtr/goleveldb/leveldb</a><br>murmurhash3: <a href="https://github.com/spaolacci/murmur3" target="_blank" rel="noopener">https://github.com/spaolacci/murmur3</a><br>redis: <a href="https://github.com/garyburd/redigo/redis" target="_blank" rel="noopener">https://github.com/garyburd/redigo/redis</a><br>redis-cluster: <a href="https://github.com/chasex/redis-go-cluster" target="_blank" rel="noopener">https://github.com/chasex/redis-go-cluster</a><br>mongo: <a href="http://gopkg.in/mgo.v2" target="_blank" rel="noopener">http://gopkg.in/mgo.v2</a><br>命令行: <a href="http://gopkg.in/alecthomas/kingpin.v2" target="_blank" rel="noopener">http://gopkg.in/alecthomas/kingpin.v2</a><br>grpc: <a href="http://www.grpc.io/docs/quickstart/go.html" target="_blank" rel="noopener">http://www.grpc.io/docs/quickstart/go.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;编码规范&quot;&gt;&lt;a href=&quot;#编码规范&quot; class=&quot;headerlink&quot; title=&quot;编码规范&quot;&gt;&lt;/a&gt;编码规范&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://docscn.studygolang.com/doc/effective_go.html&quot; 
      
    
    </summary>
    
      <category term="go" scheme="https://23yue23.github.io/categories/go/"/>
    
    
      <category term="go-常用篇" scheme="https://23yue23.github.io/tags/go-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>git-常用篇</title>
    <link href="https://23yue23.github.io/2019/10/14/git-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/14/git-常用篇/</id>
    <published>2019-10-14T05:42:39.000Z</published>
    <updated>2019-10-14T05:46:55.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>git config –global user.name “你的名字” 让你全部的Git仓库绑定你的名字</p></blockquote><blockquote><p>git config –global user.email “你的邮箱” 让你全部的Git仓库绑定你的邮箱</p></blockquote><blockquote><p>git init 初始化你的仓库</p></blockquote><blockquote><p>git add . 把工作区的文件全部提交到暂存区</p></blockquote><blockquote><p>git add ./<file>/ 把工作区的<file>文件提交到暂存区</file></file></p></blockquote><blockquote><p>git commit -m “xxx” 把暂存区的所有文件提交到仓库区，暂存区空空荡荡</p></blockquote><blockquote><p>git remote add origin <a href="https://github.com/name/name_cangku.git" target="_blank" rel="noopener">https://github.com/name/name_cangku.git</a> 把本地仓库与远程仓库连接起来</p></blockquote><blockquote><p>git push -u origin master 把仓库区的主分支master提交到远程仓库里</p></blockquote><blockquote><p>git push -u origin &lt;其他分支&gt; 把其他分支提交到远程仓库</p></blockquote><blockquote><p>git status查看当前仓库的状态</p></blockquote><blockquote><p>git diff 查看文件修改的具体内容</p></blockquote><blockquote><p>git log 显示从最近到最远的提交历史</p></blockquote><blockquote><p>git clone + 仓库地址下载克隆文件</p></blockquote><blockquote><p>git reset –hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起</p></blockquote><blockquote><p>git reflog 显示命令历史</p></blockquote><blockquote><p>git checkout – <file> 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z</file></p></blockquote><blockquote><p>git rm 删除版本库的文件</p></blockquote><blockquote><p>git branch 查看当前所有分支</p></blockquote><blockquote><p>git branch &lt;分支名字&gt; 创建分支</p></blockquote><blockquote><p>git checkout &lt;分支名字&gt; 切换到分支</p></blockquote><blockquote><p>git merge &lt;分支名字&gt; 合并分支</p></blockquote><blockquote><p>git branch -d &lt;分支名字&gt; 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支</p></blockquote><blockquote><p>git branch -D + &lt;分支名字&gt; 强行删除，丢弃没被合并的分支</p></blockquote><blockquote><p>git log –graph 查看分支合并图</p></blockquote><blockquote><p>git merge –no-ff &lt;分支名字&gt; 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息</p></blockquote><blockquote><p>git stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作</p></blockquote><blockquote><p>git stash list 查看你刚刚“存放”起来的工作去哪里了</p></blockquote><blockquote><p>git stash apply 恢复却不删除stash内容</p></blockquote><blockquote><p>git stash drop 删除stash内容</p></blockquote><blockquote><p>git stash pop 恢复的同时把stash内容也删了</p></blockquote><blockquote><p>git remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin</p></blockquote><blockquote><p>git remote -v 显示更详细的信息</p></blockquote><blockquote><p>git pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反</p></blockquote><blockquote><p>git rebase 把分叉的提交历史“整理”成一条直线，看上去更直观</p></blockquote><blockquote><p>git tag 查看所有标签，可以知道历史版本的tag</p></blockquote><blockquote><p>git tag <name> 打标签，默认为HEAD。比如git tag v1.0</name></p></blockquote><blockquote><p>git tag <tagname> &lt;版本号&gt; 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字</tagname></p></blockquote><blockquote><p>git show <tagname> 查看标签信息</tagname></p></blockquote><blockquote><p>git tag -a <tagname> -m “&lt;说明&gt;” 创建带说明的标签。-a指定标签名，-m指定说明文字</tagname></p></blockquote><blockquote><p>git tag -d <tagname> 删除标签</tagname></p></blockquote><blockquote><p>git push origin <tagname> 推送某个标签到远程</tagname></p></blockquote><blockquote><p>git push origin –tags 一次性推送全部尚未推送到远程的本地标签</p></blockquote><blockquote><p>git push origin :refs/tags/<tagname> 删除远程标签<tagname></tagname></tagname></p></blockquote><blockquote><p>git config –global color.ui true 让Git显示颜色，会让命令输出看起来更醒目</p></blockquote><blockquote><p>git add -f <file> 强制提交已忽略的的文件</file></p></blockquote><blockquote><p>git check-ignore -v <file> 检查为什么Git会忽略该文件</file></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;git config –global user.name “你的名字” 让你全部的Git仓库绑定你的名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;git config –global user.email “你的邮箱” 
      
    
    </summary>
    
      <category term="工具" scheme="https://23yue23.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git-常用篇" scheme="https://23yue23.github.io/tags/git-%E5%B8%B8%E7%94%A8%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch-学习篇</title>
    <link href="https://23yue23.github.io/2019/10/11/elasticsearch-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/11/elasticsearch-学习篇/</id>
    <published>2019-10-11T04:05:54.000Z</published>
    <updated>2019-10-11T05:34:13.030Z</updated>
    
    <content type="html"><![CDATA[<p>介绍：<br>一个分布式的实时文档存储，每个字段 可以被索引与搜索<br>一个分布式实时分析搜索引擎<br>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;介绍：&lt;br&gt;一个分布式的实时文档存储，每个字段 可以被索引与搜索&lt;br&gt;一个分布式实时分析搜索引擎&lt;br&gt;能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据&lt;/p&gt;

      
    
    </summary>
    
      <category term="elasticsearch" scheme="https://23yue23.github.io/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch-学习篇" scheme="https://23yue23.github.io/tags/elasticsearch-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>职业知识图谱</title>
    <link href="https://23yue23.github.io/2019/10/10/%E8%81%8C%E4%B8%9A%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://23yue23.github.io/2019/10/10/职业知识图谱/</id>
    <published>2019-10-10T10:00:19.000Z</published>
    <updated>2019-11-12T09:07:13.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="大数据通用处理平台"><a href="#大数据通用处理平台" class="headerlink" title="大数据通用处理平台"></a>大数据通用处理平台</h4><p>Spark<br>Flink<br>Hadoop</p><h4 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h4><p>HDFS</p><h4 id="资源调度"><a href="#资源调度" class="headerlink" title="资源调度"></a>资源调度</h4><p>1、Yarn<br>2、Mesos</p><h4 id="机器学习工具"><a href="#机器学习工具" class="headerlink" title="机器学习工具"></a>机器学习工具</h4><p>Mahout</p><p>Spark Mlib</p><p>TensorFlow (Google 系)</p><p>Amazon Machine Learning</p><p>DMTK (微软分布式机器学习工具)</p><h4 id="数据分析-数据仓库-SQL类"><a href="#数据分析-数据仓库-SQL类" class="headerlink" title="数据分析/数据仓库(SQL类)"></a>数据分析/数据仓库(SQL类)</h4><p>Pig</p><p>Hive</p><p>kylin</p><p>Spark SQL,</p><p>Spark DataFrame</p><p>Impala</p><p>Phoenix</p><p>ELK（ElasticSearch，Logstash，Kibana）</p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>Kafka(纯日志类，大吞吐量)</p><p>RocketMQ</p><p>ZeroMQ</p><p>ActiveMQ</p><p>RabbitMQ</p><h4 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h4><p>Storm/JStorm</p><p>Spark Streaming</p><p>Flink</p><h4 id="日志收集"><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h4><p>Scribe</p><p>Flume</p><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><p>Java</p><p>Python</p><p>R</p><p>Ruby</p><p>Scala</p><h4 id="数据分析挖掘"><a href="#数据分析挖掘" class="headerlink" title="数据分析挖掘"></a>数据分析挖掘</h4><p>MATLAB</p><p>SPSS</p><p>SAS</p><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>R</p><p>D3.js</p><p>ECharts</p><p>Excle</p><p>Python</p><h4 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h4><p>机器学习基础</p><p>聚类</p><p>时间序列</p><p>推荐系统</p><p>回归分析</p><p>文本挖掘</p><p>决策树</p><p>支持向量机</p><p>贝叶斯分类</p><p>神经网络</p><p>机器学习工具</p><p>Mahout</p><p>Spark Mlib</p><p>TensorFlow (Google 系)</p><p>Amazon Machine Learning</p><p>DMTK (微软分布式机器学习工具)</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>一致性</p><p>paxos</p><p>raft</p><p>gossip</p><p>数据结构</p><p>栈，队列，链表</p><p>散列表</p><p>二叉树，红黑树，B树</p><p>图</p><p>常用算法<br>1.排序</p><p>插入排序</p><p>桶排序</p><p>堆排序</p><p>2.快速排序</p><p>3,最大子数组</p><p>4.最长公共子序列</p><p>5.最小生成树</p><p>最短路径</p><p>6.矩阵的存储和运算</p><h4 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h4><p>云服务</p><p>SaaS</p><p>PaaS</p><p>IaaS</p><p>Openstack</p><p>Docker</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;大数据通用处理平台&quot;&gt;&lt;a href=&quot;#大数据通用处理平台&quot; class=&quot;headerlink&quot; title=&quot;大数据通用处理平台&quot;&gt;&lt;/a&gt;大数据通用处理平台&lt;/h4&gt;&lt;p&gt;Spark&lt;br&gt;Flink&lt;br&gt;Hadoop&lt;/p&gt;
&lt;h4 id=&quot;分布式存储
      
    
    </summary>
    
      <category term="杂七杂八" scheme="https://23yue23.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="职业知识图谱" scheme="https://23yue23.github.io/tags/%E8%81%8C%E4%B8%9A%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
  </entry>
  
  <entry>
    <title>ambari-资料篇</title>
    <link href="https://23yue23.github.io/2019/10/09/ambari-%E8%B5%84%E6%96%99%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/09/ambari-资料篇/</id>
    <published>2019-10-09T09:04:15.000Z</published>
    <updated>2019-12-10T10:21:26.389Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Ambari参考"><a href="#Ambari参考" class="headerlink" title="Ambari参考"></a>Ambari参考</h4><p>Ambari官网: <a href="http://ambari.apache.org/" target="_blank" rel="noopener">http://ambari.apache.org/</a></p><p>Ambari-Github: <a href="https://github.com/apache/ambari/tree/branch-2.7" target="_blank" rel="noopener">https://github.com/apache/ambari/tree/branch-2.7</a></p><p>Ambari参考: <a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-ambari-metrics/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-ambari-metrics/index.html</a></p><p>Ambari官网-2.7.0: <a href="https://docs.hortonworks.com/HDPDocuments/Ambari/Ambari-2.7.0.0/index.html" target="_blank" rel="noopener">https://docs.hortonworks.com/HDPDocuments/Ambari/Ambari-2.7.0.0/index.html</a></p><p>Apache-Ambari-2.6.2 <a href="http://www.apache.org/dyn/closer.cgi/ambari/ambari-2.6.2" target="_blank" rel="noopener">http://www.apache.org/dyn/closer.cgi/ambari/ambari-2.6.2</a></p><p>Apache-Ambari-2.6.2: <a href="https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.6.2" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.6.2</a></p><p>Apache-Ambari-guide: <a href="https://cwiki.apache.org/confluence/display/AMBARI/Ambari" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/AMBARI/Ambari</a></p><p>Apache-Ambari-2.7.0: <a href="https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.7.0" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.7.0</a></p><p>Ambari添加Stack参考：<a href="http://www.itkeyword.com/doc/617736624192567x360" target="_blank" rel="noopener">http://www.itkeyword.com/doc/617736624192567x360</a></p><p>Ambari扩展Stack参考：<a href="https://my.oschina.net/u/2277929/blog/666180?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://my.oschina.net/u/2277929/blog/666180?tdsourcetag=s_pctim_aiomsg</a></p><hr><h4 id="Ambari安装参考"><a href="#Ambari安装参考" class="headerlink" title="Ambari安装参考"></a>Ambari安装参考</h4><blockquote><p>Ambari2.7.0安装: <a href="https://blog.csdn.net/zsj777/article/details/81052859" target="_blank" rel="noopener">https://blog.csdn.net/zsj777/article/details/81052859</a></p></blockquote><h4 id="Ambari学习链接"><a href="#Ambari学习链接" class="headerlink" title="Ambari学习链接"></a>Ambari学习链接</h4><p>Ambari参考教程：<a href="https://www.aliyun.com/jiaocheng/topic_25417_1.html" target="_blank" rel="noopener">https://www.aliyun.com/jiaocheng/topic_25417_1.html</a></p><p>Ambari操作指南：<a href="https://blog.csdn.net/devalone/article/details/80781652" target="_blank" rel="noopener">https://blog.csdn.net/devalone/article/details/80781652</a></p><p>Ambari操作指南：<a href="https://blog.csdn.net/devalone/article/details/80800262" target="_blank" rel="noopener">https://blog.csdn.net/devalone/article/details/80800262</a></p><p>Ambari基础参考：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html</a></p><p>Ambari基础应用：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html</a></p><p>Ambari-Metrics：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-ambari-metrics/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-ambari-metrics/</a></p><p>Ambari-Alerts：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari3/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari3/</a></p><p>Ambari-RoadMap：<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=30755705" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=30755705</a></p><p>Hortonworks链接：<a href="https://hortonworks.com/apache/ambari/" target="_blank" rel="noopener">https://hortonworks.com/apache/ambari/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Ambari参考&quot;&gt;&lt;a href=&quot;#Ambari参考&quot; class=&quot;headerlink&quot; title=&quot;Ambari参考&quot;&gt;&lt;/a&gt;Ambari参考&lt;/h4&gt;&lt;p&gt;Ambari官网: &lt;a href=&quot;http://ambari.apache.org/&quot; 
      
    
    </summary>
    
      <category term="ambari" scheme="https://23yue23.github.io/categories/ambari/"/>
    
    
      <category term="ambari-资料篇" scheme="https://23yue23.github.io/tags/ambari-%E8%B5%84%E6%96%99%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>ambari-学习篇</title>
    <link href="https://23yue23.github.io/2019/10/09/ambari-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/09/ambari-学习篇/</id>
    <published>2019-10-09T09:04:08.000Z</published>
    <updated>2019-10-18T10:32:44.267Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><pre><code>(1).Ambari的作用:就是创建、管理、监视 Hadoop 的集群，这里的Hadoop是广义，指的是Hadoop整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等）Ambari就是为了让Hadoop以及相关的大数据软件更容易使用的一个工具(2).Ambari 自身也是一个分布式架构的软件，主要由两部分组成：Ambari Server 和 Ambari Agent。用户通过 Ambari Server 通知 Ambari Agent 安装对应的软件；Agent 会定时地发送各个机器每个软件模块的状态给 Ambari Server，最终这些状态信息会呈现在 Ambari 的 GUI，方便用户了解到集群的各种状态，并进行相应的维护。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;(1).
Ambari的作用:就是创建、管理、监视 Hadoop 的集群，
这里的Hadoop是广义，指的是Hadoop整个
      
    
    </summary>
    
      <category term="ambari" scheme="https://23yue23.github.io/categories/ambari/"/>
    
    
      <category term="ambari-学习篇" scheme="https://23yue23.github.io/tags/ambari-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>hbase-资料篇</title>
    <link href="https://23yue23.github.io/2019/10/09/hbase-%E8%B5%84%E6%96%99%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/09/hbase-资料篇/</id>
    <published>2019-10-09T08:57:45.000Z</published>
    <updated>2019-10-09T09:08:02.107Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HBase参考文档："><a href="#HBase参考文档：" class="headerlink" title="HBase参考文档："></a>HBase参考文档：</h4><p>HBase官网链接: <a href="https://hbase.apache.org/" target="_blank" rel="noopener">https://hbase.apache.org/</a><br>HBase官方文档: <a href="http://hbase.apache.org/book.html" target="_blank" rel="noopener">http://hbase.apache.org/book.html</a><br>HBase+Spark整合参考: <a href="http://hbase.apache.org/book.html#spark" target="_blank" rel="noopener">http://hbase.apache.org/book.html#spark</a><br>HBase中文文档: <a href="https://www.w3cschool.cn/hbase_doc/" target="_blank" rel="noopener">https://www.w3cschool.cn/hbase_doc/</a><br>HBase教程文档: <a href="https://www.yiibai.com/hbase/" target="_blank" rel="noopener">https://www.yiibai.com/hbase/</a><br>hbase-help：<a href="http://hbase-help.com/" target="_blank" rel="noopener">http://hbase-help.com/</a><br>HBase：<a href="https://pan.baidu.com/s/1jILzgns" target="_blank" rel="noopener">https://pan.baidu.com/s/1jILzgns</a><br>CSDN HBase资料库：<a href="http://lib.csdn.net/hbase/node/734" target="_blank" rel="noopener">http://lib.csdn.net/hbase/node/734</a></p><p>知乎HBase讨论：<a href="https://www.zhihu.com/topic/19600820/hot" target="_blank" rel="noopener">https://www.zhihu.com/topic/19600820/hot</a></p><h4 id="HBase架构参考："><a href="#HBase架构参考：" class="headerlink" title="HBase架构参考："></a>HBase架构参考：</h4><p>深入HBase架构参考: <a href="https://blog.csdn.net/xiaolang85/article/details/70054783" target="_blank" rel="noopener">https://blog.csdn.net/xiaolang85/article/details/70054783</a><br>深入理解HBase架构: <a href="https://blog.csdn.net/Yaokai_AssultMaster/article/details/72877127" target="_blank" rel="noopener">https://blog.csdn.net/Yaokai_AssultMaster/article/details/72877127</a><br>HBase底层存储参考: <a href="http://www.cnblogs.com/bonelee/p/6279248.html" target="_blank" rel="noopener">http://www.cnblogs.com/bonelee/p/6279248.html</a><br>HBase高性能分析: <a href="https://mp.weixin.qq.com/s/VCZz8rG9hIK7IKvbYLz0pQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/VCZz8rG9hIK7IKvbYLz0pQ</a></p><h4 id="HBase-AWS参考："><a href="#HBase-AWS参考：" class="headerlink" title="HBase-AWS参考："></a>HBase-AWS参考：</h4><p>HBase-AWS部署: <a href="https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-hbase.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-hbase.html</a><br>HBase-AWS-S3: <a href="https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-hbase-s3.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-hbase-s3.html</a><br>HBase+Hive参考: <a href="https://aws.amazon.com/cn/blogs/big-data/combine-nosql-and-massively-parallel-analytics-using-apache-hbase-and-apache-hive-on-amazon-emr/" target="_blank" rel="noopener">https://aws.amazon.com/cn/blogs/big-data/combine-nosql-and-massively-parallel-analytics-using-apache-hbase-and-apache-hive-on-amazon-emr/</a></p><h4 id="HBase下载参考："><a href="#HBase下载参考：" class="headerlink" title="HBase下载参考："></a>HBase下载参考：</h4><p>官网版本：<a href="http://archive.apache.org/dist/hbase/" target="_blank" rel="noopener">http://archive.apache.org/dist/hbase/</a></p><p>CDH版本(稳定,推荐)：<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><h4 id="Phoenix参考链接"><a href="#Phoenix参考链接" class="headerlink" title="Phoenix参考链接"></a>Phoenix参考链接</h4><p>Phoenix官网: <a href="http://phoenix.apache.org/" target="_blank" rel="noopener">http://phoenix.apache.org/</a><br>Phoenix下载: <a href="http://apache.fayea.com/phoenix/" target="_blank" rel="noopener">http://apache.fayea.com/phoenix/</a><br>Phoenix下载: <a href="https://archive.apache.org/dist/phoenix/" target="_blank" rel="noopener">https://archive.apache.org/dist/phoenix/</a><br>Phoenix-Github: <a href="https://github.com/apache/phoenix.git" target="_blank" rel="noopener">https://github.com/apache/phoenix.git</a></p><p>Phoenix加载数据：<a href="http://phoenix.apache.org/bulk_dataload.html" target="_blank" rel="noopener">http://phoenix.apache.org/bulk_dataload.html</a><br>Phoenix二级索引: <a href="http://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="noopener">http://phoenix.apache.org/secondary_indexing.html</a><br>Phoenix安装参考: <a href="https://phoenix.apache.org/download.html#Installation" target="_blank" rel="noopener">https://phoenix.apache.org/download.html#Installation</a></p><p>ALI-Phoenix入门: <a href="https://help.aliyun.com/document_detail/53716.html?spm=a2c4g.11186623.4.1.mfLv99" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/53716.html?spm=a2c4g.11186623.4.1.mfLv99</a><br>ALI-HBase指南: <a href="https://help.aliyun.com/document_detail/52209.html?spm=a2c4g.11186623.6.559.YisTAt" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/52209.html?spm=a2c4g.11186623.6.559.YisTAt</a></p><h4 id="HBase-Phoenix参考"><a href="#HBase-Phoenix参考" class="headerlink" title="HBase+Phoenix参考"></a>HBase+Phoenix参考</h4><p>Phoenix入门到精通: <a href="https://yq.aliyun.com/articles/574090?spm=a2c4g.11186623.2.3.CCfNRU" target="_blank" rel="noopener">https://yq.aliyun.com/articles/574090?spm=a2c4g.11186623.2.3.CCfNRU</a><br>Phoenix链接HBase: <a href="https://blog.csdn.net/u010429286/article/details/70054232" target="_blank" rel="noopener">https://blog.csdn.net/u010429286/article/details/70054232</a><br>HBase整合Phoenix01: <a href="https://www.cnblogs.com/ballwql/p/8371234.html" target="_blank" rel="noopener">https://www.cnblogs.com/ballwql/p/8371234.html</a><br>Phoenix命令参考: <a href="https://blog.csdn.net/high2011/article/details/72772462" target="_blank" rel="noopener">https://blog.csdn.net/high2011/article/details/72772462</a></p><h4 id="HBase-Spark整合应用"><a href="#HBase-Spark整合应用" class="headerlink" title="HBase+Spark整合应用"></a>HBase+Spark整合应用</h4><h5 id="Spark访问HBase参考"><a href="#Spark访问HBase参考" class="headerlink" title="Spark访问HBase参考"></a>Spark访问HBase参考</h5><p>Spark访问HBase01: <a href="https://www.cnblogs.com/xing901022/p/8486290.html" target="_blank" rel="noopener">https://www.cnblogs.com/xing901022/p/8486290.html</a></p><p>hortonworks-spark/shc github：<a href="https://github.com/hortonworks-spark/shc" target="_blank" rel="noopener">https://github.com/hortonworks-spark/shc</a><br>maven仓库地址: <a href="http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark</a><br>Hbase spark sql/ dataframe官方文档：<a href="https://hbase.apache.org/book.html#_sparksql_dataframes" target="_blank" rel="noopener">https://hbase.apache.org/book.html#_sparksql_dataframes</a><br>Hbase-spark 2.0.0-alpha4已经公开在maven仓库: <a href="http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark" target="_blank" rel="noopener">http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark</a></p><h5 id="Spark读写HBase参考"><a href="#Spark读写HBase参考" class="headerlink" title="Spark读写HBase参考"></a>Spark读写HBase参考</h5><p>HDP-SHC: <a href="https://github.com/hortonworks-spark/shc" target="_blank" rel="noopener">https://github.com/hortonworks-spark/shc</a></p><p>HBase-Java-API: <a href="https://www.cnblogs.com/liuwei6/p/6842536.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuwei6/p/6842536.html</a><br>HBase-MapReduce: <a href="http://www.cnblogs.com/liuwei6/p/6855467.html" target="_blank" rel="noopener">http://www.cnblogs.com/liuwei6/p/6855467.html</a><br>HBase-Client-API: <a href="https://blog.csdn.net/vori2010/article/details/78536327" target="_blank" rel="noopener">https://blog.csdn.net/vori2010/article/details/78536327</a><br>HBaseClient基本操作: <a href="https://www.cnblogs.com/wzzkaifa/p/7323279.html" target="_blank" rel="noopener">https://www.cnblogs.com/wzzkaifa/p/7323279.html</a></p><p>HBase-Put操作: <a href="https://blog.csdn.net/dongbeiMan/article/details/51768251" target="_blank" rel="noopener">https://blog.csdn.net/dongbeiMan/article/details/51768251</a><br>HBase-Put操作: <a href="https://blog.csdn.net/mianshui1105/article/details/53305966" target="_blank" rel="noopener">https://blog.csdn.net/mianshui1105/article/details/53305966</a></p><p>Spark读写HBase: <a href="https://blog.csdn.net/u011812294/article/details/72553150" target="_blank" rel="noopener">https://blog.csdn.net/u011812294/article/details/72553150</a><br>Spark读写数据库: <a href="https://blog.csdn.net/zilong_zilong/article/details/52529263" target="_blank" rel="noopener">https://blog.csdn.net/zilong_zilong/article/details/52529263</a><br>Spark统计HBase条数: <a href="https://blog.csdn.net/u012871493/article/details/52701289" target="_blank" rel="noopener">https://blog.csdn.net/u012871493/article/details/52701289</a><br>SparkSQL+HBase: <a href="https://hbase.apache.org/book.html#_sparksql_dataframes" target="_blank" rel="noopener">https://hbase.apache.org/book.html#_sparksql_dataframes</a><br>Spark-DataFrame-HBase: <a href="https://www.cnblogs.com/xing901022/p/8486290.html" target="_blank" rel="noopener">https://www.cnblogs.com/xing901022/p/8486290.html</a></p><p>HBase自定义比较器: <a href="http://lucky-xingxing.iteye.com/blog/2185072" target="_blank" rel="noopener">http://lucky-xingxing.iteye.com/blog/2185072</a></p><h5 id="异常参考"><a href="#异常参考" class="headerlink" title="异常参考"></a>异常参考</h5><p>异常参考01: <a href="http://www.aboutyun.com/forum.php?mod=viewthread&amp;action=printable&amp;tid=17450" target="_blank" rel="noopener">http://www.aboutyun.com/forum.php?mod=viewthread&amp;action=printable&amp;tid=17450</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HBase参考文档：&quot;&gt;&lt;a href=&quot;#HBase参考文档：&quot; class=&quot;headerlink&quot; title=&quot;HBase参考文档：&quot;&gt;&lt;/a&gt;HBase参考文档：&lt;/h4&gt;&lt;p&gt;HBase官网链接: &lt;a href=&quot;https://hbase.apac
      
    
    </summary>
    
      <category term="hbase" scheme="https://23yue23.github.io/categories/hbase/"/>
    
    
      <category term="hbase-资料篇" scheme="https://23yue23.github.io/tags/hbase-%E8%B5%84%E6%96%99%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>kudu-资料篇</title>
    <link href="https://23yue23.github.io/2019/10/09/kudu-%E8%B5%84%E6%96%99%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/09/kudu-资料篇/</id>
    <published>2019-10-09T08:40:32.000Z</published>
    <updated>2019-10-09T08:40:50.766Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="kudu" scheme="https://23yue23.github.io/categories/kudu/"/>
    
    
      <category term="kudu-资料篇" scheme="https://23yue23.github.io/tags/kudu-%E8%B5%84%E6%96%99%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>kudu-学习篇</title>
    <link href="https://23yue23.github.io/2019/10/09/kudu-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    <id>https://23yue23.github.io/2019/10/09/kudu-学习篇/</id>
    <published>2019-10-09T08:40:21.000Z</published>
    <updated>2019-10-09T08:45:57.167Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>Kudu是基于Hadoop平台的列式存储系统。</p></blockquote><h4 id="Kudu使用场景"><a href="#Kudu使用场景" class="headerlink" title="Kudu使用场景"></a>Kudu使用场景</h4><blockquote><p>适用于既有随机访问，也有批量数据扫描的复合场景</p></blockquote><blockquote><p>适用于高计算量的场景</p></blockquote><blockquote><p>充分利用高性能存储设备</p></blockquote><blockquote><p>支持数据更新，避免数据反复迁移</p></blockquote><blockquote><p>支持跨地域的实时数据备份和查询</p></blockquote><h4 id="Kudu的优势"><a href="#Kudu的优势" class="headerlink" title="Kudu的优势"></a>Kudu的优势</h4><blockquote><p>支持update和upsert操作</p></blockquote><blockquote><p>结构化数据模型</p></blockquote><blockquote><p>与imapla或spark集成后，可通过sql操作，使用方便</p></blockquote><blockquote><p>一个table由多个tablet组成，对分区查看、扩容和数据高可用支持非常好</p></blockquote><h4 id="性能压测："><a href="#性能压测：" class="headerlink" title="性能压测："></a>性能压测：</h4><h5 id="写入性能测试"><a href="#写入性能测试" class="headerlink" title="写入性能测试"></a>写入性能测试</h5><pre><code> executor-cores=2      num-executors=30    executor-memory=4G</code></pre><p>小时级别写（LZ4 ）：源数据2000W行，38G，耗时1.4min，平均23w条/s。</p><p>小时级别写（ZLIB）：源数据1940W行，34.9G，耗时2min，平均16.2w条/s。</p><h5 id="读取性能测试"><a href="#读取性能测试" class="headerlink" title="读取性能测试"></a>读取性能测试</h5><pre><code> executor-cores=2      num-executors=50    executor-memory=4G</code></pre><p>天级别读（LZ4 ）：源数据2.8亿行，541.7 G，耗时10min，平均46.6w条/s。</p><p>天级别读（ZLIB）：源数据3.2亿行，581.7 G，耗时15min，平均35.7w条/s。</p><h5 id="增加新字段性能测试"><a href="#增加新字段性能测试" class="headerlink" title="增加新字段性能测试"></a>增加新字段性能测试</h5><pre><code> executor-cores=2      num-executors=30    executor-memory=4G</code></pre><p>天级别增加（LZ4 ）：源数据4.74亿行，10个新列，耗时17min，平均46.5w条/s。（先读hive表，再选10列插入kudu中。所以其中包括读837G的text格式hive表全量读的时间，真实插入时间理应更少）</p><p>天级别增加（ZLIB）：源数据3.2亿行，10个新列，耗时12min，平均44.7w条/s。（包括读581G的text格式hive表全量读的时间）</p><h4 id="Kudu接口"><a href="#Kudu接口" class="headerlink" title="Kudu接口"></a>Kudu接口</h4><p>在KuduHandle.scala中封装了spark操作kudu的常用接口，在KuduHandleExample.scala中给出了Kudu接口的使用示例。</p><p>业务开发时可直接使用封装在 train_data_flow的dataflow-sdk中的方法，包括saveDFInsertKuduTable()、saveDFUpsertKuduTable()两种插入数据的方法，和读取kudu表数据的 kudu() 方法，以及addKuduColumns()加列方法。</p><h5 id="接口使用注意事项："><a href="#接口使用注意事项：" class="headerlink" title="接口使用注意事项："></a>接口使用注意事项：</h5><pre><code>1、通过读数据 kudu() 接口返回的df，注册临时视图后可直接用sparkSQL读取，   但必须使用between或者in来指定range分区字段的范围（目前字段是hour_id），   否则会变成全表扫描，效率极低！！！2、kudu引擎暂不支持sparkSQL中 &lt;、&gt;、or 这些谓词下推，支持like，   但仅限于“201907%”这种形式，不支持“201907%02”这种形式；  （只要正确指定了range分区字段，其他字段对读取效率影响不大）3、saveDFInsertKuduTable()用于base特征的小时级入库，会根据小时时间新建range分区，   saveDFUpsertKuduTable()用于插入新列数据，除base数据的小时级入库外，皆用此方法插入数据；4、待插入数据df必须包含所有的主键，且主键不可为空值；5、删除kudu分区会同时删除分区内的数据，慎用。</code></pre><h4 id="Alluxio-FUSE-测试"><a href="#Alluxio-FUSE-测试" class="headerlink" title="Alluxio FUSE 测试"></a>Alluxio FUSE 测试</h4><ol><li>IO基本性能测试，拷贝一个768M的文件。</li></ol><blockquote><p>读    130M/s    90M/s</p></blockquote><blockquote><p>写    80M/s    194M/s</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Kudu是基于Hadoop平台的列式存储系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Kudu使用场
      
    
    </summary>
    
      <category term="kudu" scheme="https://23yue23.github.io/categories/kudu/"/>
    
    
      <category term="kudu-学习篇" scheme="https://23yue23.github.io/tags/kudu-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
</feed>
