<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[指导思想]]></title>
    <url>%2F2019%2F08%2F05%2F%E6%8C%87%E5%AF%BC%E6%80%9D%E6%83%B3%2F</url>
    <content type="text"><![CDATA[学习方法： 3 w 学习 提问的智慧：连接 一万小时定论：一万小时定论]]></content>
  </entry>
  <entry>
    <title><![CDATA[Pulsar-学习篇]]></title>
    <url>%2F2019%2F07%2F17%2FPulsar-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>Pulsar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[广告业务-学习]]></title>
    <url>%2F2019%2F07%2F12%2F%E5%B9%BF%E5%91%8A-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[术语理解1.dsp系统架构 实践 dsp 业务 1.1 美团DSP广告策略实践]]></content>
      <categories>
        <category>广告</category>
      </categories>
      <tags>
        <tag>广告业务学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark-学习篇]]></title>
    <url>%2F2019%2F07%2F12%2Fspark-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[spark Spark on yarn有分为两种模式yarn-cluster和yarn-client spark参数总结 spark 常用算子 Spark on YARN客户端模式作业运行全过程分析 spark batch Spark多文件输出(MultipleOutputFormat) 2.spark-mysql 操作 2.1 Spark读取数据库(Mysql)的四种方式讲解 2.2 Spark与Mysql(JdbcRDD)整合开发 2.3 spark 计算结果写入mysql spark Streaming 官网stream Spark Streaming 实现思路与模块概述 SparkStreaming向Hbase中写数据 Spark Streaming kafka实现数据零丢失的几种方式 Kafka+Spark Streaming+Redis实时系统实践 Spark Streaming中空batches处理的两种方法 spark 调优 spark性能优化：shuffle调优 spark性能调优：开发调优 spark性能调优：资源优化 Saprk Streaming性能调优 GC调优在Spark应用中的实践 JVM的GC调优-上 JVM的GC调优-下 sparkMLib 1.Spark MLlib训练的广告点击率预测模型 案例实践 基于Spark streaming的SQL服务实时自动化运维]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo-实战篇]]></title>
    <url>%2F2019%2F07%2F10%2Fhexo-%E5%AE%9E%E6%88%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[创建新文件 12在当前总目录下hexo new &quot;hexo之基本操作&quot; 清除缓存更新部署1hexo clean &amp;&amp; hexo g -d]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux系列之常用命令总结]]></title>
    <url>%2F2019%2F07%2F10%2Flinux-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Bash 快捷键Ctl-U 删除光标到行首的所有字符,在某些设置下,删除全行Ctl-W 删除当前光标到前边的最近一个空格之间的字符 文件 删除文件： rm -rf log 等加于$ find ./ -name “log” -exec rm {} 搜寻文件或目录: $find ./ -name “core*” | xargs file 查找所有非txt文本: find . ! -name “*.txt” -print 统计文本中123 出现的个数： grep -c “123” filename sort 排序：-n 按数字进行排序 VS -d 按字典序进行排序 -r 逆序排序 -k N 指定按第N列排序 ：sort -n -1k -2k sort -bd data // 忽略像空格之类的前导空白字符 拼接文本 paste file1 file2 系统 12345678910111213141516# uname -a # 查看内核/操作系统/CPU信息# head -n 1 /etc/issue # 查看操作系统版本# cat /proc/cpuinfo # 查看CPU信息# hostname # 查看计算机名# lspci -tv # 列出所有PCI设备# lsusb -tv # 列出所有USB设备# lsmod # 列出加载的内核模块# env # 查看环境变量资源# free -m # 查看内存使用量和交换区使用量# df -h # 查看各分区使用情况# du -sh &lt;目录名&gt; # 查看指定目录的大小# grep MemTotal /proc/meminfo # 查看内存总量# grep MemFree /proc/meminfo # 查看空闲内存量# uptime # 查看系统运行时间、用户数、负载# cat /proc/loadavg # 查看系统负载 磁盘和分区12345# mount | column -t # 查看挂接的分区状态# fdisk -l # 查看所有分区# swapon -s # 查看所有交换分区# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)# dmesg | grep IDE # 查看启动时IDE设备检测状况 网络123456# ifconfig # 查看所有网络接口的属性# iptables -L # 查看防火墙设置# route -n # 查看路由表# netstat -lntp # 查看所有监听端口# netstat -antp # 查看所有已经建立的连接# netstat -s # 查看网络统计信息 进程12# ps -ef # 查看所有进程# top # 实时显示进程状态 用户123456# w # 查看活动用户# id &lt;用户名&gt; # 查看指定用户信息# last # 查看用户登录日志# cut -d: -f1 /etc/passwd # 查看系统所有用户# cut -d: -f1 /etc/group # 查看系统所有组# crontab -l # 查看当前用户的计划任务 服务12# chkconfig --list # 列出所有系统服务# chkconfig --list | grep on # 列出所有启动的系统服务 程序1# rpm -qa # 查看所有安装的软件包 Shell 脚本执行返回状态码：1234567890 命令成功完成1通常的未知错误2误用shell命令126命令无法执行127没有找到命令128无效的退出参数128+x使用Linux信号x的致命错误。130使用Ctrl-C终止的命令255规范外的退出状态 技巧： 1.查看变量是否被声明：123使用 :- 来测试是否一个变量是否被声明过。如：if [ &quot;$&#123;NAME:-&#125;&quot; = &quot;Kevin&quot; ] 如果 $&#123;NAME&#125;变量未声明则会变为空字符，你也可以设置为其他默认值.例如：如果不存在，默认值设为：noname ，if [ &quot;$&#123;NAME:-noname&#125;&quot; = &quot;Kevin” ] 2.自定义shell命令：123vim ~/.bashrc 中设置命令别名:alias lsl=&apos;ls -lrt&apos;alias lm=&apos;ls -al|more’ 3.shell文本格式化代码： 1gg=G vi 快捷建A 移动光标到当前行尾，并进入 insert 状态a 在当前位置后进入 insert 状态dd 删除当前行D 删除光标之后的内容p 粘贴刚删除的文本ctrl+r 搜索历史命令ctrl+X Ctrl+E 调用默认编辑器去编辑一个特别长的命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux系列之端口占有]]></title>
    <url>%2F2019%2F05%2F17%2Flinux-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[lsof1lsof -i:80 netstat1netstat -anp|grep port ip1ip addr flindjournalctl curlcurl]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux-端口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Druid-学习篇]]></title>
    <url>%2F2019%2F05%2F17%2FDruid-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[druid 系列csdn]]></content>
      <tags>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew-使用]]></title>
    <url>%2F2019%2F05%2F17%2FHomebrew-%E4%BD%BF%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[安装路径：/usr/local/Cellar/ 查找软件包 1brew search wget 安装软件包 1brew install wget 列出已安装的软件包 1brew list 删除软件包 1brew remove wget 查看软件包信息 1brew info wget 列出软件包的依赖关系 1brew deps wget 更新brew 1brew update 列出过时的软件包（已安装但不是最新版本） 1brew outdated 更新过时的软件包（全部或指定） 1brew upgrade 或 brew upgrade wget]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Homebrew-使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码库-邮件发送]]></title>
    <url>%2F2019%2F05%2F06%2F%E4%BB%A3%E7%A0%81%E5%BA%93-%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%2F</url>
    <content type="text"><![CDATA[scala 版本示例：123456789101112131415161718192021222324252627282930313233343536373839import org.slf4j.LoggerFactoryimport javax.mail._import javax.mail.internet.InternetAddressimport javax.mail.internet.MimeMessageimport java.util.Propertiesobject Mail &#123; val logger = LoggerFactory.getLogger(Mail.getClass) val bodyHtml = &quot;&lt;!DOCTYPE html PUBLIC -//W3C//DTD HTML 4.01 Transitional//ENhttp://www.w3.org/TR/html4/loose.dtd&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type content=text/html; charset=utf-8 pageEncoding=UTF-8&gt;&lt;/head&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;&quot; val prop = new Properties() prop.put(&quot;mail.smtp.host&quot;,&quot;smtp.exmail.qq.com&quot;) prop.put(&quot;mail.smtp.auth&quot;,&quot;true&quot;) prop.put(&quot;mail.smtp.connectiontimeout&quot;,&quot;10000&quot;) prop.put(&quot;mail.smtp.timeout&quot;,&quot;20000&quot;) def send(address: String, title: String, content: String) &#123; try &#123; val addresses = address.split(&quot;,&quot;).map(new InternetAddress(_).asInstanceOf[Address]) val authenticator = new SMTPAuthenticator(&quot;username@qq.com&quot;, &quot;password&quot;) val sendMailSession = Session.getDefaultInstance(prop, authenticator) val newMessage = new MimeMessage(sendMailSession) newMessage.setFrom(new InternetAddress(&quot;username@qq.com&quot;)) newMessage.setRecipients(Message.RecipientType.TO, addresses) newMessage.setSubject(title) val html = String.format(bodyHtml, content) newMessage.setContent(html, &quot;text/html;charset=utf-8&quot;) Transport.send(newMessage) logger.info(&quot;send an email to address[&#123;&#125;] title[&#123;&#125;] content[&#123;&#125;]&quot;, addresses, title, content); &#125; catch &#123; case e: MessagingException =&gt; logger.info(&quot;error occur when mail&quot;, e) &#125; &#125; class SMTPAuthenticator(username: String, password: String) extends Authenticator &#123; override def getPasswordAuthentication: PasswordAuthentication = new PasswordAuthentication(username, password) &#125;&#125;]]></content>
      <categories>
        <category>代码库</category>
      </categories>
      <tags>
        <tag>代码库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark系列之-问题汇总]]></title>
    <url>%2F2019%2F04%2F29%2Fspark%E7%B3%BB%E5%88%97%E4%B9%8B-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[org.apache.spark.SparkException: Could not find CoarseGrainedScheduler. 这个可能是一个资源问题，应该给任务分配更多的 cores 和Executors，并且分配更多的内存。并且需要给RDD分配更多的分区 在配置资源中加入这句话也许能解决你的问题： –conf spark.dynamicAllocation.enabled=false 经过一般调试，发现原来是因为spark任务生成task任务过少，而任务提交时所指定的Excutor 数过多导致，故调小 –num-executors 参数问题得以解决。 #####]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark-问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS-使用篇]]></title>
    <url>%2F2019%2F04%2F29%2FMacOS-%E4%BD%BF%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[快捷键：退出关闭应用：Command+Q 目录地址： 软件的安装目录 1~/Library/Application Support brew 安装路径 /usr/local/Cellar/ 软件 Mac Beyond Compare4 破解方法 []]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac-使用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典文章]]></title>
    <url>%2F2019%2F04%2F29%2F%E7%BB%8F%E5%85%B8%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[技术文章 MySQL索引原理及慢查询优化 美团点评基于 Flink 的实时数仓建设实践 从零开始入门推荐算法工程师 计算广告与流处理技术综述 其他 工作中如何做好技术积累 学习新技术的10个技巧]]></content>
      <categories>
        <category>经典文章</category>
      </categories>
      <tags>
        <tag>经典文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark-调优篇]]></title>
    <url>%2F2019%2F04%2F28%2Fspark-%E8%B0%83%E4%BC%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[性能调优分配资源：123456789101112131415161718192021222324252627spark-submit \--class cn.spark.sparktest.core.WordCountCluster \--num-executors 80 \ 配置executor的数量--driver-memory 6g \ 配置driver的内存（影响不大）--executor-memory 6g \ 配置每个executor的内存大小--executor-cores 3 \ 配置每个executor的cpu core数量(RDD cache/shuffle/task执行)--master yarn-cluster \--queue root.default \--conf spark.yarn.executor.memoryOverhead=2048 \ executor堆外内存--conf spark.core.connection.ack.wait.timeout=300 \ 连接的超时时长/usr/local/spark/spark.jar \$&#123;1&#125;spark-submit \ --master yarn \ --deploy-mode cluster \ --executor-cores 3 \ --executor-memory 10G \ --driver-memory 4G \ --conf spark.dynamicAllocation.enabled=true \ --conf spark.shuffle.service.enabled=true \ --conf spark.dynamicAllocation.initialExecutors=5 \ --conf spark.dynamicAllocation.maxExecutors=40 \ --conf spark.dynamicAllocation.minExecutors=0 \ --conf spark.dynamicAllocation.executorIdleTimeout=30s \ --conf spark.dynamicAllocation.schedulerBacklogTimeout=10s \ SparkStreaming 优雅退出 12345678910111213 public static void main(String[] args) throws Exception&#123; Logger.getLogger(&quot;org&quot;).setLevel(Level.ERROR);//String checkpointPath = PropertiesUtil.getProperty(&quot;streaming.checkpoint.path&quot;); JavaStreamingContext javaStreamingContext = JavaStreamingContext.getOrCreate(&quot;hdfs://Master:9000/streaming_checkpoint&quot;, createContext()); javaStreamingContext.start(); 每隔20秒钟监控是否有停止指令,如果有则优雅退出streaming final Properties serverProps = PropertiesUtil.properties; Thread thread = new Thread(new MonitorStopThread(javaStreamingContext,serverProps)); thread.start(); javaStreamingContext.awaitTermination(); &#125; &#125; 调节并行度： 并行度：其实就是指的是，Spark作业中，各个stage的task数量，也就代表了Spark作业的在各个阶段（stage）的并行度。 官方是推荐，task数量，设置成spark application总cpu core数量的2~3倍，比如150个cpu core，基本要设置task数量为300~500； SparkConf conf = new SparkConf().set(“spark.default.parallelism”, “500”) InputDStream并行化数据接收 创建多个InputDStream来接收同一数据源,把多个topic数据细化为单一的kafkaStream来接收 创建kafkaStream 1234567891011121314151617181920Map&lt;String, String&gt; kafkaParams = new HashMap&lt;String, String&gt;(); kafkaParams.put(&quot;metadata.broker.list&quot;, &quot;192.168.1.164:9092,192.168.1.165:9092,192.168.1.166:9092&quot;); kafkaParams.put(&quot;zookeeper.connect&quot;,&quot;master:2181,data1:2181,data2:2181&quot;); 构建topic set String kafkaTopics = ConfigurationManager.getProperty(Constants.KAFKA_TOPICS); String[] kafkaTopicsSplited = kafkaTopics.split(&quot;,&quot;); Set&lt;String&gt; topics = new HashSet&lt;String&gt;(); for(String kafkaTopic : kafkaTopicsSplited) &#123; topics.add(kafkaTopic); JavaPairInputDStream&lt;String, String&gt; kafkaStream = KafkaUtils.createDirectStream( jssc, String.class, String.class, StringDecoder.class, StringDecoder.class, kafkaParams, topics); InputDStream并行化数据接收 12345678 int numStreams = 5; List&lt;JavaPairDStream&lt;String, String&gt;&gt; kafkaStreams = new ArrayList&lt;JavaPairDStream&lt;String,String&gt;&gt;(numStreams); for (int i = 0; i &lt; numStreams; i++) &#123; kafkaStreams.add(KafkaUtils.createStream(...)); &#125; JavaPairDStream&lt;String, String&gt; unifiedStream = streamingContext.union(kafkaStreams.get(0), kafkaStreams.subList(1, kafkaStreams.size()));unifiedStream.print(); 增加block数量，增加每个batch rdd的partition数量，增加处理并行度12345第一步：receiver从数据源源源不断地获取到数据，首先是会按照block interval，将指定时间间隔的数据，收集为一个block；默认时间是200ms，官方推荐不要小于50ms；第二步：根据指定batch interval时间间隔合并为一个batch，创建为一个rdd，第三步：启动一个job，去处理这个batch rdd中的数据。第四步：batch rdd 的partition数量是多少呢？一个batch有多少个block，就有多少个partition；就意味着并行度是多少；就意味着每个batch rdd有多少个task会并行计算和处理。调优：如果希望可以比默认的task数量和并行度再多一些，可以手动调节blockinterval，减少block interval。每个batch可以包含更多的block。因此也就有更多的partition，因此就会有更多的task并行处理每个batch rdd。 重分区，增加每个batch rdd的partition数量inputStream.repartition()：重分区，增加每个batch rdd的partition数量对dstream中的rdd进行重分区为指定数量的分区，就可以提高指定dstream的rdd的计算并行度调节并行度 重构RDD架构以及RDD持久化： RDD架构重构与优化 公共RDD一定要实现持久化,对于要多次计算和使用的公共RDD，一定要进行持久化。 持久化，是可以进行序列化的sessionid2actionRDD=sessionid2actionRDD.persist(StorageLevel.MEMORY_ONLY());1234MEMORY_ONLY 直接以Java对象的形式存储于JVM的内存中MYMORY_AND_DISK 存储于JVM的内存+磁盘MEMORY_ONLY_SER 序列化存储于内存中MEMORY_AND_DISK_SER 序列化存储于内存+磁盘 为了数据的高可靠性，而且内存充足，可以使用双副本机制，进行持久化 实现RDD高可用性：启动WAL预写日志机制 spark streaming，从原理上来说，是通过receiver来进行数据接收的；接收到的数据，会被划分成一个一个的block；block会被组合成一个batch；针对一个batch，会创建一个rdd；receiver接收到数据后，就会立即将数据写入一份到容错文件系统（比如hdfs）上的checkpoint目录中的，另一份写入到磁盘文件中去；作为数据的冗余副本。无论你的程序怎么挂掉，或者是数据丢失，那么数据都不肯能会永久性的丢失；因为肯定有副本。 123456789SparkConf conf = new SparkConf() .setMaster(&quot;local[2]&quot;) .setAppName(&quot;StreamingSpark&quot;); .set(&quot;spark.serializer&quot;,&quot;org.apache.spark.serializer.KryoSerializer&quot;); .set(&quot;spark.default.parallelism&quot;, &quot;1000&quot;); .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;); .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); JavaStreamingContext jssc = new JavaStreamingContext(conf,Durations.seconds(5)); jssc.checkpoint(&quot;hdfs://192.168.1.164:9000/checkpoint&quot;); 广播大变量（1m~100m）： 默认的情况下，task执行的算子中，使用了外部的变量，每个task都会获取一份变量的副本，有什么缺点呢？网络传输的开销、耗费内存、RDD持久化到内存（内存不够，持续到磁盘）、task创建对象导致gc； 广播变量，初始的时候，就在Drvier上有一份副本。 12345task在运行的时候，想要使用广播变量中的数据，此时首先会在自己本地的Executor对应的BlockManager中，尝试获取变量副本；如果本地没有，那么就从Driver远程拉取变量副本，并保存在本地的BlockManager中；此后这个executor上的task，都会直接使用本地的BlockManager中的副本。executor的BlockManager除了从driver上拉取，也可能从其他节点的BlockManager上拉取变量副本，举例越近越好。sc.boradcast(); 使用Kryo序列化: 默认情况下，Spark内部是使用Java的序列化机制，ObjectOutputStream / ObjectInputStream，对象输入输出流机制，来进行序列化。 Spark支持使用Kryo序列化机制。Kryo序列化机制，比默认的Java序列化机制，速度要快，序列化后的数据要更小，大概是Java序列化机制的1/10。 Kryo序列化机制，一旦启用以后，会生效的几个地方：123456781、算子函数中使用到的外部变量2、持久化RDD时进行序列化，StorageLevel.MEMORY_ONLY_SER3、shuffle .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.default.parallelism&quot;, &quot;1000&quot;);.set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;); .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); .registerKryoClasses(new Class[]&#123;CategorySortKey.class&#125;) 序列化12、注册你使用到的，需要通过Kryo序列化的，一些自定义类，SparkConf.registerKryoClasses() 使用fastutil优化数据格式: fastutil是扩展了Java标准集合框架（Map、List、Set；HashMap、ArrayList、HashSet）的类库，提供了特殊类型的map、set、list和queue； fastutil能够提供更小的内存占用，更快的存取速度；我们使用fastutil提供的集合类，来替代自己平时使用的JDK的原生的Map、List、Set，好处在于，fastutil集合类，可以减小内存的占用，并且在进行集合的遍历、根据索引（或者key）获取元素的值和设置元素的值的时候，提供更快的存取速度； fastutil也提供了64位的array、set和list，以及高性能快速的，以及实用的IO类，来处理二进制和文本类型的文件；fastutil最新版本要求Java 7以及以上版本； fastutil的每一种集合类型，都实现了对应的Java中的标准接口（比如fastutil的map，实现了Java的Map接口），因此可以直接放入已有系统的任何代码中。 fastutil还提供了一些JDK标准类库中没有的额外功能（比如双向迭代器）。fastutil除了对象和原始类型为元素的集合，fastutil也提供引用类型的支持，但是对引用类型是使用等于号（=）进行比较的，而不是equals()方法。 maven 依赖12345&lt;dependency&gt; &lt;groupId&gt;fastutil&lt;/groupId&gt; &lt;artifactId&gt;fastutil&lt;/artifactId&gt; &lt;version&gt;5.0.9&lt;/version&gt;&lt;/dependency&gt; 调节数据本地化等待时长： PROCESS_LOCAL：进程本地化；NODE_LOCAL：节点本地化；NO_PREF：对于task来说，没有好坏之分；RACK_LOCAL：机架本地化；ANY：数据和task可能在集群中的任何地方，而且不在一个机架中，性能最差； 观察日志，spark作业的运行日志，推荐大家在测试的时候，先用client模式，在本地就直接可以看到比较全的日志。日志里面会显示，starting task。。。，PROCESS LOCAL（不用调节）、NODE LOCAL、ANY（调节一下数据本地化的等待时长），反复调节，每次调节完以后，再来运行，观察日志 怎么调节？1234567spark.locality.wait，默认是3s；6s，10s默认情况下，下面3个的等待时长，都是跟上面那个是一样的，都是3sspark.locality.wait.processspark.locality.wait.nodespark.locality.wait.racknew SparkConf() .set(&quot;spark.locality.wait&quot;, &quot;10&quot;) 定时清除不需要的数据 通过配置spark.cleaner.ttl为一个合理的值，但是这个值不能过小，因为如果后面计算需要用的数据被清除会带来不必要的麻烦。 另外通过配置spark.streaming.unpersist为true(默认就是true)来更智能地去持久化（unpersist）RDD。这个配置使系统找出那些不需要经常保有的RDD，然后去持久化它们。这可以减少Spark RDD的内存使用，也可能改善垃圾回收的行为。 去除压缩 (内存充足的情况下)在内存充足的情况下，可以设置spark.rdd.compress 设置为false. Yarn 优化Executors和cpu核心数设置和Spark On Yarn 动态资源分配 首先需要对YARN的NodeManager进行配置，使其支持Spark的Shuffle Service。 1234567891011121314#修改&lt;property&gt;&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;&lt;value&gt;mapreduce_shuffle,spark_shuffle&lt;/value&gt;&lt;/property&gt;#增加&lt;property&gt;&lt;name&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;/name&gt;&lt;value&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;spark.shuffle.service.port&lt;/name&gt;&lt;value&gt;7337&lt;/value&gt;&lt;/property&gt; 将spark中对应jar包拷贝到hadoop的目录下： 123首先找到spark版本的spark-&lt;version&gt;-yarn-shuffle.jarshuffle包，并将该包放到集群所有NodeManager的classpath下，比如放到HADOOP_HOME/share/hadoop/yarn/lib JVM 调优原理概述以及降低cache操作的内存占比: full gc / minor gc，无论是快，还是慢，都会导致jvm的工作线程停止工作，stop the world。简而言之，就是说，gc的时候，spark停止工作了。等着垃圾回收结束。 spark中，堆内存又被划分成了两块儿，存储内存和执行内存；一句话，让task执行算子函数时，有更多的内存可以使用。 GC优化策略(暂时不确定)建议用并行Mark-Sweep垃圾回收机制，虽然它消耗更多的资源，但是我们还是建议开启。在spark-submit中使用–driver-java-options “-XX:+UseConcMarkSweepGC”–conf “spark.executor.extraJavaOptions=-XX:+UseConcMarkSweepGC” 调节executor堆外内存与连接等待时长(在spark-sbmit中修改)： 有时候，如果你的spark作业处理的数据量特别特别大，几亿数据量；然后spark作业一运行，时不时的报错，shuffle file cannot find，executor、task lost，out of memory（内存溢出）；–conf spark.yarn.executor.memoryOverhead=2048 有时候，无法建立网络连接；会卡住；ok，spark默认的网络连接的超时时长，是60s；如果卡住60s都无法建立连接的话，那么就宣告失败了:一串file id。uuid（dsfsfd-2342vs–sdf–sdfsd）。not found。file lost。 –conf spark.core.connection.ack.wait.timeout=300 Shuffle调优原理概述： 在spark中，主要是以下几个算子：groupByKey、reduceByKey、countByKey、join，等等。 shuffle，一定是分为两个stage来完成的。因为这其实是个逆向的过程，不是stage决定shuffle，是shuffle决定stage。 shuffle前半部分的task在写入数据到磁盘文件之前，都会先写入一个一个的内存缓冲，内存缓冲满溢之后，再spill溢写到磁盘文件中。 合并map端输出文件： 开启shuffle map端输出文件合并的机制；默认情况下，是不开启的，就是会发生如上所述的大量map端输出文件的操作，严重影响性能。 new SparkConf().set(“spark.shuffle.consolidateFiles”, “true”)new SparkConf().set(“spark.shuffle.consolidateFiles”, “true”) 合并map端输出文件： map端内存缓冲：spark.shuffle.file.buffer，默认32k reduce端内存占比：spark.shuffle.memoryFraction，0.2 调节的时候的原则。spark.shuffle.file.buffer，每次扩大一倍，然后看看效果，64，128；spark.shuffle.memoryFraction，每次提高0.1，看看效果。不能调节的太大，太大了以后过犹不及，因为内存资源是有限的，你这里调节的太大了，其他环节的内存使用就会有问题了。12new SparkConf().set(&quot;spark.shuffle.file.buffer&quot;, &quot;64&quot;)new SparkConf().set(&quot;spark.shuffle.memoryFraction&quot;, &quot;0.3&quot;) HashShuffleManager与SortShuffleManager spark.shuffle.manager：hash、sort、tungsten-sort（自己实现内存管理），spark 1.2.x版本以后，默认的shuffle manager，是SortShuffleManager。 spark.shuffle.sort.bypassMergeThreshold：200（默认值为200） SortShuffleManager会避免像HashShuffleManager那样，默认就去创建多份磁盘文件。一个task，只会写入一个磁盘文件，不同reduce task的数据，用offset来划分界定。12new SparkConf().set(&quot;spark.shuffle.manager&quot;, &quot;sort&quot;)new SparkConf().set(&quot;spark.shuffle.sort.bypassMergeThreshold&quot;, &quot;550&quot;) 算子调优MapPartitions提升Map类操作性能: 如果是普通的map，比如一个partition中有1万条数据；function要执行和计算1万次。但是，使用MapPartitions操作之后，一个task仅仅会执行一次function，function一次接收所有的partition数据。只要执行一次就可以了，性能比较高。 但是，可能就OOM，内存溢出。 filter过后使用coalesce减少分区数量： 就会导致有些task运行的速度很快；有些task运行的速度很慢。这就是数据倾斜。 coalesce算子：主要就是用于在filter操作之后，针对每个partition的数据量各不相同的情况，来压缩partition的数量。减少partition的数量，而且让每个partition的数据量都尽量均匀紧凑。 foreachPartition优化写数据库性能：&gt; 1. 用了foreachPartition算子之后，好处在哪里？ 1、对于我们写的function函数，就调用一次，一次传入一个partition所有数据； 2、主要创建或者获取一个数据库连接就可以； 3、只要向数据库发送一次SQL语句和多组参数即可； &gt; 2. 很有可能会发生OOM，内存溢出的问题。 一个partition大概是1千条左右用foreach，跟用foreachPartition，性能的提升达到了2~3分钟。 repartition解决Spark SQL低并行度的性能问题：repartition算子，你用Spark SQL这一步的并行度和task数量，肯定是没有办法去改变了。但是呢，可以将你用Spark SQL查询出来的RDD，使用repartition算子，去重新进行分区，此时可以分区成多个partition，比如从20个partition，分区成100个。 reduceByKey本地聚合介绍：reduceByKey，相较于普通的shuffle操作（比如groupByKey），它的一个特点，就是说，会进行map端的本地聚合 代码 调优进行HA机制处理-针对Driver高可用性 在创建和启动StreamingContext的时候，将元数据写入容错的文件系统（比如hdfs）。保证在driver挂掉之后，spark集群可以自己将driver重新启动起来；而且driver在启动的时候，不会重新创建一个streaming context，而是从容错文件系统（比如hdfs）中读取之前的元数据信息，包括job的执行进度，继续接着之前的进度，继续执行。使用这种机制，就必须使用cluster模式提交，确保driver运行在某个worker上面； 123456789101112 JavaStreamingContextFactory contextFactory = new JavaStreamingContextFactory() &#123; @Override public JavaStreamingContext create() &#123; JavaStreamingContext jssc = new JavaStreamingContext(...); JavaDStream&lt;String&gt; lines = jssc.socketTextStream(...); jssc.checkpoint(checkpointDirectory); return jssc; &#125; &#125;;JavaStreamingContext context = JavaStreamingContext.getOrCreate(checkpointDirectory, contextFactory);context.start();context.awaitTermination(); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115JavaStreamingContext.getOrCreate 基于Function0&lt; JavaStreamingContext &gt; 进行Driver高可用 Function0&lt;JavaStreamingContext&gt; createContextFunc = new Function0&lt;JavaStreamingContext&gt;()&#123; @Override public JavaStreamingContext call() throws Exception &#123; conf = new SparkConf() .setMaster(&quot;local[4]&quot;) .setAppName(&quot;java/RealTimeStreaming&quot;) .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.default.parallelism&quot;, &quot;10&quot;) .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;) .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); Map&lt;String, Object&gt; kafkaParams = new HashMap&lt;&gt;(); kafkaParams.put(&quot;bootstrap.servers&quot;, &quot;Master:9092,Worker1:9092,Worker2:9092&quot;); kafkaParams.put(&quot;key.deserializer&quot;, StringDeserializer.class); kafkaParams.put(&quot;value.deserializer&quot;, StringDeserializer.class); kafkaParams.put(&quot;group.id&quot;, &quot;TestGroup&quot;); kafkaParams.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;); kafkaParams.put(&quot;enable.auto.commit&quot;,true); JavaStreamingContext jssc = new JavaStreamingContext( conf, Durations.seconds(30)); jssc.checkpoint(&quot;hdfs://Master:9000/checkpoint&quot;); // 构建topic set String kafkaTopics = ConfigurationManager.getProperty(Constants.KAFKA_TOPICS); String[] kafkaTopicsSplited = kafkaTopics.split(&quot;,&quot;); Set&lt;String&gt; topics = new HashSet&lt;String&gt;(); for(String kafkaTopic : kafkaTopicsSplited) &#123; topics.add(kafkaTopic); &#125; JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; adRealTimeLogDStream = KafkaUtils.createDirectStream(jssc, LocationStrategies.PreferConsistent(), ConsumerStrategies.Subscribe(topics, kafkaParams)); hostMap = adRealTimeLogDStream.mapToPair(record -&gt; new Tuple2&lt;String, String&gt;(record.key(), record.value())); logPeakDstream = hostMap.mapToPair(new PairFunction&lt;Tuple2&lt;String, String&gt;, String, Long&gt;() &#123; @Override public Tuple2&lt;String,Long&gt; call(Tuple2&lt;String, String&gt; tuple) throws Exception &#123; String log = tuple._2; String[] logSplited = log.split(&quot;\\|&quot;); String eventTime= logSplited[1]; String todayDate = DATE_FORMAT.format(new Date()).trim(); String cutTime= eventTime.substring(13,eventTime.length()-7); String ip = logSplited[0].trim(); String host = logSplited[14].trim(); return new Tuple2&lt;String, Long&gt;(host+&quot;-&quot;+ip, 1L); &#125; &#125;); hostReduce = logPeakDstream.reduceByKeyAndWindow(new Function2&lt;Long, Long, Long&gt;() &#123; @Override public Long call(Long v1, Long v2) throws Exception &#123; return v1 + v2; &#125; &#125;, Durations.minutes(10),Durations.seconds(30)); JavaPairDStream&lt;String, Long&gt; topNPairRdd = hostReduce.transformToPair(new Function&lt;JavaPairRDD&lt;String, Long&gt;, JavaPairRDD&lt;String, Long&gt;&gt;() &#123; @Override public JavaPairRDD&lt;String, Long&gt; call(JavaPairRDD&lt;String, Long&gt; rdd) throws Exception &#123; JavaPairRDD&lt;Long, String&gt; sortRDD = (JavaPairRDD&lt;Long, String&gt;) rdd.mapToPair(record -&gt; new Tuple2&lt;Long, String&gt;(record._2, record._1)); JavaPairRDD&lt;String, Long&gt; sortedRdd = (JavaPairRDD&lt;String, Long&gt;) sortRDD.sortByKey(false).mapToPair(record -&gt; new Tuple2&lt;String, Long&gt;(record._2, record._1)); List&lt;Tuple2&lt;String, Long&gt;&gt; topNs = sortedRdd.take(5);//取前5个输出 System.out.println(&quot; &quot;); System.out.println(&quot;*****************峰值访问窗统计*******************&quot;); for (Tuple2&lt;String, Long&gt; topN : topNs) &#123; System.out.println(topN); &#125; System.out.println(&quot;**********************END***********************&quot;); System.out.println(&quot; &quot;); return sortedRdd; &#125; &#125;); topNPairRdd.foreachRDD(new VoidFunction&lt;JavaPairRDD&lt;String, Long&gt;&gt;() &#123; @Override public void call(JavaPairRDD&lt;String, Long&gt; rdd) throws Exception &#123; &#125; &#125;); logDetailDstream = hostMap.map(new Function&lt;Tuple2&lt;String,String&gt;, String&gt;() &#123; @Override public String call(Tuple2&lt;String, String&gt; tuple) throws Exception &#123; String log = tuple._2; String[] logSplited = log.split(&quot;\\|&quot;); String eventTime= logSplited[1]; String todayDate = DATE_FORMAT.format(new Date()).trim(); String cutTime= eventTime.substring(13,eventTime.length()-7); String[] urlDetails = logSplited[7].split(&quot;/&quot;); String ip = logSplited[0].trim(); String url =&quot;&quot;; if(urlDetails.length==4)&#123; url = urlDetails[3]; &#125;else if(urlDetails.length==5)&#123; url = urlDetails[3] + &quot;/&quot; + urlDetails[4]; &#125;else if(urlDetails.length&gt;=6)&#123; url = urlDetails[3] + &quot;/&quot; + urlDetails[4]+ &quot;/&quot; + urlDetails[5]; &#125; String host = logSplited[14].trim(); String dataTime =todayDate +&quot; &quot;+ cutTime; String bytesSent = logSplited[5].trim(); return dataTime+&quot; &quot;+host+&quot; &quot;+ip+&quot; &quot;+url+&quot; &quot;+bytesSent; &#125; &#125;); //logDetailDstream.print(); return jssc; &#125; &#125;; return createContextFunc; 12345提交方式 spark-submit --deploy-mode cluster --supervise SparkStreaming 与kafka整合调优 LocationStrategies 位置策略：123The new Kafka consumer API will pre-fetch messages into buffers. Therefore it is important for performance reasons that the Spark integration keep cached consumers on executors (rather than recreating them for each batch), and prefer to schedule partitions on the host locations that have the appropriate consumers. 新的Kafka消费者API可以预获取消息缓存到缓冲区，因此Spark整合Kafka让消费者在executor上进行缓存对性能是非常有助的，可以调度消费者所在主机位置的分区。 12345In most cases, you should use LocationStrategies.PreferConsistent as shown above. This will distribute partitions evenly across available executors. If your executors are on the same hosts as your Kafka brokers, use PreferBrokers,which will prefer to schedule partitions on the Kafka leader for that partition. Finally, if you have a significant skew in load among partitions, use PreferFixed. This allows you to specify an explicit mapping of partitions to hosts (any unspecified partitions will use a consistent location). 通常，你可以使用 LocationStrategies.PreferConsistent，这个策略会将分区分布到所有可获得的executor上。如果你的executor和kafkabroker在同一主机上的话，可以使用PreferBrokers，这样kafka leader会为此分区进行调度。最后，如果你加载数据有倾斜的话可以使用PreferFixed，这将允许你制定一个分区和主机的映射（没有指定的分区将使用PreferConsistent 策略） 123The cache for consumers has a default maximum size of 64. If you expect to be handling more than (64 * number of executors) Kafka partitions, you can change this settingvia spark.streaming.kafka.consumer.cache.maxCapacity 消费者默认缓存大小是64，如果你期望处理较大的Kafka分区的话，你可以使用 12spark.streaming.kafka.consumer.cache.maxCapacity设置大小。The cache is keyed by topicpartition and group.id, so use a separate group.id for each call to createDirectStream. 缓存是使用key为topic partition 和组id的，因此对于每一次调用 createDirectStream 可以使用不同的 group . id 123456789101112131415161718public static SparkConf conf = new SparkConf() .setMaster(&quot;local[4]&quot;) .setAppName(&quot;java/RealTimeStreaming&quot;) .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.default.parallelism&quot;, &quot;10&quot;) .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;) .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;);Map&lt;String, Object&gt; kafkaParams = new HashMap&lt;&gt;();kafkaParams.put(&quot;bootstrap.servers&quot;, &quot;Master:9092,Worker1:9092,Worker2:9092&quot;);kafkaParams.put(&quot;key.deserializer&quot;, StringDeserializer.class);kafkaParams.put(&quot;value.deserializer&quot;, StringDeserializer.class);kafkaParams.put(&quot;group.id&quot;, &quot;TestGroup&quot;);kafkaParams.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;);kafkaParams.put(&quot;enable.auto.commit&quot;,true);JavaStreamingContext jssc = new JavaStreamingContext( conf, Durations.seconds(30));jssc.checkpoint(&quot;hdfs://Master:9000/checkpoint&quot;); 构建topic set 12345678910String kafkaTopics = ConfigurationManager.getProperty(Constants.KAFKA_TOPICS);String[] kafkaTopicsSplited = kafkaTopics.split(&quot;,&quot;);Set&lt;String&gt; topics = new HashSet&lt;String&gt;();for(String kafkaTopic : kafkaTopicsSplited) &#123; topics.add(kafkaTopic); &#125; JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; adRealTimeLogDStream = KafkaUtils.createDirectStream(jssc, LocationStrategies.PreferConsistent(), ConsumerStrategies.Subscribe(topics, kafkaParams));]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark-调优</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grafana-学习篇]]></title>
    <url>%2F2019%2F04%2F28%2Fgrafana-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[参考地址： 官网 官网视频 安装插件 插件安装步骤 插件搜索]]></content>
      <categories>
        <category>grafana</category>
      </categories>
      <tags>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markDown-使用]]></title>
    <url>%2F2019%2F04%2F25%2FmarkDown-%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[标签123456# h1 最大## h2### h3#### h4##### h5###### h6 最小 段落及区块引用1&gt; 插入链接和图片1234链接 []()[点击跳转至百度](http://www.baidu.com)图片 ![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&amp;h=703&amp;f=jpeg&amp;s=56927) 列表1234567891011* | + | - 是无序列表1. 数字点加空格 是有序列表列表中加入了区块引用，区域引用标记符也需要缩进4个空格上一级和下一级之间敲三个空格即可示例：* 段落一 &gt; 区块标记一 &gt;&gt;区块标记二* 段落二 &gt; 区块标记二 分割线1*** 强调1234*这里是斜体***这里是加粗*****这里是斜线加粗***～～这里是删除线～～ 代码块12单行代码：单反引号包裹代码块：三个反引号包裹。 表格12345678910表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二注意：第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[启程]]></title>
    <url>%2F2019%2F04%2F24%2F%E5%90%AF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
</search>
