<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[flink-优化篇]]></title>
    <url>%2F2019%2F12%2F17%2Fflink-%E4%BC%98%E5%8C%96%E7%AF%87%2F</url>
    <content type="text"><![CDATA[flink 的容错层面flink 的异步访问状态数据压缩使用flink 配置层面1.程序内部接收外部传参（配置常变的参数）//解析参数 val parameters = ParameterTool.fromArgs(args) //将参数设置到job 的全局参数中 env.getConfig.setGlobalJobParameters(parameters) //register the parameters globally // 获取方式： 外部的参数名 val parallelisms = parameters.getRequired(&quot;parallelisms&quot;).toInt ###在继承富函数后 open中初始化查询 val params: ParameterTool = getRuntimeContext.getExecutionConfig.getGlobalJobParameters.asInstanceOf[ParameterTool] val restore = params.get(&quot;restoreFlag&quot;).trim 2.加载内部配置文件 （配置固定不变的参数） def loadConfig(): Properties = { val p = new Properties() val in = this.getClass.getClassLoader.getResourceAsStream(&quot;config.properties&quot;) p.load(in) in.close() p }3.checkpoint 优化设置//设置checkpoint 快照时间为5分钟 env.enableCheckpointing(300000l) //设置的是事件的处理时间 .setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime) /** *设置checkpoint 取消时清理和保留机制： * 1.DELETE_ON_CANCELLATION 工作取消时删除checkpoint 做的检查点。 * 2.RETAIN_ON_CANCELLATION 工作取消时保留checkpoint 做的检查点 */ env.getCheckpointConfig.enableExternalizedCheckpoints(ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION) // 设置两个检查点之间的最小间隔， env.getCheckpointConfig.setMinPauseBetweenCheckpoints(1000L * 60L * 5L) //设置checkpoint的超时时间 env.getCheckpointConfig.setCheckpointTimeout(1000L * 60L * 30L) //设置checkpoint 的最大并发数 env.getCheckpointConfig.setMaxConcurrentCheckpoints(1) //当前path 最好是hdfs 的路径，s3 的路径有时会出现一致性的问题。 val backend = new RocksDBStateBackend(path, true) /** * 设置rsDB的保存策略 * 由于flink 不依赖磁盘上的RocksDB数据进行恢复，因此无需将数据同步到稳定的存储中。 * 1.DEFAULT ：所有设置都是默认选项，但不强制写入磁盘 * 2.SPINNING_DISK_OPTIMIZED：使用常规硬盘提高性能。 * 3.SPINNING_DISK_OPTIMIZED_HIGH_MEM：此配置将会应用大量的内存用于块的缓存和压缩，如果遇到DB内存不足，建议切换为第二种SPINNING_DISK_OPTIMIZED。 * 4.FLASH_SSD_OPTIMIZED：使用SSD 提高性能 * */ backend.setPredefinedOptions(PredefinedOptions.FLASH_SSD_OPTIMIZED) //设置checkpoint的模式：CheckpointingMode.EXACTLY_ONCE or CheckpointingMode.AT_LEAST_ONCE //默认是使用的 EXACTLY_ONCE env.getCheckpointConfig.setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE) //将ck保存进行set env.setStateBackend(backend.asInstanceOf[StateBackend]) 4. 内部失败重试策略 失败指标： 1.RestartStrategies.fixedDelayRestart2.RestartStrategies.failureRateRestart3.RestartStrategies.noRestart 1.如果发生故障，系统将尝试重新启动作业3次，并在连续的重新启动尝试之间等待10秒。 env.setRestartStrategy(RestartStrategies.fixedDelayRestart( 3, // number of restart attempts Time.of(10, TimeUnit.SECONDS) // delay )); 2.超过设定的指标，则该作业最终将失败（程序常用） // 设置内部 如果10分钟内连续失败3次，或者每次失败间隔时间超过15s 将认为不可恢复，则作业失败。其他情况作业默认启用内部恢复策略，直到作业恢复。 env.setRestartStrategy(RestartStrategies.failureRateRestart(3, org.apache.flink.api.common.time.Time.of(10, TimeUnit.MINUTES), org.apache.flink.api.common.time.Time.of(15, TimeUnit.SECONDS))) 3.不设置重试策略，作业有异常时直接失败。 env.setRestartStrategy(RestartStrategies.noRestart()) 5.程序中的并行执行设置 并行度的概念 并行度的个数和slot 数有关，而slot 数是有taskManager 的核数决定的， 并行设置的方式 1.可以内部程序接收外部传参数的形式。 2.可以内部程序env.setParallelism(16)的形式设置全局的并行度。 3.可以设置算子级别的并行度 4.命令行中进行全局设置： ./bin/flink run -p 5 ../wordCount-java*.jar 并行度设置优化点： 1. 在设置kafka source的时候，可以设置与partition 数一致的并行度，这样更能 (startIndex+parttion.getPartition())%numParallerSubtasks == currentTaskId 并行度设置注意事项： Apache Flink的并行度设置并不是说越大越好、数据处理的效率就越高。而是需要设置合理的并行度。那么何谓合理呢？ Apache Flink的 并行度取决于每个TaskManager上的slot数量而决定的。Flink的JobManager把任务分成子任务提交给slot进行执行。相同的slot共享相同的JVM资源，同时对Flink提供维护的心跳等信息。 slot是指TaskManagere的并发执行能力，通常来说TaskManager有多少核CPU也就会有多少个slot。这样来看，我们设置的并行度其实是与TaskManager所有Slot数量有关的streamAPI 常用ProcessFunction 的使用side outPut的使用flink 编程中的小总结1.]]></content>
      <categories>
        <category>flink-优化篇</category>
      </categories>
      <tags>
        <tag>flink-优化篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客编写思路]]></title>
    <url>%2F2019%2F12%2F17%2F%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[博客类型分类常用篇 主要介绍本知识点和框架常用到的命令和技巧，以及需要注意的事项。 学习篇 主要介绍本知识点和框架的3W， who 是什么，where 应用场景， what 怎么用比较好。 问题篇 在使用本知识点或框架中遇到的问题。 资料篇 扩展本知识点或架构的其他比较好的学习资料。 优化篇 主要编写的是当前组件或架构可优化点。 实战篇 主要演示在知识点实际搭建过程中的操作。 other 主要是小的知识点分类，比如java-JVM篇，java-cache篇，java-多线程篇 博客思想 本站博客，是以练促学，以学促用的理念来进行编写，当然博客中也会qi其他大牛比较好的内容，]]></content>
      <categories>
        <category>博客编写思路</category>
      </categories>
      <tags>
        <tag>博客编写思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-cache篇]]></title>
    <url>%2F2019%2F12%2F17%2Fjava-cache%E7%AF%87%2F</url>
    <content type="text"><![CDATA[使用场景 首先要有意识的进行缓存的使用。在某值多次使用的时候，可以考虑把当前值获取到并放到缓存中去，使得数据在内存中获取，而非外部存储，能极大提高数据获取的速度。但要注意缓存数据的容量大小。 代码演示 构建缓存 var cache: Cache[String, String] = CacheBuilder.newBuilder() .expireAfterAccess(30, TimeUnit.MINUTES) //过期时间 .maximumSize(30000) //最大条数 .build() 获取缓存，如果没有则进行计算 或者用getIfPresent 获取缓存 try { // If the key wasn&#39;t in the &quot;easy to compute&quot; group, we need to // do things the hard way. cache.get(key, () -&gt; doThingsTheHardWay(key)); } catch (ExecutionException e) { throw new OtherException(e.getCause()); } 使用cache.put(key, value)方法可以直接向缓存中插入值，这会直接覆盖掉给定键之前映射的值 缓存收回策略 ： 1.基于容量的回收（size-based eviction） 使用CacheBuilder.maximumSize(long) 缓存将尝试回收最近没有使用或总体上很少使用的缓存项。 警告：在缓存项的数目达到限定值之前，缓存就可能进行回收操作,通常来说，这种情况发生在缓存项的数目逼近限定值时 2.定时回收（Timed Eviction） 1.expireAfterAccess(long, TimeUnit)：缓存项在给定时间内没有被读/写访问，则回收。请注意这种缓存的回收顺序和基于容量回收一样 2.expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收。如果认为缓存数据总是在固定时候后变得陈旧不可用，这种回收方式是可取的。 3.基于引用的回收（Reference-based Eviction） 通过弱引用的键或者弱引用的值，或者软引用的值，guava Cache可以把缓存设置为允许垃圾回收 1.CacheBuilder.weakKeys():使用过弱引用存储键值。当被垃圾回收的时候，当前键值没有其他引用的时候缓存项可以被垃圾回收。 2.CacheBuilder.weakValues():使用弱引用存储值。 3.CacheBuilder.softValues():使用软引用存储值。软引用就是在内存不够是才会按照顺序回收。 缓存数据的清除个别清除：Cache.invalidate(key) 批量清除：Cache.invalidateAll(keys) 清除所有缓存项：Cache.invalidateAll()刷新 刷新操作进行时，缓存仍然可以向其他线程返回旧值，而不像回收操作，读缓存的线程必须等待新值加载完成 如果刷新过程抛出异常，缓存将保留旧值，而异常会在记录到日志后被丢弃[swallowed]。 重载CacheLoader.reload(K, V)可以扩展刷新时的行为，这个方法允许开发者在计算新值时使用旧的值。 //有些键不需要刷新，并且我们希望刷新是异步完成的 LoadingCache&lt;Key, Graph&gt; graphs = CacheBuilder.newBuilder() .maximumSize(1000) .refreshAfterWrite(1, TimeUnit.MINUTES) .build( new CacheLoader&lt;Key, Graph&gt;() { public Graph load(Key key) { // no checked exception return getGraphFromDatabase(key); } public ListenableFuture&lt;Key, Graph&gt; reload(final Key key, Graph prevGraph) { if (neverNeedsRefresh(key)) { return Futures.immediateFuture(prevGraph); }else{ // asynchronous! ListenableFutureTask&lt;Key, Graph&gt; task=ListenableFutureTask.create(new Callable&lt;Key, Graph&gt;() { public Graph call() { return getGraphFromDatabase(key); } }); executor.execute(task); return task; } } });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java cache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[azkaban-剖析篇]]></title>
    <url>%2F2019%2F12%2F10%2Fazkaban-%E5%89%96%E6%9E%90%E7%AF%87%2F</url>
    <content type="text"><![CDATA[1.Azkaban-前后台参数传递 2.Azkaban-用户登录过程 1.用户登录时，首先通过LoginAbstractAzkabanServlet 中的handleAjaxLoginAction 方法进行用户信息处理和认证。 protected void handleAjaxLoginAction(HttpServletRequest req, HttpServletResponse resp, Map&lt;String, Object&gt; ret) throws ServletException { if (hasParam(req, &quot;username&quot;) &amp;&amp; hasParam(req, &quot;password&quot;)) { Session session = null; try { //创建session 进行用户的认证 session = createSession(req); } catch (UserManagerException e) { ret.put(&quot;error&quot;, &quot;Incorrect Login. &quot; + e.getMessage()); return; } Cookie cookie = new Cookie(SESSION_ID_NAME, session.getSessionId()); cookie.setPath(&quot;/&quot;); resp.addCookie(cookie); getApplication().getSessionCache().addSession(session); ret.put(&quot;status&quot;, &quot;success&quot;); ret.put(&quot;session.id&quot;, session.getSessionId()); } else { ret.put(&quot;error&quot;, &quot;Incorrect Login.&quot;); } } 2.createSession的验证和创建过程： private Session createSession(String username, String password, String ip) throws UserManagerException, ServletException { UserManager manager = getApplication().getUserManager(); User user = manager.getUser(username, password); String randomUID = UUID.randomUUID().toString(); Session session = new Session(randomUID, user, ip); return session; }]]></content>
      <categories>
        <category>azkaban</category>
      </categories>
      <tags>
        <tag>azkaban</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[httpd-常用篇]]></title>
    <url>%2F2019%2F12%2F10%2Fhttpd-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[httpd 服务简介 2.httpd 作为文件服务的使用 安装使用 #安装 sudo yum install httpd sudo su #测试配置是否正常 httpd -t #start httpd -k start #stop httpd -k stop 服务目录 /etc/httpd 主配置文件 /etc/httpd/conf/httpd.conf 网站数据目录 /var/www/html 访问日志 /var/log/httpd/access_log 错误日志 /var/log/httpd/error_log 配置结构 ServerRoot 服务目录 ServerAdmin 对服务机地址目录启动成文件访问服务 3.Httpd 集成ldap 集成前需安装 mod_ldap sudo su yum -y install mod_ldap vim conf.d/auth_ldap.conf &lt;Directory /data/dataplatform/zepplin/http_server/file/&gt; # AuthName &quot;LDAP Authentication&quot; AuthName &quot;zeppelin_file&quot; AuthType Basic AuthBasicProvider ldap AuthLDAPURL &quot;ldap://*****:389/ou=acs,dc=****,dc=com?uid?sub?(objectClass=*)&quot; AuthLDAPBindDN &quot;uid=gateway,ou=open,dc=****,dc=com&quot; AuthLDAPBindPassword &quot;********&quot; Require valid-user &lt;/Directory&gt; 测试配置是否异常 httpd -t 重启 httpd -k restart 相关参考 配置参考地址 Apache http 服务器2.4 文档 download]]></content>
      <categories>
        <category>httpd</category>
      </categories>
      <tags>
        <tag>httpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[k8s-问题篇]]></title>
    <url>%2F2019%2F11%2F12%2Fk8s-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[####1. Unable to connect to the server: dial tcp 192.168.99.100:8443: connect: no route to host 问题原因： 链接不上服务地址，可能是机器没有启动，或者节点已经丢失。 解决方案： 查看运行状态 minikube status 启动机器（测试虚拟机） ####2. error: unable to forward port because pod is not running. Current status=Pending 查看问题： kubectl get nodes 首先查看node 是不是Ready 状态 kubectl get pods (查看当前的pods) kubectl describe nodes （查看node 的vm 详细信息） kubectl get services (查看运行服务) ####3. Kube-proxy: error looking for path of conntrack kube-proxy 报错，并且 service 的 DNS 解析异常 kube-proxy[2241]: E0502 15:55:13.889842 2241 conntrack.go:42] conntrack returned error: error looking for path of conntrack: exec: &quot;conntrack&quot;: executable file not found in $PATH 解决方式是安装 conntrack-tools 包后重启 kube-proxy 即可。 ####4. “Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?” 问题原因：是因为docker服务没有启动，所以在相应的/var/run/ 路径下找不到docker的进程。解决方式： 1.service docker start 2.查看docker-machine是否安装。 其他原因及解决方案]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[k8s-实战篇]]></title>
    <url>%2F2019%2F10%2F25%2Fk8s-%E5%AE%9E%E6%88%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[1. kubectl 操作1.1 kubectl 配置1.3 kubectl 权限**********************# 权限问题 #************************* 查看是否有权限：kubectl auth can-i &lt;list|create|edit|delete&gt; pods 2. minikube操作2.1 minikube 安装 1.下载virtualbox 2.brew cask install minikube 3.minikube start –vm-driver=virtualbox 4.minikube config set vm-driver virtualbox 5.kubectl version 查看版本 2.2 minikube 常用操作#启动并创建集群 minikube start #查看仪表盘 minikube dashboard #使用现有镜像 kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10 #访问时将端口进行公开映射 kubectl expose deployment hello-minikube --type=NodePort --port=8080 #查看是否已经正在运行 kubectl get pods #获取公开服务的URL以查看服务详细信息 minikube service hello-minikube --url #curl 获取的url 查看本地集群的详细信息 curl http://192.168.99.100:30083 #删除 hello-minikube 服务 kubectl delete services hello-minikube #删除 hello-minikube 部署 kubectl delete deployment hello-minikube #停止本地minikube 集群 minikube stop #删除本地minikube 集群 minikube delete 2.3 minikube 的应用和服务********************# 应用和服务 #************* #启动minikube minikube start #部署应用 kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080 #确定deployment kubectl get deployment #查看部署的应用 kubectl get pods #发布应用 kubectl expose deployment hello-minikube --type=NodePort #查看发布的内容 kubectl get services #访问服务 1.虚拟机：curl http://ip:port 2.curl $(minikube service hello-minikube --url) #获取服务url 链接 minikube service --url service_name #查看控制台 minikube dashboard 查看所有Kubernetes Pod的部署状态 kubectl get po -A #删除服务 kubectl delete services hello-minikube #删除应用 kubectl delete deployment hello-minikube #删除pods kubectl delete pods podName #停止minikube minikube stop #进入minikube 控制台 minikube ssh 2.4 minikube 集群相关**********************# 集群相关 #************************** #获取集群的ip minikube ip #获取集群节点 kubectl get nodes #启动第二个本地集群 minikube start -p cluster2 #停止本地集群 minikube stop #删除本地集群 minikube delete #删除所有本地集群和配置文件 minikube delete --all 获取网桥ip minikube ssh &quot;route -n | grep ^0.0.0.0 | awk &#39;{ print \$2 }&#39;&quot; 链接到集群minikube minikube ssh telnet ip port 2.5 minikube 附加组件********************************* 附加组件 ******************** #查询可添加的组件 minikube addons list #启用组件 minikube addons enable &lt;name&gt; #与组件交互 minikube addons open &lt;name&gt; #禁用组件 minikube addons disable &lt;name&gt; 2.6 minikube 调试************************** 启动调试日志 ******************* --v=0将输出INFO级别的日志 --v=1将输出警告级别的日志 --v=2将输出错误级别的日志 --v=3将输出libmachine日志记录 --v=7将输出libmachine –debug级日志记录 minikube start --v=7 将启动minikube并将所有重要的调试日志输出到stdout #收集虚拟机日志，要调试Kubernetes部署失败的问题，收集Kubernetes pod和内核日志非常有用 minikube logs #立即查看启动失败 minikube logs --problems #查看所有Kubernetes Pod的部署状态 kubectl get po -A 2.7 重用Docker 守护程序使用本地映像eval $(minikube docker-env) docker ps 4.学习案例4. 5.kubectl应用和服务 ####6. 10.docker 常用操作10.1 镜像的操作列出所有的镜像: docker images 停止运行：docker stop iamgesId 删除单个镜像：docker rmi imagesId 清理所有（慎用）：docker system prune WARNING! This will remove: - all stopped containers - all networks not used by at least one container - all dangling images - all dangling build cache 清理镜像：docker image prune 清理容器：docker container prune 删除所有停止的镜像docker image prune -f -a 删除所有停止的容器：docker container prune -f 复制文件： docker cp mycontainer:/opt/file.txt /opt/local/ docker cp /opt/local/file.txt mycontainer:/opt/ 11.docker 常见问题及解决方案11.1 docker日志太多导致磁盘占满 在启动时遇到：No space left on device 官方解决方案：地址 ## 1.Sort the /var/lib/docker/containers du -d1 -h /var/lib/docker/containers | sort -h ## 2. 选择要清理的容器进行清理 cat /dev/null &gt; /var/lib/docker/containers/******** ## 3.限制日志文件的大小：启动容器时，可以通过参数设置日志文件的大小、日志文件的格式 docker run -it --log-opt max-size=10m --log-opt max-file=3 alpine ash12.kubectl常用故障排查以及修改命令 scale scale命令进行横向扩展，将原本为1的副本，提高到3 kubectl scale --current-replicas=1 --replicas=3 deployment/nginx autoscale 和scale不同的是autoscale则会根据负载进行调解 kubectl autoscale deployment nginx --min=2 --max=5 cordon 查询nodeAddress kubectl get pods -o wide 设定nodeAddress，使得nodeAddress不可使用，使用get node确认， 其状态显示SchedulingDisabled kubectl cordon nodeAddress 案例： 设定134不可用： kubectl cordon 192.168.32.134 横向扩展： kubectl scale --replicas=6 deployment/nginx 发现没有pods 再执行在134这台机器上。 kubectl uncordon 解除限制 kubectl uncordon nodeAddress kubectl drain drain命令用于对某个node进行设定，是为了设定此node为维护做准备。 此命令主要执行的操作是： 1. 设定此node不可以使用（cordon) 2. evict（回收）了其上的两个pod kubectl api-versions 查看当前版本的kubernetes的服务器端所支持的api版本信息 kubectl get all -o wide 列出pod services deployment replicaset 的信息 kubectl 可get 的信息 kubectl get deployments kubectl get pods kubectl get namespaces kubectl 查看详情信息 kubectl describe node 192.168.32.132 kubectl describe deployment mysql kubectl 查看日志 kubectl logs podsName 13.学习案例2[root@node1 wordpress]# cat wordpress-db.yaml --- apiVersion: apps/v1beta1 kind: Deployment metadata: name: mysql-deploy labels: app: mysql spec: template: metadata: labels: app: mysql spec: containers: - name: mysql image: mysql:5.7 imagePullPolicy: IfNotPresent ports: - containerPort: 3306 name: dbport env: - name: MYSQL_ROOT_PASSWORD value: rootPassW0rd - name: MYSQL_DATABASE value: wordpress - name: MYSQL_USER value: wordpress - name: MYSQL_PASSWORD value: wordpress volumeMounts: - name: db mountPath: /var/lib/mysql volumes: - name: db hostPath: path: /var/lib/mysql --- apiVersion: v1 kind: Service metadata: name: mysql spec: selector: app: mysql ports: - name: mysqlport protocol: TCP port: 3306 targetPort: dbport [root@node1 wordpress]# cat wordpress.yaml apiVersion: apps/v1beta1 kind: Deployment metadata: name: wordpress-deploy labels: app: wordpress spec: template: metadata: labels: app: wordpress spec: containers: - name: wordpress image: wordpress imagePullPolicy: IfNotPresent ports: - containerPort: 80 name: wdport env: - name: WORDPRESS_DB_HOST value: mysql:3306 - name: WORDPRESS_DB_USER value: wordpress - name: WORDPRESS_DB_PASSWORD value: wordpress --- apiVersion: v1 kind: Service metadata: name: wordpress spec: type: NodePort selector: app: wordpress ports: - name: wordpressport protocol: TCP port: 80 targetPort: wdport #### 启动容器 kubectl create -f wordpress-db.yaml kubectl create -f wordpress.yaml #### 查看集群信息 kubectl get all -A -l app=wordpress NAMESPACE NAME READY STATUS RESTARTS AGE default pod/wordpress-deploy-f9c5cf5c6-tj2bc 1/1 Running 0 80m NAMESPACE NAME READY UP-TO-DATE AVAILABLE AGE default deployment.apps/wordpress-deploy 1/1 1 1 80m NAMESPACE NAME DESIRED CURRENT READY AGE default replicaset.apps/wordpress-deploy-f9c5cf5c6 1 1 1 80m #### 配置ingress [root@node1 wordpress]# cat ingress.yaml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: wordpress-ingress namespace: default annotations: kubernetes.io/ingress.class: &quot;nginx&quot; spec: rules: - host: wordpress.boshao.wang http: paths: - backend: serviceName: wordpress servicePort: 80 #### 创建ingress kubectl create -f ingress.yaml #### 查看ingres信息 [root@node1 wordpress]# kubectl get ing wordpress-ingress NAME HOSTS ADDRESS PORTS AGE wordpress-ingress wordpress.boshao.wang 80 78m [root@node1 wordpress]# kubectl describe ingress wordpress-ingress Name: wordpress-ingress Namespace: default Address: Default backend: default-http-backend:80 (&lt;none&gt;) Rules: Host Path Backends ---- ---- -------- wordpress.boshao.wang wordpress:80 (10.233.70.27:80) Annotations: kubernetes.io/ingress.class: nginx Events: &lt;none&gt; #### 最后绑定域名wordpress.boshao.wang 到node节点即可。 通过ingress-nginx 暴露的端口进行访问，即可。 ingress-nginx service/ingress-nginx NodePort 10.233.29.94 &lt;none&gt; 80:31661/TCP,443:30250/TCP 6d2h 访问方式：wordpress.boshao.wang → node ip:31661 http://wordpress.boshao.wang:31661/ 参考地址： minikube参考 命令查询]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s-实战篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-常用篇]]></title>
    <url>%2F2019%2F10%2F24%2Fpython-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[1.pyenv 的使用 #查看python 版本信息 pyenv versions #python 切换版本 pyenv local 版本号 Mac下pyenv与pyenv-virtualenv的安装和使用]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cassandra-案例篇]]></title>
    <url>%2F2019%2F10%2F15%2Fcassandra-%E6%A1%88%E4%BE%8B%E7%AF%87%2F</url>
    <content type="text"><![CDATA[java 链接cassandra 查询导入依赖 &lt;!-- https://mvnrepository.com/artifact/com.datastax.cassandra/cassandra-driver-core --&gt; &lt;dependency&gt; &lt;groupId&gt;com.datastax.cassandra&lt;/groupId&gt; &lt;artifactId&gt;cassandra-driver-core&lt;/artifactId&gt; &lt;version&gt;3.7.1&lt;/version&gt; &lt;/dependency&gt; import com.datastax.driver.core.Cluster; import com.datastax.driver.core.ResultSet; import com.datastax.driver.core.Row; import com.datastax.driver.core.Session; import java.util.List; /** * @author xianchang.yue * @date 2019-10-15 14:59 */ public class TestCassandra { public static void main(String[] args) { Cluster cluster = null; try { cluster = Cluster.builder().addContactPoints(&quot;127.0.0.1&quot;).withPort(9042).build(); Session session = cluster.connect(); ResultSet execute = session.execute(&quot;select * from system_schema.keyspaces&quot;); List&lt;Row&gt; all = execute.all(); for (Row row : all) { String keyspace_name = row.getString(&quot;keyspace_name&quot;); System.out.println(keyspace_name); } } finally { if (cluster != null) { cluster.close(); } } } }]]></content>
      <categories>
        <category>cassandra</category>
      </categories>
      <tags>
        <tag>cassandra-案例篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[k8s-学习篇]]></title>
    <url>%2F2019%2F10%2F15%2Fk8s-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[k8s 介绍Kubernetes 是一个生产级的开源平台，用于协调计算机集群内部和跨计算机集群的应用程序容器的分发(调度)和运行。一个 Master 是集群的调度节点。nodes 是应用程序实际运行的工作节点。 k8s 重要组件k8s核心组件： etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制； controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等； scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上； kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理； Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）； kube-proxy负责为Service提供cluster内部的服务发现和负载均衡； 推荐的Add-ons： kube-dns负责为整个集群提供DNS服务 Ingress Controller为服务提供外网入口 Heapster提供资源监控 Dashboard提供GUI Federation提供跨可用区的集群 Fluentd-elasticsearch提供集群日志采集、存储与查询 k8s 部署在k8s中，通过发布 Deployment，可以创建应用程序 (docker image) 的实例 (docker container)，这个实例会被包含在称为 Pod 的概念中，Pod 是 k8s 中最小单元的可管理单元 在 k8s 集群中发布 Deployment 后，Deployment 将指示 k8s 如何创建和更新应用程序的实例，master 节点将应用程序实例调度到集群中的具体的节点上。 创建应用程序实例后，Kubernetes Deployment Controller 会持续监控这些实例。如果运行实例的 worker 节点关机或被删除，则 Kubernetes Deployment Controller 将在群集中资源最优的另一个 worker 节点上重新创建一个新的实例。这提供了一种自我修复机制来解决机器故障或维护问题。 在容器编排之前的时代，各种安装脚本通常用于启动应用程序，但是不能够使应用程序从机器故障中恢复。通过创建应用程序实例并确保它们在集群节点中的运行实例个数，Kubernetes Deployment 提供了一种完全不同的方式来管理应用程序。 参考资料https://kubernetes.io/docs/concepts/services-networking/ingress/ nginx官方介绍：https://www.nginx.com/products/nginx/kubernetes-ingress-controller 部署方式https://kubernetes.github.io/ingress-nginx/deploy/#prerequisite-generic-deployment-command 首先先下载相关的yaml文件，保存到本地。 deployments：kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml service： 这里官方提供了各种云平台，系统等相关配置。我们这里是自建的k8s集群，所以我们选择裸机版本。 Bare-metalUsing NodePort: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml 安装完后。看看集群信息。 [root@node1 ingress-nginx]# kubectl get all -A -l app.kubernetes.io/name=ingress-nginxNAMESPACE NAME READY STATUS RESTARTS AGEingress-nginx pod/nginx-ingress-controller-79f6884cf6-vh2w2 1/1 Running 0 5d3h NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEingress-nginx service/ingress-nginx NodePort 10.233.29.94 80:31661/TCP,443:30250/TCP 6d2h NAMESPACE NAME READY UP-TO-DATE AVAILABLE AGEingress-nginx deployment.apps/nginx-ingress-controller 1/1 1 1 6d3h NAMESPACE NAME DESIRED CURRENT READY AGEingress-nginx replicaset.apps/nginx-ingress-controller-79f6884cf6 1 1 1 6d3h]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql-常用篇]]></title>
    <url>%2F2019%2F10%2F15%2Fsql-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[编程规范https://www.sqlstyle.guide/zh/]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[详细文档设计规范]]></title>
    <url>%2F2019%2F10%2F15%2F%E8%AF%A6%E7%BB%86%E6%96%87%E6%A1%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[详细设计的目标在项目实施之前进行问题、方案等重要项目信息的归纳整理。书写文档的过程中模块负责人能够更深入的思考问题与解决方案，提升对目标的理解、后续工作的质量、效率，降低项目风险。文档本身作为组织资产进行信息载体，发挥长期的价值。 详细设计文档原则能够面向不了解业务&amp;技术背景的人群 清晰表述完主要问题以及解决方案 详细设计阶段必须定义接口(也可以单独书写接口文档) 考虑到测试、运维、产品的主要关注点 设计文档的格式以及载体格式: markdown 或 word(更新时使用审阅模式) 载体: gitlab , 文档存放项目下doc目录, 每次发版tag携带最新文档 详细设计的适用场景需要写详细设计文档的场景新的线上模块 架构的大调整 对业务产生较大的影响的版本 不需要写详细设计文档的场景不影响架构bug修复和升级且不影响主体逻辑和接口 详细设计文档规范]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>详细文档设计规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell-案例篇]]></title>
    <url>%2F2019%2F10%2F15%2Fshell-%E6%A1%88%E4%BE%8B%E7%AF%87%2F</url>
    <content type="text"><![CDATA[## 此shell脚本只在bash解释器下测试运行过, sh解释器不保证一定正确 ## 关于bash和sh有啥区别, 大家可自行Google, 我建议大家使用bash ## 可能大部分Linux系统, bash跟sh不会有太多区别, 但是如果你用Debian或者Ubuntu的话 ## 你会发现之前写的脚本sh运行会爆出一堆语法错误, 因为他们的sh等于Dash, 很蛋疼. ################### PRODUCTLINE=&quot;rta&quot; PROJECT=&quot;ga-device&quot; ## 自带出错邮件报警: 尽量使用邮件组而不是使用具体某个人的邮箱 ## 因为科比曾经说过: 朋友来来走走, 冠军旗帜永不倒 ## 使用具体某个人的邮箱回头离职了邮件就发不出来了 ALARM_ADDR=&quot;bin.li@mobvista.com&quot; ALARM_CC=&quot;bin.li@mobvista.com&quot; ## 钉钉报警有个好处是你可以建立群组, 而且可以分类, 不重要的信息你 ## 可以发到一个群里, 然后大家屏蔽群消息就好, 出问题的时候再去翻 ## dingtalkid: 钉钉群讨论的ID, 我想不需要我教你怎么获得这个ID ALARM_DINGDING_TALKID=&quot;62138ba2d704500d24b21064663659e2288bdf5f6b72d8a8d5895746f2ee0f8f&quot; # https://oapi.dingtalk.com/robot/send?access_token=62138ba2d704500d24b21064663659e2288bdf5f6b72d8a8d5895746f2ee0f8f INFO_DINGDING_TALKID=&quot;d49490482e23f0780bf017ad04cb29d027755e0550578ff4324e48f989e7a4c1&quot; # https://oapi.dingtalk.com/robot/send?access_token=d49490482e23f0780bf017ad04cb29d027755e0550578ff4324e48f989e7a4c1 ## kibana使用的EleasticSearch的地址, 数据上报到ES, 才能用kibana展示出来 ## 尽量用公司统一的, 不要自己单独整 ## 如果觉得别人搞的不好用, 尽量推动别人优化 ## 而不是自己搭一个扔在那里没人管 ES_ADDR=&quot;bj-report-ELB20151027-2124151593.us-east-1.elb.amazonaws.com:80&quot; ES_USER=&quot;mob_report&quot; ES_PASSWD=&quot;Mobvista_256&quot; ## 顾名思义, 就是把一个JSON document推到ES ## 这里面有一些概念: docid, doc, index, type(如果不知道啥意思, 自行google) ## 参数: ## + docid: doc唯一的ID, 很多人喜欢让ES自己生成, 但是这个地方尽量不要, ## 因为将来你的任务失败你还会补数呢, 找一个唯一的ID, 或者拼一个出来, ## 将来补数原来的doc会被自动覆盖掉, 不至于数据重复 ## + doc: json doc ## 任何你想塞进去的信息, 如果你足够聪明, 请塞一个格式化好的时间(北京时区)和 ## 一个时间戳进去 function doc2es() { local __docid=&quot;$1&quot; local __doc=&quot;$2&quot; curl -XPUT &quot;$ES_ADDR/mp_rba/cap_updater_jobstatus/$__docid&quot; \ -H &#39;Content-Type: application/json&#39; \ -u &quot;$ES_USER:$ES_PASSWD&quot; -d&quot;$__doc&quot; } ## 邮件报警, 会使用全局变量里面的收件人地址 ALARM_ADDR &amp; ALARM_CC ## 两个参数: ## + sub: 邮件主题 ## + body: 报警内容(别JB图省事, 多写点东西又不会死, 让别人一眼看出来发生了什么吧!) function email_alarm() { local _sub=$1 local _body=&quot;$2&quot; cat &quot;$_body&quot; | mail -s &quot;[$PRODUCTLINE][$PROJECT]$_sub&quot; -c &quot;$ALARM_CC&quot; &quot;$ALARM_ADDR&quot; } function send_dingding_msg() { local _dingtalkid=&quot;$1&quot; local _msg=&quot;$2&quot; url=&quot;https://oapi.dingtalk.com/robot/send?access_token=$_dingtalkid&quot; body=&quot;{ \&quot;msgtype\&quot;: \&quot;text\&quot;, \&quot;text\&quot;: { \&quot;content\&quot;: \&quot;[$PRODUCTLINE][$PROJECT] Failed !!! [$_msg]\&quot; }, \&quot;at\&quot;: { \&quot;atMobiles\&quot;: [], \&quot;isAtAll\&quot;: false } }&quot; curl &quot;$url&quot; -H &#39;Content-Type: application/json&#39; -X POST -d &quot;$body&quot; } ## 钉钉报警, 会使用全局变量里面的收件人地址 ALARM_ADDR &amp; ALARM_CC ## 参数: ## + msg: 报警内容(别JB图省事, 多写点东西又不会死, 让别人一眼看出来发生了什么吧!) function dingding_alarm() { send_dingding_msg $ALARM_DINGDING_TALKID &quot;$1&quot; } function dingding_info() { send_dingding_msg $INFO_DINGDING_TALKID &quot;$1&quot; } ## 就是想让输出多个时间而已 ## 参数: 你想打的消息 function info() { local _msg=&quot;$1&quot; echo &quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) INFO [$_msg]&quot; } ## 就是想让输出多个时间而已 ## 参数: 你想打的消息 function error() { local _msg=&quot;$1&quot; echo &quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) ERROR [$_msg]&quot; } ## 任务运行结束, 清理掉临时文件 ## 参数: 给个文件名 function clean_file() { local _f=&quot;$1&quot; if [ -f $_f ]; then info &quot;rm $_f&quot; rm $_f fi } ## 任务运行结束, 备份重要结果文件 ## 参数: 给个文件名和后缀 ## 比如: back_file file-name 2019032013 function back_file() { local _f=&quot;$1&quot; local _postfix=&quot;$2&quot; if [ -f $_f ]; then info &quot;mv $_f $_f.$_postfix&quot; mv $_f $_f.$_postfix fi } # 为了方便CTI和CVR的计算, 我们需要从s3拉取一些中间结果下来 # 这个地方定义一个下载函数 # 希望达到的效果是, 给定一个输入路径, 可以把这个路径下的所有文件都下载下来 # 并且导到一个目标文件中 # 当然还需要做一下文件大小的check, 别把本地磁盘给撑爆了 function download_from_s3_dir() { local _s3_dir=$1 local _local_file=$2 local _tmp_index=&quot;__tmp_index_for_download_s3_file__$(date +&quot;%s&quot;).$RANDOM&quot; local _sz_max=4000000000 # local _sz_max=1000 # check file size 1st if [ -f $_tmp_index ]; then rm $_tmp_index fi run_with_check &quot;aws s3 ls $_s3_dir &gt; $_tmp_index&quot; if [ 0 -eq $(wc -l $_tmp_index | awk &#39;{print $1}&#39;) ]; then echo &quot;WARNING: no file in $_s3_dir&quot; touch $_local_file else local _sz_tt=0 for sz in $(cat $_tmp_index | awk &#39;{print $3}&#39;) do echo $sz # debug _sz_tt=$((_sz_tt+$sz)) done if [ $_sz_tt -gt $_sz_max ]; then echo &quot;ERROR: files too large exit!!! [$_sz_tt &gt; $_sz_max]&quot; exit 1 fi if [ -f $_local_file ]; then rm $_local_file fi for f in $(cat $_tmp_index | awk &#39;{print $3&quot;|&quot;$4}&#39;) do local _sz=$(echo &quot;$f&quot; | awk -F&#39;|&#39; &#39;{print $1}&#39;) local _ff=$(echo &quot;$f&quot; | awk -F&#39;|&#39; &#39;{print $2}&#39;) local _ff_local=$_ff&quot;.$(date +&quot;%s&quot;).$RANDOM&quot; if [ x&quot;0&quot; = x&quot;$_sz&quot; ]; then continue fi run_with_check &quot;aws s3 cp $_s3_dir$_ff $_ff_local&quot; run_with_check &quot;cat $_ff_local &gt;&gt; $_local_file&quot; if [ -f $_ff_local ]; then rm $_ff_local fi done fi if [ -f $_tmp_index ]; then rm $_tmp_index fi } ## 这个函数我想大家都可以用到 ## 把你任务一些可能会失败的操作过程, 比如从s3拷个文件 ## 比如执行一个py脚本, 比如curl一个东西 ## run_with_check, 发现失败, 自动报警, 而且立马终止任务 ## 参数: 你要执行的命令 ## 比如: run_with_check &quot;python demo.py&quot; function run_with_check { cmd=&quot;$1&quot; info &quot;$cmd&quot; eval &quot;$cmd&quot; if [ 0 -ne $? ]; then error &quot;[$cmd] failed!!!!! exit !!!!!!!!&quot; email_alarm &quot;[$PRODUCTLINE][$PROJECT] Failed !!!&quot; &quot;command exit code not 0: $cmd&quot; dingding_alarm &quot;command exit code not 0: $cmd&quot; exit 1 fi }微信报警接口#!/usr/bin/env python # coding:utf-8 import sys import urllib2 import time import json import requests import redis reload(sys) sys.setdefaultencoding(&#39;utf-8&#39;) print sys.argv message = sys.argv[3] # 位置参数获取title 适用于zabbix user = sys.argv[1] # 位置参数获取content 适用于zabbix POOL = redis.ConnectionPool(host=&#39;&#39;,port=3721,password=&#39;&#39;,db=1) rs=redis.Redis(connection_pool=POOL) def send_msg(user,message): # 发送消息 qs_token = rs.get(&#39;weixin&#39;) url = &quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={0}&quot;.format( qs_token) payload = { &quot;touser&quot;:user, &quot;msgtype&quot;: &quot;text&quot;, &quot;agentid&quot;: &quot;2&quot;, &quot;text&quot;: { &quot;content&quot;: message }, &quot;safe&quot;: &quot;0&quot; } ret = requests.post(url, data=json.dumps(payload, ensure_ascii=False)) print ret.json() if __name__ == &#39;__main__&#39;: send_msg(user,message) # 使用方法： python wetchat.py mail@qq.com subject message]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell-案例篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell-常用篇]]></title>
    <url>%2F2019%2F10%2F15%2Fshell-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[shell 编程运算符= 两个字符串相等返回true != 两个字符串不相等返回true -z 字符串长度为0返回true -n 字符串长度不为0返回true -d file 检测文件是否是目录，如果是，则返回 true -r file 检测文件是否可读，如果是，则返回 true -w file 检测文件是否可写，如果是，则返回 true -x file 检测文件是否可执行，如果是，则返回 true -s file 检测文件是否为空（文件大小是否大于0，不为空返回 true -e file 检测文件（包括目录）是否存在，如果是，则返回 true 字符串#!/bin/bash #定义字符串 mtext=&quot;hello&quot; mtext2=&quot;world&quot; #字符串的拼接 mtext3=$mtext&quot; &quot;$mtext2 #输出字符串 echo $mtext3 #输出字符串长度 echo ${#mtext3} #截取字符串 echo ${mtext3:1:4} 数组#!/bin/bash #定义数组 array=(1 2 3 4 5) array2=(aa bb cc dd ee) #找到某一个下标的数，然后赋值 value=${array[3]} echo $value #找到某一个下标的数，然后赋值 value2=${array2[3]} echo $value2 #获取数组长度 length=${#array[*]} echo $length echo #输出并且换行 echo &quot;hello \nworld&quot; #重定向到文件 echo &quot;hello world&quot; &gt; a.txt #输出当前系统时间 echo `date` 判断语句#!/bin/sh #测试各种字符串比较操作。 #shell中对变量的值添加单引号，爽引号和不添加的区别：对类型来说是无关的，即不是添加了引号就变成了字符串类型， #单引号不对相关量进行替换，如不对$符号解释成变量引用，从而用对应变量的值替代，双引号则会进行替代 #author:tenfyguo A=&quot;$1&quot; B=&quot;$2&quot; echo &quot;输入的原始值：A=$A,B=$B&quot; #判断字符串是否相等 if [ &quot;$A&quot; = &quot;$B&quot; ];then echo &quot;[ = ]&quot; fi #判断字符串是否相等，与上面的=等价 if [ &quot;$A&quot; == &quot;$B&quot; ];then echo &quot;[ == ]&quot; fi #注意:==的功能在[[]]和[]中的行为是不同的，如下 #如果$a以”a”开头(模式匹配)那么将为true if [[ &quot;$A&quot; == a* ]];then echo &quot;[[ ==a* ]]&quot; fi #如果$a等于a*(字符匹配),那么结果为true if [[ &quot;$A&quot; == &quot;a*&quot; ]];then echo &quot;==/&quot;a*/&quot;&quot; fi #File globbing(通配) 和word splitting将会发生, 此时的a*会自动匹配到对应的当前以a开头的文件 #如在当前的目录中有个文件：add_crontab.sh,则下面会输出ok #if [ &quot;add_crontab.sh&quot; == a* ];then #echo &quot;ok&quot; #fi if [ &quot;$A&quot; == a* ];then echo &quot;[ ==a* ]&quot; fi #如果$a等于a*(字符匹配),那么结果为true if [ &quot;$A&quot; == &quot;a*&quot; ];then echo &quot;==/&quot;a*/&quot;&quot; fi #字符串不相等 if [ &quot;$A&quot; != &quot;$B&quot; ];then echo &quot;[ != ]&quot; fi #字符串不相等 if [[ &quot;$A&quot; != &quot;$B&quot; ]];then echo &quot;[[ != ]]&quot; fi #字符串不为空，长度不为0 if [ -n &quot;$A&quot; ];then echo &quot;[ -n ]&quot; fi #字符串为空.就是长度为0. if [ -z &quot;$A&quot; ];then echo &quot;[ -z ]&quot; fi #需要转义&lt;，否则认为是一个重定向符号 if [ $A /&lt; $B ];then echo &quot;[ &lt; ]&quot; fi if [[ $A &lt; $B ]];then echo &quot;[[ &lt; ]]&quot; fi #需要转义&gt;，否则认为是一个重定向符号 if [ $A /&gt; $B ];then echo &quot;[ &gt; ]&quot; fi if [[ $A &gt; $B ]];then echo &quot;[[ &gt; ]]&quot; fi注意： 1.if 和 [ ] 之间要有空格 2.[ ] 和“ ”之间要有空格 3.“ ”和 = 之间要有空格 test 查看文件是否存在https://blog.csdn.net/qq_34337272/article/details/85640050 test $[num1] -eq $[num2] #判断两个变量是否相等test num1=num2 #判断两个数字是否相等 -e file 文件存在则返回真 -r file 文件存在并且可读则返回真 -w file 文件存在并且可写则返回真 -x file 文件存在并且可执行则返回真 -s file 文件存在并且内容不为空则返回真 -d file 文件目录存在则返回真case….esaccase 值 in 模式1) command1 command2 command3 ;; 模式2） command1 command2 command3 ;; *) command1 command2 command3 ;; esac # 匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。 # ;; 与其他语言中的 break 类似，意思是不执行接下来的语句而是跳到整个 case 语句的最后。 # *)与default相似，如果上面没有匹配到的模式，则执行*)里的内容。 模式支持正则表达式: * 任意字串 ? 任意字元 [abc] a, b, 或c三字元其中之一 [a-n] 从a到n的任一字元 | 多重选择 举例： #!/bin/sh case $1 in start | begin) echo &quot;I am started!&quot; ;; stop | end) echo &quot;I am stopped!&quot; ;; *) echo &quot;Other command!&quot; ;; esac for循环#!/bin/bash for i in {1..5}do echo $i done for i in 5 6 7 8 9 do echo $i done for FILE in $HOME/.bash* do echo $FILE done while循环#!/bin/bash COUNTER=0 while [ $COUNTER lt 5 ]do COUNTER=`expr $COUNTER + 1` echo $COUNTER done echo &#39;请输入。。。&#39;echo &#39;ctrl + d 即可停止该程序&#39; while read FILM do echo &quot;Yeah! great film the $FILM&quot; done Shell 脚本执行返回状态码：状态码 状态码 含义 0 命令成功完成 1 通常的未知错误 2 误用shell命令 126 命令无法执行 127 没有找到命令 128 无效的退出参数 128+x 使用Linux信号x的致命错误。 130 使用Ctrl-C终止的命令 255 规范外的退出状态 Shell 特殊变量列表特殊变量列表 变量 含义 $0 当前脚本的文件名 $n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。 $# 传递给脚本或函数的参数个数。 $* 传递给脚本或函数的所有参数。 $@ 传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。 $? 上个命令的退出状态，或函数的返回值。 $$ 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。变量注意事项变量名=变量值 等号“=”前后不可以有空格 变量名不可以直接和其他字符相连，如果想相连，必须用括号：echo “this is $(he)llo!”]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go-常用篇]]></title>
    <url>%2F2019%2F10%2F15%2Fgo-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[编码规范http://docscn.studygolang.com/doc/effective_go.html 单测样例http://gitlab.mobvista.com/mtech/mtech/blob/master/开发-Go单元测试.md 开发工具开发可自由选择编辑器，推荐使用IDE：https://www.jetbrains.com/go/ 常用库标准库: http://docscn.studygolang.com/pkg/日志: https://github.com/cihub/seelog配置: https://github.com/spf13/viperuuid: https://github.com/satori/go.uuidleveldb: https://github.com/syndtr/goleveldb/leveldbmurmurhash3: https://github.com/spaolacci/murmur3redis: https://github.com/garyburd/redigo/redisredis-cluster: https://github.com/chasex/redis-go-clustermongo: http://gopkg.in/mgo.v2命令行: http://gopkg.in/alecthomas/kingpin.v2grpc: http://www.grpc.io/docs/quickstart/go.html]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-常用篇]]></title>
    <url>%2F2019%2F10%2F14%2Fgit-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[git config –global user.name “你的名字” 让你全部的Git仓库绑定你的名字 git config –global user.email “你的邮箱” 让你全部的Git仓库绑定你的邮箱 git init 初始化你的仓库 git add . 把工作区的文件全部提交到暂存区 git add .// 把工作区的文件提交到暂存区 git commit -m “xxx” 把暂存区的所有文件提交到仓库区，暂存区空空荡荡 git remote add origin https://github.com/name/name_cangku.git 把本地仓库与远程仓库连接起来 git push -u origin master 把仓库区的主分支master提交到远程仓库里 git push -u origin &lt;其他分支&gt; 把其他分支提交到远程仓库 git status查看当前仓库的状态 git diff 查看文件修改的具体内容 git log 显示从最近到最远的提交历史 git clone + 仓库地址下载克隆文件 git reset –hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起 git reflog 显示命令历史 git checkout – 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z git rm 删除版本库的文件 git branch 查看当前所有分支 git branch &lt;分支名字&gt; 创建分支 git checkout &lt;分支名字&gt; 切换到分支 git merge &lt;分支名字&gt; 合并分支 git branch -d &lt;分支名字&gt; 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支 git branch -D + &lt;分支名字&gt; 强行删除，丢弃没被合并的分支 git log –graph 查看分支合并图 git merge –no-ff &lt;分支名字&gt; 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息 git stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作 git stash list 查看你刚刚“存放”起来的工作去哪里了 git stash apply 恢复却不删除stash内容 git stash drop 删除stash内容 git stash pop 恢复的同时把stash内容也删了 git remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin git remote -v 显示更详细的信息 git pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反 git rebase 把分叉的提交历史“整理”成一条直线，看上去更直观 git tag 查看所有标签，可以知道历史版本的tag git tag 打标签，默认为HEAD。比如git tag v1.0 git tag &lt;版本号&gt; 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字 git show 查看标签信息 git tag -a -m “&lt;说明&gt;” 创建带说明的标签。-a指定标签名，-m指定说明文字 git tag -d 删除标签 git push origin 推送某个标签到远程 git push origin –tags 一次性推送全部尚未推送到远程的本地标签 git push origin :refs/tags/ 删除远程标签 git config –global color.ui true 让Git显示颜色，会让命令输出看起来更醒目 git add -f 强制提交已忽略的的文件 git check-ignore -v 检查为什么Git会忽略该文件]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elasticsearch-学习篇]]></title>
    <url>%2F2019%2F10%2F11%2Felasticsearch-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[介绍：一个分布式的实时文档存储，每个字段 可以被索引与搜索一个分布式实时分析搜索引擎能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[职业知识图谱]]></title>
    <url>%2F2019%2F10%2F10%2F%E8%81%8C%E4%B8%9A%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%2F</url>
    <content type="text"><![CDATA[大数据通用处理平台SparkFlinkHadoop 分布式存储HDFS 资源调度1、Yarn2、Mesos 机器学习工具Mahout Spark Mlib TensorFlow (Google 系) Amazon Machine Learning DMTK (微软分布式机器学习工具) 数据分析/数据仓库(SQL类)Pig Hive kylin Spark SQL, Spark DataFrame Impala Phoenix ELK（ElasticSearch，Logstash，Kibana） 消息队列Kafka(纯日志类，大吞吐量) RocketMQ ZeroMQ ActiveMQ RabbitMQ 流式计算Storm/JStorm Spark Streaming Flink 日志收集Scribe Flume 编程语言Java Python R Ruby Scala 数据分析挖掘MATLAB SPSS SAS 数据可视化R D3.js ECharts Excle Python 机器学习机器学习基础 聚类 时间序列 推荐系统 回归分析 文本挖掘 决策树 支持向量机 贝叶斯分类 神经网络 机器学习工具 Mahout Spark Mlib TensorFlow (Google 系) Amazon Machine Learning DMTK (微软分布式机器学习工具) 算法一致性 paxos raft gossip 数据结构 栈，队列，链表 散列表 二叉树，红黑树，B树 图 常用算法1.排序 插入排序 桶排序 堆排序 2.快速排序 3,最大子数组 4.最长公共子序列 5.最小生成树 最短路径 6.矩阵的存储和运算 云计算云服务 SaaS PaaS IaaS Openstack Docker]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>职业知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ambari-资料篇]]></title>
    <url>%2F2019%2F10%2F09%2Fambari-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Ambari参考Ambari官网: http://ambari.apache.org/ Ambari-Github: https://github.com/apache/ambari/tree/branch-2.7 Ambari参考: https://www.ibm.com/developerworks/cn/opensource/os-cn-ambari-metrics/index.html Ambari官网-2.7.0: https://docs.hortonworks.com/HDPDocuments/Ambari/Ambari-2.7.0.0/index.html Apache-Ambari-2.6.2 http://www.apache.org/dyn/closer.cgi/ambari/ambari-2.6.2 Apache-Ambari-2.6.2: https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.6.2 Apache-Ambari-guide: https://cwiki.apache.org/confluence/display/AMBARI/Ambari Apache-Ambari-2.7.0: https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.7.0 Ambari添加Stack参考：http://www.itkeyword.com/doc/617736624192567x360 Ambari扩展Stack参考：https://my.oschina.net/u/2277929/blog/666180?tdsourcetag=s_pctim_aiomsg Ambari安装参考 Ambari2.7.0安装: https://blog.csdn.net/zsj777/article/details/81052859 Ambari学习链接Ambari参考教程：https://www.aliyun.com/jiaocheng/topic_25417_1.html Ambari操作指南：https://blog.csdn.net/devalone/article/details/80781652 Ambari操作指南：https://blog.csdn.net/devalone/article/details/80800262 Ambari基础参考：https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html Ambari基础应用：https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html Ambari-Metrics：https://www.ibm.com/developerworks/cn/opensource/os-cn-ambari-metrics/ Ambari-Alerts：https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari3/ Ambari-RoadMap：https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=30755705 Hortonworks链接：https://hortonworks.com/apache/ambari/]]></content>
      <categories>
        <category>ambari</category>
      </categories>
      <tags>
        <tag>ambari-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ambari-学习篇]]></title>
    <url>%2F2019%2F10%2F09%2Fambari-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[介绍(1). Ambari的作用:就是创建、管理、监视 Hadoop 的集群， 这里的Hadoop是广义，指的是Hadoop整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等） Ambari就是为了让Hadoop以及相关的大数据软件更容易使用的一个工具 (2). Ambari 自身也是一个分布式架构的软件，主要由两部分组成：Ambari Server 和 Ambari Agent。 用户通过 Ambari Server 通知 Ambari Agent 安装对应的软件； Agent 会定时地发送各个机器每个软件模块的状态给 Ambari Server，最终这些状态信息会呈现在 Ambari 的 GUI，方便用户了解到集群的各种状态，并进行相应的维护。]]></content>
      <categories>
        <category>ambari</category>
      </categories>
      <tags>
        <tag>ambari-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hbase-资料篇]]></title>
    <url>%2F2019%2F10%2F09%2Fhbase-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[HBase参考文档：HBase官网链接: https://hbase.apache.org/HBase官方文档: http://hbase.apache.org/book.htmlHBase+Spark整合参考: http://hbase.apache.org/book.html#sparkHBase中文文档: https://www.w3cschool.cn/hbase_doc/HBase教程文档: https://www.yiibai.com/hbase/hbase-help：http://hbase-help.com/HBase：https://pan.baidu.com/s/1jILzgnsCSDN HBase资料库：http://lib.csdn.net/hbase/node/734 知乎HBase讨论：https://www.zhihu.com/topic/19600820/hot HBase架构参考：深入HBase架构参考: https://blog.csdn.net/xiaolang85/article/details/70054783深入理解HBase架构: https://blog.csdn.net/Yaokai_AssultMaster/article/details/72877127HBase底层存储参考: http://www.cnblogs.com/bonelee/p/6279248.htmlHBase高性能分析: https://mp.weixin.qq.com/s/VCZz8rG9hIK7IKvbYLz0pQ HBase-AWS参考：HBase-AWS部署: https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-hbase.htmlHBase-AWS-S3: https://docs.aws.amazon.com/zh_cn/emr/latest/ReleaseGuide/emr-hbase-s3.htmlHBase+Hive参考: https://aws.amazon.com/cn/blogs/big-data/combine-nosql-and-massively-parallel-analytics-using-apache-hbase-and-apache-hive-on-amazon-emr/ HBase下载参考：官网版本：http://archive.apache.org/dist/hbase/ CDH版本(稳定,推荐)：http://archive.cloudera.com/cdh5/ Phoenix参考链接Phoenix官网: http://phoenix.apache.org/Phoenix下载: http://apache.fayea.com/phoenix/Phoenix下载: https://archive.apache.org/dist/phoenix/Phoenix-Github: https://github.com/apache/phoenix.git Phoenix加载数据：http://phoenix.apache.org/bulk_dataload.htmlPhoenix二级索引: http://phoenix.apache.org/secondary_indexing.htmlPhoenix安装参考: https://phoenix.apache.org/download.html#Installation ALI-Phoenix入门: https://help.aliyun.com/document_detail/53716.html?spm=a2c4g.11186623.4.1.mfLv99ALI-HBase指南: https://help.aliyun.com/document_detail/52209.html?spm=a2c4g.11186623.6.559.YisTAt HBase+Phoenix参考Phoenix入门到精通: https://yq.aliyun.com/articles/574090?spm=a2c4g.11186623.2.3.CCfNRUPhoenix链接HBase: https://blog.csdn.net/u010429286/article/details/70054232HBase整合Phoenix01: https://www.cnblogs.com/ballwql/p/8371234.htmlPhoenix命令参考: https://blog.csdn.net/high2011/article/details/72772462 HBase+Spark整合应用Spark访问HBase参考Spark访问HBase01: https://www.cnblogs.com/xing901022/p/8486290.html hortonworks-spark/shc github：https://github.com/hortonworks-spark/shcmaven仓库地址: http://mvnrepository.com/artifact/org.apache.hbase/hbase-sparkHbase spark sql/ dataframe官方文档：https://hbase.apache.org/book.html#_sparksql_dataframesHbase-spark 2.0.0-alpha4已经公开在maven仓库: http://mvnrepository.com/artifact/org.apache.hbase/hbase-spark Spark读写HBase参考HDP-SHC: https://github.com/hortonworks-spark/shc HBase-Java-API: https://www.cnblogs.com/liuwei6/p/6842536.htmlHBase-MapReduce: http://www.cnblogs.com/liuwei6/p/6855467.htmlHBase-Client-API: https://blog.csdn.net/vori2010/article/details/78536327HBaseClient基本操作: https://www.cnblogs.com/wzzkaifa/p/7323279.html HBase-Put操作: https://blog.csdn.net/dongbeiMan/article/details/51768251HBase-Put操作: https://blog.csdn.net/mianshui1105/article/details/53305966 Spark读写HBase: https://blog.csdn.net/u011812294/article/details/72553150Spark读写数据库: https://blog.csdn.net/zilong_zilong/article/details/52529263Spark统计HBase条数: https://blog.csdn.net/u012871493/article/details/52701289SparkSQL+HBase: https://hbase.apache.org/book.html#_sparksql_dataframesSpark-DataFrame-HBase: https://www.cnblogs.com/xing901022/p/8486290.html HBase自定义比较器: http://lucky-xingxing.iteye.com/blog/2185072 异常参考异常参考01: http://www.aboutyun.com/forum.php?mod=viewthread&amp;action=printable&amp;tid=17450]]></content>
      <categories>
        <category>hbase</category>
      </categories>
      <tags>
        <tag>hbase-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kudu-资料篇]]></title>
    <url>%2F2019%2F10%2F09%2Fkudu-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>kudu</category>
      </categories>
      <tags>
        <tag>kudu-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kudu-学习篇]]></title>
    <url>%2F2019%2F10%2F09%2Fkudu-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[介绍 Kudu是基于Hadoop平台的列式存储系统。 Kudu使用场景 适用于既有随机访问，也有批量数据扫描的复合场景 适用于高计算量的场景 充分利用高性能存储设备 支持数据更新，避免数据反复迁移 支持跨地域的实时数据备份和查询 Kudu的优势 支持update和upsert操作 结构化数据模型 与imapla或spark集成后，可通过sql操作，使用方便 一个table由多个tablet组成，对分区查看、扩容和数据高可用支持非常好 性能压测：写入性能测试 executor-cores=2 num-executors=30 executor-memory=4G小时级别写（LZ4 ）：源数据2000W行，38G，耗时1.4min，平均23w条/s。 小时级别写（ZLIB）：源数据1940W行，34.9G，耗时2min，平均16.2w条/s。 读取性能测试 executor-cores=2 num-executors=50 executor-memory=4G天级别读（LZ4 ）：源数据2.8亿行，541.7 G，耗时10min，平均46.6w条/s。 天级别读（ZLIB）：源数据3.2亿行，581.7 G，耗时15min，平均35.7w条/s。 增加新字段性能测试 executor-cores=2 num-executors=30 executor-memory=4G天级别增加（LZ4 ）：源数据4.74亿行，10个新列，耗时17min，平均46.5w条/s。（先读hive表，再选10列插入kudu中。所以其中包括读837G的text格式hive表全量读的时间，真实插入时间理应更少） 天级别增加（ZLIB）：源数据3.2亿行，10个新列，耗时12min，平均44.7w条/s。（包括读581G的text格式hive表全量读的时间） Kudu接口在KuduHandle.scala中封装了spark操作kudu的常用接口，在KuduHandleExample.scala中给出了Kudu接口的使用示例。 业务开发时可直接使用封装在 train_data_flow的dataflow-sdk中的方法，包括saveDFInsertKuduTable()、saveDFUpsertKuduTable()两种插入数据的方法，和读取kudu表数据的 kudu() 方法，以及addKuduColumns()加列方法。 接口使用注意事项：1、通过读数据 kudu() 接口返回的df，注册临时视图后可直接用sparkSQL读取， 但必须使用between或者in来指定range分区字段的范围（目前字段是hour_id）， 否则会变成全表扫描，效率极低！！！ 2、kudu引擎暂不支持sparkSQL中 &lt;、&gt;、or 这些谓词下推，支持like， 但仅限于“201907%”这种形式，不支持“201907%02”这种形式； （只要正确指定了range分区字段，其他字段对读取效率影响不大） 3、saveDFInsertKuduTable()用于base特征的小时级入库，会根据小时时间新建range分区， saveDFUpsertKuduTable()用于插入新列数据，除base数据的小时级入库外，皆用此方法插入数据； 4、待插入数据df必须包含所有的主键，且主键不可为空值； 5、删除kudu分区会同时删除分区内的数据，慎用。Alluxio FUSE 测试 IO基本性能测试，拷贝一个768M的文件。 读 130M/s 90M/s 写 80M/s 194M/s]]></content>
      <categories>
        <category>kudu</category>
      </categories>
      <tags>
        <tag>kudu-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clickhouse-资料篇]]></title>
    <url>%2F2019%2F10%2F09%2Fclickhouse-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>clickhouse-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kylin-问题篇]]></title>
    <url>%2F2019%2F10%2F09%2Fkylin-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[远程连接服务器数据库报错：Host ‘XXXXXX’ is blocked because of many connection errors问题描述： Kylin聚合任务MR作业运行时，报错：Host ‘XXXXXX’ is blocked because of many connection errors 错误原因： 同一ip在短时间内产生太多（超过mysql数据库max_connection_errors的最大值）终端的数据库连接而导致的阻塞； 解决方案（根据实际情况来选择解决方案）： 1、可以更改max_connection_errors的值，即提高允许的max_connection_errors的数量 （1）首先查看该属性设置为多大：命令：show global variables like &#39;%max_connect_errors%&#39;;如果需要永久生效，得去修改mysql配置文件里相应属性。可能配置文件里没有这个属性，需要自己手动添加 （2）注意： 当客户端连接服务端超时(超过connect_timeout), 服务端就会给这个客户端记录一次error，当出错的次数达到max_connect_errors的时候，这个客户端就会被锁定。所以根据业务来尽量把这个值设置大一点，mysql默认值为10，我们可以根据具体需要设置大一点，这里设置为1000.（并非越大越好，越大被攻击时安全性越低）； 2、使用清除缓存的方法，这样就会把计数清理掉，进入mysql控制台，执行：flush hosts; 参考链接：https://jingyan.baidu.com/album/9f7e7ec087dcbe6f2815542d.html]]></content>
      <categories>
        <category>kylin</category>
      </categories>
      <tags>
        <tag>kylin-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-资料篇]]></title>
    <url>%2F2019%2F10%2F09%2Fpython-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[廖雪峰 中国大学mocc Python - 100天从新手到大师 超实用的 30 段 Python 案例]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-学习篇]]></title>
    <url>%2F2019%2F10%2F09%2Fpython-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[编码规范http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/ 开发工具https://www.jetbrains.com/pycharm/ 常用库: pymysql httplib2 kafka kafka-python pymongo psycopg2 elasticsearch murmurhash3]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scala-资料篇]]></title>
    <url>%2F2019%2F10%2F09%2Fscala-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[官网：scala官网 易百：scala教程]]></content>
      <categories>
        <category>scala</category>
      </categories>
      <tags>
        <tag>scala-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scala-学习篇]]></title>
    <url>%2F2019%2F10%2F09%2Fscala-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>scala</category>
      </categories>
      <tags>
        <tag>scala-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码库-表达式scala校验]]></title>
    <url>%2F2019%2F10%2F09%2F%E4%BB%A3%E7%A0%81%E5%BA%93-%E8%A1%A8%E8%BE%BE%E5%BC%8Fscala%E6%A0%A1%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[Regex常用的方法findAllIn 方法找到line中所有符合正则的字符串，可以通过 toArray 方法来将匹配到的结果存放到 Array 中。也可以方法哦for循环中，遍历出符合条件的匹配。 findFirstIn 只匹配第一个符合正则的字符串就停止了设备id 校验val deviceIdReg = &quot;^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$&quot;.r # EF453E92-B6D0-48B9-912B-A156B5C6B90F def validateDeviceId(deviceId: String): Boolean = { deviceIdReg.findFirstMatchIn(deviceId).isDefined } 查找匹配部分val p = &quot;[0-9]+&quot;.r p.findAllIn(&quot;2 ad 12ab ab21 23&quot;).toList // List(2, 12, 21, 23) p.findFirstMatchIn(&quot;abc123xyz&quot;).get // scala.util.matching.Regex.Match = 123参考资料： 1.正则表达式（regular expression）以及常用语法]]></content>
      <categories>
        <category>代码库</category>
      </categories>
      <tags>
        <tag>代码库-表达式scala校验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-设计模式]]></title>
    <url>%2F2019%2F09%2F30%2Fjava-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java-设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elasticsearch-资料篇]]></title>
    <url>%2F2019%2F09%2F30%2Felasticsearch-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[死磕Elasticsearch方法论]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[课程学习]]></title>
    <url>%2F2019%2F09%2F30%2F%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[优化深入JVM内核 - 原理、诊断与优化链接：http://pan.baidu.com/s/1geQsMcF 密码：wins 解压密码：WxIqq%VJ8sQE9#Mq@WWW.MuKeDaBa.COMpython马哥Python全栈+爬虫+高端自动化课程链接：https://pan.baidu.com/s/1GbGnix9-_TDFIrCUuRFcBA 提取码：saf9 解压密码：www.mukedaba.com python编程快速上手，让繁琐工作自动化链接：http://pan.baidu.com/s/1c1M5vhA 密码：4hmk python实战：四周实现爬虫系统链接：http://pan.baidu.com/s/1qYiqJmc 密码：hf20 解压密码：www.mukedaba.com python自动化运维+web监控系统链接: http://pan.baidu.com/s/1nuxcuJv 密码: 7qnk 解压密码：www.mukedaba.com_pymaintenance面试课程2016年面试班BAT、阿里、谷歌视频教程14课高清长课时附ppt 链接：http://pan.baidu.com/s/1gf1aVfH 密码：d0gp解压密码：www.17zixueba.com7ysfmis14%]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>课程学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea-使用篇]]></title>
    <url>%2F2019%2F09%2F30%2Fidea-%E4%BD%BF%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[资料 IntelliJ IDEA，使用心得汇总]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea-使用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[haproxy-资料篇]]></title>
    <url>%2F2019%2F09%2F29%2Fhaproxy-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[高负载均衡学习haproxy之关键词介绍高负载均衡学习haproxy之配置文件详解高负载均衡学习haproxy之安装与配置 高负载均衡学习haproxy之TCP应用 haproxy与nginx、zabbix集成haproxy学习之https配置haproxy学习之手机规则匹配 HAProxy用法详解 全网最详细中文文档]]></content>
      <categories>
        <category>haproxy</category>
      </categories>
      <tags>
        <tag>haproxy-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[haproxy-常用篇]]></title>
    <url>%2F2019%2F09%2F29%2Fhaproxy-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[安装 mac 安装 安装：brew install haproxy 查看版本：haproxy -v 创建haproxy.cfg 文件 检测文件：haproxy -c -f /usr/local/etc/haproxy.cfg 执行文件： haproxy -f /usr/local/etc/haproxy.cfg -d 配置文件模版 # 全局配置 global log 127.0.0.1 local0 # 设置日志 log 127.0.0.1 local1 notice maxconn 4000 # 最大连接数 chroot /usr/local/haproxy # 安装目录 user haproxy group haproxy daemon # 守护进程运行 #nbproc 1 # 进程数量，只能用于守护进程模式的haproxy；默认启动一个进程，一般只在单进程仅能打开少数文件描述符的场景中才使用多进程模式； pidfile /var/run/haproxy.pid # 默认配置 defaults log global mode http # 默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK option httplog # http 日志格式 option dontlognull # 不记录健康检查日志信息； option redispatch # serverId对应的服务器挂掉后,强制定向到其他健康的服务器 option http-server-close #option abortonclose # 当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接； #option forwardfor # 如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip； #option httpclose # 主动关闭http通道,每次请求完毕后主动关闭http通道,ha-proxy不支持keep-alive,只能模拟这种模式的实现; balance roundrobin # 负载均衡算法,轮询； retries 3 # 重试次数； timeout http-request 10s # 客户端建立连接但不请求数据时，关闭客户端连接； timeout queue 1m # 等待最大时长； timeout connect 10s # 定义haproxy将客户端请求转发至后端服务器所等待的超时时间； timeout client 1m # 客户端非活动状态的超长时间(默认毫秒) timeout server 1m # 客户端与服务器建立连接后，等待服务器端的超时时长(默认毫秒) timeout http-keep-alive 10s # 定义保持连接的超时时长； timeout check 10s # 心跳检测超时； maxconn 3000 # 每个server最大的连接数； # 统计页面配置 listen admin_stats bind 0.0.0.0:50000 # 监听IP和端口，为了安全可以设置本机的局域网IP及端口； mode http option httplog # 采用http日志格式 stats refresh 30s # 统计页面自动刷新时间 stats uri /haproxy?stats # 状态管理页面，通过/haproxy?stats来访问 stats realm Haproxy Manager # 统计页面密码框上提示文本 stats auth admin:psadmin # 统计页面用户名和密码设置 #stats hide-version # 隐藏统计页面上HAProxy的版本信息 #errorfile 403 /usr/local/haproxy/examples/errorfiles/ #设置haproxy 错误页面 #前端配置（多个frontend 必须绑定不同的IP或者端口，否则数据会串，导致映射到不同的后端而报错） frontend http_main bind 0.0.0.0:80 # http请求的端口，会被转发到设置的ip及端口 # 转发规则 #acl url_yuming path_beg www.yuming.com #use_backend server_yuming if url_yuming # 默认跳转项，当上面都没有匹配上，就转到backend的http_default上； default_backend http_default # 提升失败的时候的用户体验 #errorfile 502 /usr/local/haproxy/examples/errorfiles/502.http #errorfile 503 /usr/local/haproxy/examples/errorfiles/503.http #errorfile 504 /usr/local/haproxy/examples/errorfiles/504.http # 后端配置 backend http_default # 额外的一些设置，按需使用 option forwardfor option forwardfor header Client-IP option http-server-close option httpclose # 负载均衡方式 #source 根据请求源IP #static-rr 根据权重 #leastconn 最少连接先处理;在有着较长时间会话的场景中推荐使用此算法，如LDAP、SQL等，其并不太适用于较短会话的应用层协议，如HTTP；此算法是动态的， #uri 根据请求的uri #url_param 根据请求的url参数 #rdp-cookie 据据cookie(name)来锁定并哈希每一次请求 #hdr(name) 根据HTTP请求头来锁定每一次HTTP请求 #roundrobin 轮询方式 balance roundrobin # 负载均衡的方式,轮询方式 # 设置健康检查页面 #option httpchk GET /index.html #传递客户端真实IP option forwardfor header X-Forwarded-For # 需要转发的ip及端口 # inter 2000 健康检查时间间隔2秒 # rise 3 检测多少次才认为是正常的 # fall 3 失败多少次才认为是不可用的 # weight 30 权重 server node1 192.168.1.101:8080 check inter 2000 rise 3 fall 3 weight 30 server node2 192.168.1.101:8081 check inter 2000 rise 3 fall 3 weight 30 配置介绍 global: nbproc 默认是 1 ，我的 CPU 是 4 核 8 线程，这里就设置成了 8 backend: &lt;your server ip&gt; 、 &lt;port&gt; 替换成你的 SS 服务器 IP 和端口 backend: check 健康检查 backend: inter 心跳频率 backend: rise 将服务器标记为可用 的次数 backend: fall 将服务器标记为不可用 的次数 实战 1.启动hiveServer nohup hive --service hiveserver2 --hiveconf hive.fetch.task.conversion=none --hiveconf hive.exec.scratchdir=/tmp/hive-hadoop-offline --hiveconf hive.exec.local.scratchdir=/tmp/hive-root --hiveconf hive.server2.enable.doAs=false --hiveconf hive.server2.long.polling.timeout=50000 --hiveconf hive.root.logger=INFO,console --hiveconf hive.exec.mode.local.auto=false --hiveconf hadoop.proxyuser.root.groups=* --hiveconf hadoop.proxyuser.root.hosts=* --hiveconf hive.server2.webui.port=10034 --hiveconf hive.server2.thrift.port=10035 --hiveconf hive.mapred.reduce.tasks.speculative.execution=false --hiveconf hive.mapred.map.tasks.speculative.execution=false --hiveconf mapreduce.job.reduce.slowstart.completedmaps=1 &gt; ./hiveServer_10035.log&amp; 2.配置haproxy.cfg global daemon nbproc 1 pidfile /data/hiveServer_service/haproxy/pid ulimit-n 65535 defaults mode tcp retries 2 option redispatch option abortonclose maxconn 1024 timeout connect 1d timeout client 1d timeout server 1d timeout check 2000 log 127.0.0.1 local0 err listen admin_stats bind 0.0.0.0:10021 mode http maxconn 10 stats refresh 30s stats uri / stats realm Hive\ Haproxy stats auth admin:123456 listen hive_common bind 0.0.0.0:10025 mode tcp balance roundrobin maxconn 1024 server hive_common_01_10009 127.0.0.1:10009 check inter 180000 rise 1 fall 2 server hive_common_02_10011 127.0.0.1:10011 check inter 180000 rise 1 fall 2 server hive_common_03_10013 127.0.0.1:10013 check inter 180000 rise 1 fall 2 listen hive_dataplatform_offline bind 0.0.0.0:10023 mode tcp balance roundrobin maxconn 1024 server hive_dataplatform_offline_01_10015 127.0.0.1:10015 check inter 180000 rise 1 fall 2 server hive_dataplatform_offline_02_10017 127.0.0.1:10017 check inter 180000 rise 1 fall 2 listen hive_scientist_offline bind 0.0.0.0:10026 mode tcp balance roundrobin maxconn 1024 server hive_scientist_offline_01_10031 127.0.0.1:10031 check inter 180000 rise 1 fall 2 server hive_scientist_offline_02_10033 127.0.0.1:10033 check inter 180000 rise 1 fall 2]]></content>
      <categories>
        <category>haproxy</category>
      </categories>
      <tags>
        <tag>haproxy-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql-常用篇]]></title>
    <url>%2F2019%2F09%2F29%2Fmysql-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[mysql-mac 安装brew install mysql unset TMPDIR mysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql --tmpdir=/tmp配置信息 conf /usr/local/etc/my.cnf]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kafka-常用篇]]></title>
    <url>%2F2019%2F09%2F29%2Fkafka-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[启动kafka sh bin/kafka-server-start.sh config/server.properties 创建topic 分区数sh kafka-topics.sh --create --topic kafkatopic --replication-factor 1 --partitions 1 --zookeeper localhost:2181查看topicbash bin/kafka-topics.sh --list --zookeeper localhost:2181 启动producersh kafka-console-producer.sh --broker-list localhost:9092 --sync --topic kafkatopic 启动consumersh kafka-console-consumer.sh --zookeeper localhost:2181 --topic kafkatopic --from-beginning]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心灵笔录]]></title>
    <url>%2F2019%2F09%2F29%2F%E5%BF%83%E7%81%B5%E7%AC%94%E5%BD%95%2F</url>
    <content type="text"><![CDATA[凡事都有因果，万事皆有源头 不是要做到对，而是要做到位 正因为难所以值钱 简单粗暴高效，慢的话你连地铁都挤不上 编程不编不成 不会，立刻马上去学 天上飞的理念，必有落地实现。 自律方能自由。 用进废退. 小孩子才有正错，成年人的世界只有利弊成败。 选择重于努力，方向重于速度。 人家有背景，你有的是背影。 今天的最后表现是明天的最低要求。自古成功靠强迫。 刻意的训练+考点的重复。今天的优势会被以后的趋势所取代。 千羊在外，不如一鸟在手。 多于同好争高下，不与傻逼论长短。 没有无所谓，只有做到位。 成大事的男人：第一不要脸，第二坚持不要脸，第三坚持长期不要脸。 烧不死的鸟才是火凤凰。 适用用尽则祸必来。 好的开始是成功的全部。 今天没有学习，明天就没有竞争力。 不要写问好的人，只要写句号的人。 职场上只有0和100。 程序员分类：1.功能型程序员 2.性能型程序员 男人的尊严是打出来的 职业化，专业化。 深深的水，静静地流。 狼性生存法则。 复杂复杂才是真。 认真就赢了。 怕啰嗦就一次做到位。 少就事多（专一）。 出来混，野蛮生长。 帮你是情分，不帮是本分。 不会游泳，不停地换游泳池是没用的。 脾气不要打过你的本事。 加以时日你也行,但这些时日必须做到值得你铭记。 工作起来像蚂蚁，生活起来像蝴蝶。 若儿女情长，必英雄气短。 跟对人，才能做对事。 要想人前显贵，必定人后受罪。 年轻人时间最重要。 先投资自己的脑袋，再考虑自己的口袋 你做不到不一定别人做不到。 先顺着别人来，让他满意，然后再说特殊情况，来让他吃惊。 雄心的一半是耐心 打败你的一定不是硬硬的困难，一定是软绵绵的诱惑。 态度、行动、精神。 深度的思考，重于刻苦的勤奋 程序员的懒是高度、深度、深刻的懒（深度思考） 不要用你战术上的勤奋掩盖你战略上的懒惰。 最舒服的日子永远是昨天。 莫把行情当能力。 拿钱来赚时间。 人弱万事难。 当你没有见过最好的，你就常常以为自己所拥有的就是最好的，从而将自己禁锢在自己的小世界里，忘记了世界之大。 一个见过大世面的人，会讲究能将就，能享受最好的，也能承受最坏的。 人生不能省去的三件事：学习、旅游、健身。 昨天的最好表现，是今天的最低要求 以后你流的泪是当初脑子进的水 生于忧患，死于安乐 在中国干事有四个字：前提条件。 跟女人的香水一样，闻闻可以，千万别喝。 既然球场上要有人赢，为什么不是我。 你还能比现在还差吗？ 职场上只有线程直播没有彩排 互联网只有作战和备战状态 伸头一刀缩头也是一刀，怕什么，伸头砍。 地狱的尽头是天堂。 想跳得高，要蹲着久(攒足了劲，一猛子跳起来) 北京专治各种不服 领导给一个？要竭尽全力还他一个。（简单粗暴） 日工一足，怕的是放弃 一个人至少拥有一个梦想，有一个理由去坚强。心若没有栖息的地方，到哪里都是在流浪 不停的走下去就对了，人不可能一辈子走背字。 都是一肩膀扛着一个脑袋，别人能做到的，你也能做到，做不到那时你还不够努力. 不攀，（不攀比权贵，如果你想有，可以通过自己的努力）， 不嫉（不嫉妒别人）， 不恶（不毁）， 不弃（不放弃提升自己） 要想有机会，首先你得从人群中冒出来，要想冒出来，你就必须做到与众不同，要做到与众不同，你就要做得更多！ 芝兰生于深谷，不以无人而不芳。君子修身养德，不以穷困而改志。 生活太安逸了，工作就会被生活所累 管住嘴，迈开腿]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>心灵笔录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试资料]]></title>
    <url>%2F2019%2F09%2F25%2F%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[面试必刷 揭秘：月薪30~40K的程序员，在业内算什么水平？ Tech Interview Guide 技术面试必备基础知识、Leetcode 题解、设计模式、Java、C++、Python、后端面试、操作系统、计算机网络、系统设计 flink-40问 语言类 java java-常见面试集合 scala scala sql 知识扩展： 推荐系统实现 用户行为数据收集系统-(1)简介 用户行为数据收集系统–(2)客户端SDK设计 用户行为数据收集系统–(3)数据接收端设计 大数据世界 思想指导： 指导 招聘面试的套路与原则 程序员，为什么写不好一份简历？]]></content>
      <categories>
        <category>面试资料</category>
      </categories>
      <tags>
        <tag>面试资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[promethus-问题篇]]></title>
    <url>%2F2019%2F09%2F25%2Fpromethus-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[address already in use 报错信息： error starting web server: listen tcp 0.0.0.0:9090: bind: address already in use 解决方法： lsof -i :9090 sudo kill -9 prot]]></content>
      <categories>
        <category>promethus</category>
      </categories>
      <tags>
        <tag>promethus-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[promethus-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Fpromethus-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[prometheus 介绍1.prometheus负责从pushgateway和job中采集数据， 存储到后端Storatge中，可以通过PromQL进行查询,推送alerts信息到AlertManager。 AlertManager根据不同的路由规则进行报警通知. 2.可以很好地记录任何纯数字时间序列。 它既适合以机器为中心的监视，也适合高度动态的面向服务的体系结构的监视。在微服务的世界中，它对多维数据收集和查询的支持是一个特别的优势。 普罗米修斯是为可靠性而设计的，它是您在停机期间使用的系统，允许您快速诊断问题。 每台普罗米修斯服务器都是独立的，不依赖于网络存储或其他远程服务。 当您的基础设施的其他部分被破坏时，您可以依赖它，并且您不需要设置广泛的基础设施来使用它。Metrics 类型Counter（计数器）#获取样本数据 node_cpu{cpu=&quot;cpu0&quot;,mode=&quot;idle”} #通过rate()函数获取HTTP请求量的增长率 rate(http_requests_total[5m]) # 查询当前系统中，访问量前10的HTTP地址： topk(10, http_requests_total)Gauge 可增可减的仪表盘预测系统磁盘空间在4个小时之后的剩余情况： predict_linear(node_filesystem_free{job=&quot;node&quot;}[1h], 4 * 3600)Histogram和Summary分析数据分布情况 PromQL基础常用函数参考 https://prometheus.io/docs/prometheus/latest/querying/functions/ 基本函数语法prometheus_http_requests_total 等价于 prometheus_http_requests_total{}#####条件筛选 prometheus_http_requests_total{instance=&quot;localhost:9090”} 不满足条件 prometheus_http_requests_total{instance!=&quot;localhost:9090”}支持使用正则表达式作为匹配条件，多个表达式之间使用|进行分离： 使用label=~regx表示选择那些标签符合正则表达式定义的时间序列； 反之使用label!~regx进行排除 http_requests_total{environment=~&quot;staging|testing|development&quot;,method!=&quot;GET”}范围查询例如：查询最近5分钟 http_request_total{}[5m] s - 秒 m - 分钟 h - 小时 d - 天 w - 周 y - 年瞬时向量表达式或者区间向量表达式中，都是以当前时间为基准 http_request_total{} # 瞬时向量表达式，选择当前最新的数据 http_request_total{}[5m] # 区间向量表达式，选择以当前时间为基准，5分钟内的数据如果我们想查询，5分钟前的瞬时样本数据，或昨天一天的区间内的样本数据呢?，一天前5分钟内的样本数据？ 这个时候我们就可以使用位移操作，位移操作的关键字为offset http_request_total{} offset 5m http_request_total{}[1d] offset 1d http_request_total{}[5m] offset 1d获取前3个top 值 topk(3,prometheus_http_requests_total{instance=~&quot;$node&quot;}[1m])聚合操作 查询系统所有http请求的总量 sum(http_request_total) 按照mode计算主机CPU的平均使用时间 avg(node_cpu) by (mode) 按照主机查询各个主机的CPU使用率 sum(sum(irate(node_cpu{mode!=&#39;idle&#39;}[5m])) / sum(irate(node_cpu[5m]))) by (instance)irate平均值 节点中每分钟请求的平均值 irate（prometheus_http_requests_total{instance=~&quot;$node&quot;}[1m]）支持的算法： (加法) - (减法) * (乘法) / (除法) % (求余) ^ (幂运算)]]></content>
      <categories>
        <category>promethus</category>
      </categories>
      <tags>
        <tag>promethus-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cassandra-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fcassandra-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Youte 视频DataStax Accelerate 2019 — Full Session Recordings： https://www.youtube.com/playlist?list=PLm-EPIkBI3YpJbuKUGDlZVNHzT0umcBSl 大概85个视频，涉及到cassandra各个方面。 下次会议是 https://apachecon.com/acna19/s/#/schedule?search=cassandra 可以关注下 https://issues.apache.org/jira/browse/CASSANDRA-11815在线文档Cassandra文档 前辈实践https://zqhxuyuan.github.io/tags/cassandra/]]></content>
      <categories>
        <category>cassandra</category>
      </categories>
      <tags>
        <tag>cassandra-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zeppelin-问题篇]]></title>
    <url>%2F2019%2F09%2F25%2Fzeppelin-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[hive task 失败 报错信息： ERROR [bc60fbe1-ee2a-49e5-8932-231b92250134 main] ql.Driver: FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapRedTask问题原因： 作业被kill 掉后，会出现以上信息。 Apache zeppelin process died 报错信息： Apache zeppelin process died解决方法: 服务失败，重启服务 ps -ef | grep &quot;zeppelin&quot; kill -9 pid sudo bin/zeppelin-daemon.sh restart 权限问题，无法执行 报错信息： shell_web_path is: http://zeppeline.com:8070/file/. shell/xianchang.yue Job 20190815-140750_2122347662 finished by scheduler org.apache.zeppelin.interpreter.remote.RemoteInterpreter-shell::2EHURB1RG-shared_session解决方法： 切换当前，shell的目录为可执行的目录 chown -R XXX:XXX shell/ connection refused 错误 报错原因： 可能正在使用过期的开发终端节点。尝试创建新的开发终端节点并重新连接。 解决方法：(推荐第一种，不可以后再选择第二种) 1.重新创建新的note 进行执行。会建立新的连接。 2.连接超时或由于任何原因停止工作，则您可能需要采取以下步骤来还原它： (1). 在 Zeppelin 中，在页面右上角的下拉菜单中，选择 Interpreters (解释器)。在解释器页面上，搜索 spark。选择 edit，然后清除 Connect to existing process 复选框。在页面底部选择 Save。 (2). 如前所述启动 SSH 端口转发。 (3). 在 Zeppelin 中，重新启用 spark 解释器的 Connect to existing process 设置，然后再次保存。 像这样重置解释器应该会恢复连接。另一种实现方法是在 Interpreters 页面上为 Spark 解释器选择 restart。然后，等待最多 30 秒，以确保远程解释器已重新启动。]]></content>
      <categories>
        <category>zeppelin</category>
      </categories>
      <tags>
        <tag>zeppelin-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grafana-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fgrafana-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[grafana 安装和配置#####常用配置地址 配置： 配置文件应位于/usr/local/etc/grafana/grafana.ini。 日志： 日志文件应位于/usr/local/var/log/grafana/grafana.log。 插件： 如果你想手动安装一个插件，请点击此处：/usr/local/var/lib/grafana/plugins。 数据库： 默认的sqlite数据库位于 /usr/local/var/lib/grafana下载安装wget https://dl.grafana.com/oss/release/grafana-6.3.5.linux-amd64.tar.gz tar -zxvf grafana-6.3.5.linux-amd64.tar.gz conf/grafana.ini ./bin/grafana-server webmac 安装方式安装：brew install grafana 执行：brew services start grafana 重启：brew services restart grafana 快捷键1. 鼠标放在图标上，按 ‘e’ 直接启动编辑模式 2. grafana settingGeneral 仪表盘的基本信息 Annotations 注解，一般很少使用 Variables当前定义的值将在制作仪表盘的时候使用。 变量 和定义 Name Description demo label_names() Returns a list of label names. label_values(label) Returns a list of label values for the label in every metric. label_values(metric, label) Returns a list of label values for the label in the specified metric. label_values(grafana_instance_start_total, instance) 返回所有granfana的instance 的值 metrics(metric) Returns a list of metrics matching the specified metric regex. query_result(query) Returns a list of Prometheus query result for the query. Dashboard LinksVersions 记录用户修改版本时间 PermissionsJSON Modelgrafana 集成ldapgrafana集成ldap]]></content>
      <categories>
        <category>grafana</category>
      </categories>
      <tags>
        <tag>grafana-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fnginx-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[zabbix-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fzabbix-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[promethus-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fpromethus-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Prometheus2.13官方文档中文翻译 prometheus-系列篇 prometheus-实战篇 prometheus-操作篇 prometheus以优雅的姿势监控kubernetes]]></content>
      <categories>
        <category>promethus</category>
      </categories>
      <tags>
        <tag>promethus-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[promethus-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fpromethus-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[1.模版案例scrape_configs: - job_name: &#39;example-random&#39; # Override the global default and scrape targets from this job every 5 seconds. scrape_interval: 5s static_configs: - targets: [&#39;localhost:8070&#39;, &#39;localhost:8071&#39;] labels: group: &#39;production&#39; - targets: [&#39;localhost:8072&#39;] labels: group: ‘canary&#39; 2.基本使用查看进程端口： pgrep -f prometheus 解决端口占用： lsof -i :9090 sudo kill -9 prot 启动进程： ./prometheus --config.file=prometheus.yml]]></content>
      <categories>
        <category>promethus</category>
      </categories>
      <tags>
        <tag>promethus-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hadoop-问题篇]]></title>
    <url>%2F2019%2F09%2F25%2Fhadoop-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[hadoop streaming执行 hadoop streaming 的时候，加载了太多的文件而导致 内存溢出错误：java.lang.OutOfMemoryError:Java heap space解决方法： 在你的程序里设置以下环境变量值： export HADOOP_CLIENT_OPTS=&quot;-Xmx2048m&quot;MapReduce保持以下异常信息时：报错信息： Container [pid=81565,containerID=container_1489372757489_79086_01_000031] is running beyond physical memory limits. Current usage: 1.8 GB of 1.8 GB physical memory used; 3.4 GB of 8.8 GB virtual memory used. Killing container.解决方案： 说明你的代码存在内存泄露的风险，尝试优化代码，如果确定不存在内存泄露的情况， 可以在你代码里设置以下参数，增加map端或者reduce端的内存大小： mapreduce.map.memory.mb=3072 mapreduce.reduce.memory.mb=3072Mapreduce在运行时，在map阶段出现以下内存溢出问题：Error: Java heap space解决方案： 提交作业时增加以下两个参数设置，可以根据程序使用内存的大小调整参数的大小： -Dmapreduce.map.memory.mb=3072 -Dmapred.map.child.java.opts=-Xmx3072m如何设置MR作业推测执行mapreduce.map.speculative=true// 打开map端推测执行 mapreduce.reduce.speculative=true// 打开reduce端推测执行 推测执行的原理： 当某一个map或者reduce执行比较慢时，集群会再开启一个计算单元， 计算该map或者reduce正在计算的数据，哪一个先计算完成，就使用先计算完成的结果， 没有计算完成的map或者reduce会被kill掉。 开启推测执行，有一点需要注意下： &gt; map端或者reduce端不能产生结果性的数据。 &gt; “结果性的数据”，没有一个明确性的定义， 这里举个栗子：map端或者reduce端往目标数据库（例如RDS）里写入了数据，这就是产生了结果性的数据。]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hadoop-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hadoop-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fhadoop-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[hadoop 命令 cat 将路径指定文件的内容输出到stdout。 示例： hadoop fs -cat hdfs://host1:port1/file1hdfs://host2:port2/file2 hadoop fs -cat file:///file3 /user/hadoop/file4 dus 使用方法：hadoop fs -dus &lt;args&gt;显示文件的大小 test 使用方法：hadoop fs -test -[ezd] URI 选项： -e 检查文件是否存在。如果存在则返回0。 -z 检查文件是否是0字节。如果是则返回0。 -d 如果路径是个目录，则返回1，否则返回0。 示例： hadoop fs -test -e filename 查看.gz 的文件内容 *无需解压整个文件： hadoop fs -cat /hdfs_location/part-00000.gz | zcat | head -n 20 或者 hadoop fs -cat /hdfs_location/part-00000.gz | zmore *需要解压整个文件： hadoop fs -text /myfolder/part-r-00024.gz | tail 查看.bz2 的文件内容 类似查看.gz的方法，只需将zcat换为bzcat， 或者将zmore换为bzmore即可yarn 命令查看 application列表 : yarn application -list 查看单独的logs 日志： yarn logs -applicationId application_1493700892407_0007 yarn logs -applicationId application_1542870632001_26426 &gt; ./application.log查看当前作业的状态： yarn application -status application_1542870632001_26426kill 当前作业 yarn application -kill application_1542870632001_26426 #####查看yarn-site.xml，确定log配置目录以及集群ip yarn rest API作业状态资源使用情况hadoop 集群配置日志清理相关参数： key : mapreduce.jobhistory.max-age-ms value : 2592000000 (30天) descrption：负责清理hdfs路径下日志 /var/hadoop/mapred/mr-history/done key : yarn.log-aggregation.retain-seconds value : 2592000 （30天） description：负责清理hdfs路径下日志 /var/hadoop/yarn/${user}/logs 服务器上的本地日志在任务执行完进行日志聚合之后会自动进行删除，不过老数据目前还没有清理。日志相关参数1) yarn.log-aggregation-enable 是否开启日志聚合功能 2) yarn.log-aggregation.retain-seconds hdfs上的日志保留多久。当前配置路径为：/var/hadoop/yarn/${user}/logs 3) yarn.log-aggregation.retain-check-interval-seconds 多长时间检查一次日志，并将满足条件的删除，如果是0或者负数，则为上一个值的1/10，已经配置为：1296000（15天） 4) yarn.nodemanager.remote-app-log-dir 前缀目录：/var/hadoop/yarn 5) yarn.nodemanager.remote-app-log-dir-suffix 后缀目录：logs 6) yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds 每隔一段时间进行日志的聚合，当前配置为：3600。如果配置为-1，则会等待任务执行完还会聚合日志聚合参数配置yarn.log-aggregation-enable 参数说明：是否启用日志聚合功能，日志聚合开启后保存到HDFS上。默认值：false yarn.log-aggregation.retain-seconds 参数说明：聚合后的日志在HDFS上保存多长时间，单位为s。默认值：-1（不启用日志聚合），例如设置为86400，24小时 yarn.log-aggregation.retain-check-interval-seconds 参数说明：删除任务在HDFS上执行的间隔，执行时候将满足条件的日志删除（超过参数2设置的时间的日志），如果是0或者负数，则为参数2设置值的1/10，上例值在此处为8640s。默认值：-1 yarn.nodemanager.log.retain-seconds 参数说明：当不启用日志聚合此参数生效，日志文件保存在本地的时间，单位为s。默认值：10800 yarn.nodemanager.remote-app-log-dir 参数说明：当应用程序运行结束后，日志被转移到的HDFS目录（启用日志聚集功能时有效），修改为保存的日志文件夹。默认值：/tmp/logs yarn.nodemanager.remote-app-log-dir-suffix 参数说明：远程日志目录子目录名称（启用日志聚集功能时有效）。默认值：logs 日志将被转移到目录${yarn.nodemanager.remote-app-log-dir}/${user}/${thisParam}下]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>hadoop-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[airflow-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fairflow-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>airflow</category>
      </categories>
      <tags>
        <tag>airflow-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[azkaban-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fazkaban-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>azkaban</category>
      </categories>
      <tags>
        <tag>azkaban-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kylin-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fkylin-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[kylin 配置文件参考配置文件位置：/home/hadoop/local/kylin/kylin.properties # #### METADATA | ENV ### # ## The metadata store in hbase kylin.metadata.url=hbase:tb_kylin_metadata@hbase ##Kylin元数据存储在hbase的数据库hbase:tb_kylin_metadata中 # ## metadata cache sync retry times kylin.metadata.sync-retries=3 # ## Working folder in HDFS, better be qualified absolute path, make sure user has the right permission to this directory # kylin.env.hdfs-working-dir=/mnt/kylin # ### Kylin的中间数据存储在S3中 kylin.env.hdfs-working-dir=s3a://mob-emr-test/kylin/work kylin.storage.hbase.cluster-fs=s3a://mob-emr-test kylin.source.hive.redistribute-flat-table=false # ## DEV|QA|PROD. DEV will turn on some dev features, QA and PROD has no difference in terms of functions. #kylin.env=QA # # ### Kylin节点间的协调基于ZK kylin.env.zookeeper-base-path=/zk-olap-kylin # #### SERVER | WEB | RESTCLIENT ### # ## Kylin server mode, valid value [all, query, job] kylin.server.mode=all # ## List of web servers in use, this enables one web server instance to sync up with other servers. ### Kylin中的cluster节点 kylin.server.cluster-servers=ip-172-31-23-207:7070,ip-172-31-28-59:7070,ip-172-31-31-99:7070 #kylin.server.cluster-servers=ip-172-31-31-99:7070 # ## Display timezone on UI,format like[GMT+N or GMT-N] kylin.web.timezone=GMT+8 kylin.web.dashboard-enabled=true # kylin.cube.cubeplanner.enabled=true kylin.server.query-metrics2-enabled=true kylin.metrics.reporter-query-enabled=true kylin.metrics.reporter-job-enabled=true kylin.metrics.monitor-enabled=true # ## Timeout value for the queries submitted through the Web UI, in milliseconds #kylin.web.query-timeout=300000 # #kylin.web.cross-domain-enabled=true # ##allow user to export query result #kylin.web.export-allow-admin=true #kylin.web.export-allow-other=true # ## Hide measures in measure list of cube designer, separate by comma #kylin.web.hide-measures=RAW # ##max connections of one route #kylin.restclient.connection.default-max-per-route=20 # ##max connections of one rest-client #kylin.restclient.connection.max-total=200 # #### PUBLIC CONFIG ### ### Kylin中默认的聚合引擎2表示MR，4表示Spark kylin.engine.default=4 kylin.storage.default=2 # #kylin.web.hive-limit=20 #kylin.web.help.length=4 #kylin.web.help.0=start|Getting Started|http://kylin.apache.org/docs/tutorial/kylin_sample.html #kylin.web.help.1=odbc|ODBC Driver|http://kylin.apache.org/docs/tutorial/odbc.html #kylin.web.help.2=tableau|Tableau Guide|http://kylin.apache.org/docs/tutorial/tableau_91.html #kylin.web.help.3=onboard|Cube Design Tutorial|http://kylin.apache.org/docs/howto/howto_optimize_cubes.html #kylin.web.link-streaming-guide=http://kylin.apache.org/ #kylin.htrace.show-gui-trace-toggle=false #kylin.web.link-hadoop= #kylin.web.link-diagnostic= #kylin.web.contact-mail= #kylin.server.external-acl-provider= # #### SOURCE ### # kylin.source.hive.quote-enabled=true # ## Hive client, valid value [cli, beeline] ### Kylin连接Hive数据库的方式 kylin.source.hive.client=beeline #kylin.source.hive.client=cli # ## Absolute path to beeline shell, can be set to spark beeline instead of the default hive beeline on PATH kylin.source.hive.beeline-shell=/data/hadoop-alternative/hive/bin/beeline # ## Parameters for beeline client, only necessary if hive client is beeline ### Kylin连接Hive的hiveserver2服务的参数配置 ##kylin.source.hive.beeline-params=-u jdbc:hive2://ip-172-31-31-99:10000 -n hadoop --hiveconf hive.security.authorization.sqlstd.confwhitelist.append=&#39;mapreduce.job.*|dfs.*&#39; kylin.source.hive.beeline-params=-u jdbc:hive2://ip-172-31-8-144:10000 -n hadoop --hiveconf hive.security.authorization.sqlstd.confwhitelist.append=&#39;mapreduce.job.*|dfs.*&#39; # ## While hive client uses above settings to read hive table metadata, ## table operations can go through a separate SparkSQL command line, given SparkSQL connects to the same Hive metastore. kylin.source.hive.enable-sparksql-for-table-ops=true # ##kylin.source.hive.sparksql-beeline-shell=/data/hadoop-alternative/hive/bin/beeline kylin.source.hive.sparksql-beeline-shell=/data/hadoop-alternative/spark/bin/beeline ### Kylin通过SparkSQL连接的hiveserver2服务的参数配置 ##kylin.source.hive.sparksql-beeline-params=-u jdbc:hive2://ip-172-31-31-99:10000 -n hadoop --hiveconf hive.security.authorization.sqlstd.confwhitelist.append=&#39;mapreduce.job.*|dfs.*&#39; kylin.source.hive.sparksql-beeline-params=-u jdbc:hive2://ip-172-31-8-144:10000 -n hadoop --hiveconf hive.security.authorization.sqlstd.confwhitelist.append=&#39;mapreduce.job.*|dfs.*&#39; # kylin.source.hive.keep-flat-table=false # ## Hive database name for putting the intermediate flat tables kylin.source.hive.database-for-flat-table=db_olap_kylin # ## Whether redistribute the intermediate flat table before building kylin.source.hive.redistribute-flat-table=false # kylin.source.hive.config-override.hive.mapred.mode=nonstrict kylin.source.hive.config-override.mapreduce.job.queuename=dataplatform # # #### STORAGE ### # ## The storage for final cube file in hbase kylin.storage.url=hbase # ## The prefix of hbase table kylin.storage.hbase.table-name-prefix=TB_KYLIN_ # ## The namespace for hbase storage kylin.storage.hbase.namespace=ns_olap_kylin ##kylin.storage.hbase.namespace=NS_OLAP_KYLIN # ## Compression codec for htable, valid value [none, snappy, lzo, gzip, lz4] kylin.storage.hbase.compression-codec=snappy # ## HBase Cluster FileSystem, which serving hbase, format as hdfs://hbase-cluster:8020 ## Leave empty if hbase running on same cluster with hive and mapreduce ##kylin.storage.hbase.cluster-fs= # ## The cut size for hbase region, in GB. kylin.storage.hbase.region-cut-gb=5 # ## The hfile size of GB, smaller hfile leading to the converting hfile MR has more reducers and be faster. ## Set 0 to disable this optimization. kylin.storage.hbase.hfile-size-gb=2 # kylin.storage.hbase.min-region-count=5 kylin.storage.hbase.max-region-count=500 ##kylin.hbase.default.compression.codec=snappy # ## Optional information for the owner of kylin platform, it can be your team&#39;s email ## Currently it will be attached to each kylin&#39;s htable attribute #kylin.storage.hbase.owner-tag=whoami@kylin.apache.org # #kylin.storage.hbase.coprocessor-mem-gb=3 # ## By default kylin can spill query&#39;s intermediate results to disks when it&#39;s consuming too much memory. ## Set it to false if you want query to abort immediately in such condition. #kylin.storage.partition.aggr-spill-enabled=true # ## The maximum number of bytes each coprocessor is allowed to scan. ## To allow arbitrary large scan, you can set it to 0. #kylin.storage.partition.max-scan-bytes=3221225472 # ## The default coprocessor timeout is (hbase.rpc.timeout * 0.9) / 1000 seconds, ## You can set it to a smaller value. 0 means use default. ## kylin.storage.hbase.coprocessor-timeout-seconds=0 # # #### JOB ### # kylin.job.scheduler.default=2 kylin.job.lock=org.apache.kylin.storage.hbase.util.ZookeeperJobLock # ## Max job retry on error, default 0: no retry kylin.job.retry=2 # ## Max count of concurrent jobs running kylin.job.max-concurrent-jobs=10 # ## The percentage of the sampling, default 100% kylin.job.sampling-percentage=70 # ## kylin.job.mr.lib.dir=/data/hadoop-alternative/hive/lib # ## kylin.job.mr.config.override.mapreduce.map.java.opts=-Xmx4g ## kylin.job.mr.config.override.mapreduce.map.memory.mb=4096 ## kylin.job.mr.config.override.mapreduce.job.queuename=dataplatform # ## If true, will send email notification on job complete ## kylin.job.notification-enabled=true ## kylin.job.notification-mail-enable-starttls=true ## kylin.job.notification-mail-host=smtp.office365.com ## kylin.job.notification-mail-port=587 ## kylin.job.notification-mail-username=kylin@example.com ## kylin.job.notification-mail-password=mypassword ## kylin.job.notification-mail-sender=kylin@example.com # kylin.source.kafka.config-override.partition.assignment.strategy=org.apache.kafka.clients.consumer.RoundRobinAssignor # #### ENGINE ### # kylin.engine.mr.config-override.mapreduce.job.queuename=dataplatform kylin.engine.mr.config-override.mapreduce.map.java.opts=-Xmx4g -XX:+UseG1GC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark kylin.engine.mr.config-override.mapreduce.map.memory.mb=4096 # #kylin.engine.mr.lib-dir=/data/hadoop-alternative/hbase/lib #kylin.engine.mr.lib-dir=/data/hadoop-alternative/hive/lib kylin.engine.mr.lib-dir=/home/hadoop/local/kylin/ext # ## Time interval to check hadoop job status kylin.engine.mr.yarn-check-interval-seconds=10 # kylin.engine.mr.reduce-input-mb=500 # kylin.engine.mr.min-reducer-number=5 kylin.engine.mr.max-reducer-number=300 # kylin.engine.mr.mapper-input-rows=500000 # ## Enable dictionary building in MR reducer kylin.engine.mr.build-dict-in-reducer=true # ## Number of reducers for fetching UHC column distinct values kylin.engine.mr.uhc-reducer-count=5 # ## Whether using an additional step to build UHC dictionary kylin.engine.mr.build-uhc-dict-in-additional-step=true # # #### CUBE | DICTIONARY ### # #kylin.cube.cuboid-scheduler=org.apache.kylin.cube.cuboid.DefaultCuboidScheduler #kylin.cube.segment-advisor=org.apache.kylin.cube.CubeSegmentAdvisor # ## &#39;auto&#39;, &#39;inmem&#39;, &#39;layer&#39; or &#39;random&#39; for testing #kylin.cube.algorithm=layer # ## A smaller threshold prefers layer, a larger threshold prefers in-mem #kylin.cube.algorithm.layer-or-inmem-threshold=7 # #kylin.cube.aggrgroup.max-combination=32768 # #kylin.snapshot.max-mb=300 # #kylin.cube.cubeplanner.enabled=true #kylin.cube.cubeplanner.enabled-for-existing-cube=true #kylin.cube.cubeplanner.expansion-threshold=15.0 #kylin.cube.cubeplanner.recommend-cache-max-size=200 #kylin.cube.cubeplanner.mandatory-rollup-threshold=1000 #kylin.cube.cubeplanner.algorithm-threshold-greedy=8 #kylin.cube.cubeplanner.algorithm-threshold-genetic=23 # # #### QUERY ### # ## Controls the maximum number of bytes a query is allowed to scan storage. ## The default value 0 means no limit. ## The counterpart kylin.storage.partition.max-scan-bytes sets the maximum per coprocessor. #kylin.query.max-scan-bytes=0 # #kylin.query.cache-enabled=true # ## Controls extras properties for Calcite jdbc driver ## all extras properties should undder prefix &quot;kylin.query.calcite.extras-props.&quot; ## case sensitive, default: true, to enable case insensitive set it to false ## @see org.apache.calcite.config.CalciteConnectionProperty.CASE_SENSITIVE #kylin.query.calcite.extras-props.caseSensitive=true ## how to handle unquoted identity, defualt: TO_UPPER, available options: UNCHANGED, TO_UPPER, TO_LOWER ## @see org.apache.calcite.config.CalciteConnectionProperty.UNQUOTED_CASING #kylin.query.calcite.extras-props.unquotedCasing=TO_UPPER ## quoting method, default: DOUBLE_QUOTE, available options: DOUBLE_QUOTE, BACK_TICK, BRACKET ## @see org.apache.calcite.config.CalciteConnectionProperty.QUOTING #kylin.query.calcite.extras-props.quoting=DOUBLE_QUOTE ## change SqlConformance from DEFAULT to LENIENT to enable group by ordinal ## @see org.apache.calcite.sql.validate.SqlConformance.SqlConformanceEnum #kylin.query.calcite.extras-props.conformance=LENIENT # ## TABLE ACL #kylin.query.security.table-acl-enabled=true # ## Usually should not modify this #kylin.query.interceptors=org.apache.kylin.rest.security.TableInterceptor # #kylin.query.escape-default-keyword=false # ## Usually should not modify this #kylin.query.transformers=org.apache.kylin.query.util.DefaultQueryTransformer,org.apache.kylin.query.util.KeywordDefaultDirtyHack # #### SECURITY ### # ## Spring security profile, options: testing, ldap, saml ## with &quot;testing&quot; profile, user can use pre-defined name/pwd like KYLIN/ADMIN to login kylin.security.profile=ldap # ## Admin roles in LDAP, for ldap and saml #kylin.security.acl.default-role=ROLE_ANALYST,ROLE_MODELER kylin.security.acl.default-role=ROLE_ADMIN #kylin.security.acl.admin-role=data_platform kylin.security.acl.admin-role=common # ## LDAP authentication configuration kylin.security.ldap.connection-server=ldap://acsldap.mobvista.com:389 kylin.security.ldap.connection-username=uid=gateway,ou=open,dc=mobvista,dc=com kylin.security.ldap.connection-password=5U0dB4Ir9g3mdJgUdiwrFUhXZZkUDPNE7s7OvSXioSk= # ## LDAP user account directory; kylin.security.ldap.user-search-base=ou=acs,dc=mobvista,dc=com kylin.security.ldap.user-search-pattern=uid={0} kylin.security.ldap.user-group-search-base=ou=groups,dc=mobvista,dc=com #kylin.security.ldap.user-group-search-filter=(&amp;(uid=gateway)(|(memberOf=cn=data_platform,ou=groups,dc=mobvista,dc=com)(memberOf=cn=data_platform_admin,ou=groups,dc=mobvista,dc=com))) # ## LDAP service account directory kylin.security.ldap.service-search-base=ou=acs,dc=mobvista,dc=com kylin.security.ldap.service-search-pattern=uid={0} kylin.security.ldap.service-group-search-base=ou=groups,dc=mobvista,dc=com # ### SAML configurations for SSO ## SAML IDP metadata file location #kylin.security.saml.metadata-file=classpath:sso_metadata.xml #kylin.security.saml.metadata-entity-base-url=https://localhost:7070/kylin #kylin.security.saml.keystore-file=classpath:samlKeystore.jks #kylin.security.saml.context-scheme=https #kylin.security.saml.context-server-name=localhost #kylin.security.saml.context-server-port=443 #kylin.security.saml.context-path=/kylin # kylin.server.auth-user-cache.expire-seconds=500 kylin.server.auth-user-cache.max-entries=0 #### SPARK ENGINE CONFIGS ### # ## Hadoop conf folder, will export this as &quot;HADOOP_CONF_DIR&quot; to run spark-submit ## This must contain site xmls of core, yarn, hive, and hbase in one folder kylin.env.hadoop-conf-dir=/data/hadoop-alternative/hadoop/etc/hive-hadoop ## Enable Spark for Distinct kylin.engine.spark-fact-distinct=false # ## Estimate the RDD partition numbers #kylin.engine.spark.rdd-partition-cut-mb=10 # ## Minimal partition numbers of rdd #kylin.engine.spark.min-partition=5 # ## Max partition numbers of rdd #kylin.engine.spark.max-partition=5000 # ## Spark conf (default is in spark/conf/spark-defaults.conf) #kylin.engine.spark-conf.spark.master=yarn #kylin.engine.spark-conf.spark.submit.deployMode=cluster #kylin.engine.spark-conf.spark.yarn.queue=default #kylin.engine.spark-conf.spark.driver.memory=4G #kylin.engine.spark-conf.spark.executor.memory=4G #kylin.engine.spark-conf.spark.executor.instances=40 #kylin.engine.spark-conf.spark,yarn.executor.memoryOverhead=1024 #kylin.engine.spark-conf.spark.shuffle.service.enabled=true #kylin.engine.spark-conf.spark.eventLog.enabled=true #kylin.engine.spark-conf.spark.eventLog.dir=hdfs\:///mnt/kylin/spark-history #kylin.engine.spark-conf.spark.history.fs.logDirectory=hdfs\:///mnt/kylin/spark-history #kylin.engine.spark-conf.spark.hadoop.yarn.timeline-service.enabled=false #kylin.engine.spark-conf.spark.kryo.registrationRequired=false # ## Spark conf for specific job #kylin.engine.spark-conf-mergedict.spark.executor.memory=6G #kylin.engine.spark-conf-mergedict.spark.memory.fraction=0.2 # ## manually upload spark-assembly jar to HDFS and then set this property will avoid repeatedly uploading jar at runtime #kylin.engine.spark-conf.spark.yarn.archive=hdfs://datacluster/mnt/kylin/dataplatform/spark_lib.zip #kylin.engine.spark-conf.spark.io.compression.codec=org.apache.spark.io.SnappyCompressionCodec # kylin.engine.spark-conf.spark.master=yarn kylin.engine.spark-conf.spark.submit.deployMode=cluster kylin.engine.spark-conf.spark.shuffle.service.enabled=true kylin.engine.spark-conf.spark.dynamicAllocation.enabled=true kylin.engine.spark-conf.spark.dynamicAllocation.minExecutors=10 kylin.engine.spark-conf.spark.dynamicAllocation.maxExecutors=150 kylin.engine.spark-conf.spark.dynamicAllocation.initialExecutors=10 kylin.engine.spark-conf.spark.dynamicAllocation.executorIdleTimeout=180 kylin.engine.spark-conf.spark.yarn.queue=dataplatform kylin.engine.spark-conf.spark.driver.memory=6G kylin.engine.spark-conf.spark.executor.memory=8G kylin.engine.spark-conf.spark.executor.cores=1 kylin.engine.spark-conf.spark.executor.instances=100 kylin.engine.spark-conf.spark.executor.memoryOverhead=4096 kylin.engine.spark-conf.spark.eventLog.enabled=false kylin.engine.spark-conf.spark.hadoop.dfs.replication=2 kylin.engine.spark-conf.spark.hadoop.mapreduce.output.fileoutputformat.compress=true kylin.engine.spark-conf.spark.hadoop.mapreduce.output.fileoutputformat.compress.codec=org.apache.hadoop.io.compress.DefaultCodec kylin.engine.spark-conf.spark.io.compression.codec=org.apache.spark.io.SnappyCompressionCodec # kylin.engine.spark-conf.spark.eventLog.dir=hdfs\:///mnt/kylin/spark-history kylin.engine.spark-conf.spark.history.fs.logDirectory=hdfs\:///mnt/kylin/spark-history kylin.engine.spark-conf.spark.hadoop.yarn.timeline-service.enabled=false kylin.engine.spark-conf.spark.kryo.registrationRequired=false kylin.engine.spark-conf.spark.default.parallelism=500 kylin.engine.spark-conf.spark.speculation=true kylin.engine.spark-conf.spark.speculation.multiplier=2 kylin.engine.spark-conf.spark.speculation.quantile=0.5 # kylin.engine.spark-conf.spark.network.timeout=600 kylin.engine.spark-conf.spark.rpc.askTimeout=600 kylin.engine.spark-conf.spark.rpc.lookupTimeout=600 kylin.engine.spark-conf.spark.executor.heartbeatInterval=300 kylin.engine.spark-conf.spark.shuffle.io.maxRetries=30 kylin.engine.spark-conf.spark.shuffle.io.retryWait=60 kylin.engine.spark-conf.spark.shuffle.registration.timeout=30000 kylin.engine.spark-conf.spark.shuffle.file.buffer=64k kylin.engine.spark-conf.spark.shuffle.memoryFraction=0.3 kylin.engine.spark-conf.spark.shuffle.compress=true ##kylin.engine.spark-conf.spark.shuffle.manager=hash kylin.engine.spark-conf.spark.shuffle.consolidateFiles=true kylin.engine.spark-conf.spark.sql.shuffle.partitions=1000 # ## uncomment for HDP #kylin.engine.spark-conf.spark.driver.extraJavaOptions=-Dhdp.version=current #kylin.engine.spark-conf.spark.yarn.am.extraJavaOptions=-Dhdp.version=current #kylin.engine.spark-conf.spark.executor.extraJavaOptions=-Dhdp.version=current # kylin.engine.spark-conf.spark.driver.extraJavaOptions=-Dhdp.version=3.0.1.0-187 kylin.engine.spark-conf.spark.yarn.am.extraJavaOptions=-Dhdp.version=3.0.1.0-187 kylin.engine.spark-conf.spark.executor.extraJavaOptions=&quot;-Dhdp.version=3.0.1.0-187 -XX:+UseG1GC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark&quot; # # #### QUERY PUSH DOWN ### # ##kylin.query.pushdown.runner-class-name=org.apache.kylin.query.adhoc.PushDownRunnerJdbcImpl # ##kylin.query.pushdown.update-enabled=false ##kylin.query.pushdown.jdbc.url=jdbc:hive2://sandbox:10000/default ##kylin.query.pushdown.jdbc.driver=org.apache.hive.jdbc.HiveDriver ##kylin.query.pushdown.jdbc.username=hive ##kylin.query.pushdown.jdbc.password= # ##kylin.query.pushdown.jdbc.pool-max-total=8 ##kylin.query.pushdown.jdbc.pool-max-idle=8 ##kylin.query.pushdown.jdbc.pool-min-idle=0 # #### JDBC Data Source ##kylin.source.jdbc.connection-url= ##kylin.source.jdbc.driver= ##kylin.source.jdbc.dialect= ##kylin.source.jdbc.user= ##kylin.source.jdbc.pass= ##kylin.source.jdbc.sqoop-home= ##kylin.source.jdbc.filed-delimiter=]]></content>
  </entry>
  <entry>
    <title><![CDATA[kylin-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fkylin-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Kylin官网 | 中文 Kylin配置 Cube样例 Cube构建 Kylin参考 Kyllin-Calcite Kylin-API参考 Kylin的Github Kylin的Jenkins Kylin的jira链接 Kylin开发指南 Kylin打包二进制文件]]></content>
      <categories>
        <category>kylin</category>
      </categories>
      <tags>
        <tag>kylin-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kylin-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Fkylin-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[官网:链接 KOD参考链接基于Druid的Kylin存储引擎实践: https://mp.weixin.qq.com/s/y0wxLqtCkYcc-kLMmtawYAKylin Cube构建原理: https://blog.bcmeng.com/post/kylin-cube.htmlDruid Storage原理: https://blog.bcmeng.com/post/druid-storage.htmlKylin On Druid Storage原理与实践: https://blog.bcmeng.com/post/kylin-on-druid-storage.html]]></content>
      <categories>
        <category>kylin</category>
      </categories>
      <tags>
        <tag>kylin-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[superset-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fsuperset-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>superset</category>
      </categories>
      <tags>
        <tag>superset-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[superset-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fsuperset-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
      <categories>
        <category>superset</category>
      </categories>
      <tags>
        <tag>superset-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zeppelin-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Fzeppelin-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[zeppelin-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fzeppelin-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[clickhouse-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Fclickhouse-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[介绍 ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。 ClickHouse官方中文文档| ClickHouse官方英文文档 Performance comparison of analytical DBMS OLAP场景的关键特征大多数是读请求数据总是以相当大的批(&gt; 1000 rows)进行写入不修改已添加的数据每次查询都从数据库中读取大量的行，但是同时又仅需要少量的列宽表，即每个表包含着大量的列较少的查询(通常每台服务器每秒数百个查询或更少)对于简单查询，允许延迟大约50毫秒列中的数据相对较小： 数字和短字符串(例如，每个URL 60个字节)处理单个查询时需要高吞吐量（每个服务器每秒高达数十亿行）事务不是必须的对数据一致性要求低每一个查询除了一个大表外都很小查询结果明显小于源数据，换句话说，数据被过滤或聚合后能够被盛放在单台服务器的内存中 列式数据库更适合于OLAP场景(对于大多数查询而言，处理速度至少提高了100倍)，下面详细解释了原因(通过图片更有利于直观理解）： 行式： 列式: 性能测试官方测试工具：clickhouse benchmark远程测试工具：ab -n 50 -c 10 ‘http://ip:8123/&#39; Spark 读取性能测试1.m_sys_mode（340个字段）： 写入一天 m_sys_model，每小时约 1000万~2000万条记录，平均耗费时长约 2min ~ 3min 读取一小时数据耗费时长约 1min ~ 2min，20w/s 2.ods_dmp_user_info（9个字段，23亿条记录）： 写入耗费时长约 30~40min 通过Spark 读取性能较低，读取 20w/s，三台机器CPU长时间飙至 1500%，影响其他分析类查询，故不适合做大批量读操作。 Cassandra 读取性能测试40~50w/snum-executors 50 executor-cores 4 executor-memeory 8G 16minnum-executors 50 executor-cores 4 executor-memeory 8G [安装部署参考](https://clickhouse.yandex/docs/en/getting_started/）]]></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>clickhouse-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven-问题篇]]></title>
    <url>%2F2019%2F09%2F25%2Fmaven-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[maven thread “main” java.lang.StackOverflowError 保存信息： maven thread &quot;main&quot; java.lang.StackOverflowError at org.codehaus.plexus.archiver.AbstractArchiver$1.hasNext(AbstractArchiver.java:481) 解决方法： 方法一（亲测可以）： https://www.jianshu.com/p/5444c660ea87 Maven -&gt; Runner -&gt;VM Options , 设置 -Xmx512m -Xms128m -Xss2m 即可 方法二： 在pom.xml 中加上 &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt;]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fmaven-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[maven 常用命令打包并跳过测试mvn package -Dmaven.test.skip=true编译调试mvn -X package -Dmaven.test.skip=true 如果你想控制Maven的日志级别，你可以使用下面三个命令行选项： -e， --errors 产生执行错误相关消息 -X， --debug 产生执行调试信息 -q， --quiet 仅仅显示错误安装jarmvn install:install-file -Dfile=jar包的位置 -DgroupId=org.apache.flink -DartifactId=flink-connector-cassandra_2.11 -Dversion=1.8.0 -Dpackaging=jar mvn install --define maven.test.skip=true]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fredis-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[hive-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fhive-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[redis-常用篇]]></title>
    <url>%2F2019%2F09%2F25%2Fredis-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[java-guava篇]]></title>
    <url>%2F2019%2F09%2F25%2Fjava-guava%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[java-多线程篇]]></title>
    <url>%2F2019%2F09%2F25%2Fjava-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[java-JVM篇]]></title>
    <url>%2F2019%2F09%2F25%2Fjava-JVM%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[java-基础篇]]></title>
    <url>%2F2019%2F09%2F25%2Fjava-%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[mysql-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fmysql-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[hive-资料篇]]></title>
    <url>%2F2019%2F09%2F25%2Fhive-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[hive-问题篇]]></title>
    <url>%2F2019%2F09%2F25%2Fhive-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[####1.hql出现类似以下异常 异常信息： Starting to launch local task to process map join; maximum memory = 301465600 Execution failed with exit status: 2解决方案：尝试增加以下设置： set hive.auto.convert.join=false;关闭自动转化MapJoin，默认为true; set hive.ignore.mapjoin.hint=false; 关闭忽略mapjoin的hints（不忽略，hints有效），默认为true(忽略hints)。####2.执行hql的时，加载了太多的文件而导致 内存溢出错误：java.lang.OutOfMemoryError:Java heap space 解决方法： 在你的程序里设置以下环境变量值： export HADOOP_CLIENT_OPTS=&quot;-Xmx2048m&quot;####3.hive在切换或者升级metadata元数据信息库时，增加分区任务可能会出现以下问题： 任务执行是成功的，但是切换了metadata数据库后，发现该分区数据丢失。 原因：造成此问题的原因是由于执行成功的任务把元数据信息写入到旧的元数据库里，切换时没有同步到新的元数据信息库里。 解决方法：切换新的元数据信息库后，需要人工检查下分区数据信息，保证分区数据不丢失。####4.Failed to create temp property file cause: java.io.IOException: 设备上没有空间 原因：服务器的磁盘空间已满。 解决方法：清理磁盘。####5.自定义SerDe的使用方法： 创建SerDe:mobvista.dataplatform.text.TextSerde hive表的使用方法： CREATE EXTERNAL TABLE dm_campaign_tag_like PARTITIONED BY ( year string, month string, day string ) ROW FORMAT SERDE &#39;com.text.TextSerde&#39; WITH SERDEPROPERTIES (&#39;schema.url&#39;=&#39;s3://tag.avsc&#39;) STORED AS TEXTFILE LOCATION &#39;s3://DataWareHouse/data/dwh/dm_campaign_tag_like&#39; TBLPROPERTIES ( &#39;schema.url&#39;=&#39;s3://DataWareHouse/schema/dwh/tag.avsc&#39; ); 修改hive表的属性： ALTER TABLE ods_adn_trackingnew_click_like SET TBLPROPERTIES (&#39;schema.url&#39; = &#39;s3://click.avsc&#39;); 修改表的serde和属性 ALTER TABLE ods_adn_trackingnew_click_like SET SERDE &#39;mobvista.dataplatform.text.TextSerde&#39;; ALTER TABLE ods_adn_trackingnew_click_like SET SERDEPROPERTIES (&#39;schema.url&#39; = &#39;s3://DataWareHouse/schema/dwh/ods_adn_trackingv3_click/ods_adn_trackingv3_click.avsc&#39;); 修改表分区的serde属性 ALTER TABLE ods_adn_trackingnew_click_like partition(yyyy=&#39;2017&#39;,mm=&#39;06&#39;,dd=&#39;16&#39;,re=&#39;virginia&#39;,hh=&#39;00&#39;) SET SERDEPROPERTIES (&#39;schema.url&#39; = &#39;s3://click.avsc&#39;); ####6.hive添加分区的时候偶尔会出现以下问题： case 1: Caused by: java.sql.BatchUpdateException: Duplicate entry &#39;admin&#39; for key &#39;ROLEENTITYINDEX&#39; 这主要是由于hive的metastore数据被修改造成的。 只需要把失败的任务重新执行即可，这是因为metastore在并发比较高时，客户端无法在超时时间内获取到结果信息而导致的异常，重新执行即可。case 2: Caused by: MetaException(message:Metastore contains multiple versions) 首先删除matestore数据库当中重复的版本信息： mysql -ip -u* -p* -Dhive_db -e &#39;delete from VERSION where VER_ID &lt;&gt; 1;commit;&#39; 然后重新执行失败的任务，错误原因同case1一样，也是由于metastore在并发比较高时，客户端无法获取到hive的版本信息，从而插入VERSION表一条版本信息数据，而造成的版本信息冗余，从而导致的异常。 以上两种case偶尔会发生，说明在某一个时间节点，metastore的性能达到了瓶颈，需要优化和提升metastore的性能，可以从以下几点入手解决该问题： 1，提升metastore数据库服务器的性能指标，例如：io，memory等； 2，优化metastore的写入和查询性能，可以从缓存和事务入手； 3，修改hive客户端配置，hive的conf配置文件里有一项是配置读取metastore的超时时间的，参数项为：hive.stats.jdbc.timeout，默认参数值为30s，可以适当放到该参数项的值。####7.Caused by: java.lang.ClassNotFoundException: org.apache.commons.logging.impl.SLF4JLocationAwareLog 造成该问题的主要原因是由于系统环境变量里找不到这个jar：jcl-over-slf4j-1.7.16.jar 需要在执行hql之前手动添加下, 添加命令为：add jar /data/hadoop-alternative/spark/jars/jcl-over-slf4j-1.7.16.jar;####8.如何使用hive模拟mysql的自增id INSERT INTO TABLE customer_dim SELECT ROW_NUMBER() OVER (ORDER BY t1.customer_number) + t2.sk_max, t1.customer_number, t1.customer_name FROM ( SELECT t1.* FROM customer t1 LEFT JOIN customer_dim t2 ON t1.customer_number = t2.customer_number WHERE t2.customer_sk IS NULL ) t1 CROSS JOIN (SELECT COALESCE(MAX(customer_sk),0) sk_max FROM customer_dim) t2;]]></content>
      <categories>
        <category>hive</category>
      </categories>
      <tags>
        <tag>hive-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hive-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Fhive-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[mysql-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Fmysql-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[linux-学习篇]]></title>
    <url>%2F2019%2F09%2F25%2Flinux-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[学习资料参考 马哥教育内部讲义 linux就该这么学]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flink-实战篇]]></title>
    <url>%2F2019%2F09%2F25%2Fflink-%E5%AE%9E%E6%88%98%E7%AF%87%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[mysql-问题篇]]></title>
    <url>%2F2019%2F09%2F25%2Fmysql-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[报错信息笔记（引用链接） 以下链接是各路豪杰整理 沧海一粟-MySQL错误笔记 RROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’ (2) 报错信息： Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (2) 解决方法： 主要原因是mysql 服务没有启动 解决：mysql.server start om.mysql.jdbc.exceptions.jdbc4.CommunicationsException: 报错信息： om.mysql.jdbc.exceptions.jdbc4.CommunicationsException:The last packet successfully received from the server was 44,024,462 milliseconds ago. The last packet sent successfully to the server was 44,024,462 milliseconds ago. is longer than the server configured value of &#39;wait_timeout&#39;. You should consider either expiring and/or testing connection validity before use in your application, increasing the server configured values for client timeouts, or using the Connector/J connection property &#39;autoReconnect=true&#39; to avoid this problem. 解决方法： 1.在连接上添加这个设置 &amp;autoReconnect=true&amp;failOverReadOnly=false 2.每次使用完记得归还连接 ERROR! The server quit without updating PID file 报错信息： $ mysql.server start Starting MySQL . ERROR! The server quit without updating PID file (/usr/local/var/mysql/localhost.pid). 解决方法： 0.用sudo 的权限执行。 sudo mysql.server start 1.可能是/usr/local/mysql/data/rekfan.pid文件没有写的权限 解决方法 ：给予权限，执行 “chown -R mysql:mysql /var/data” “chmod -R 755 /usr/local/mysql/data” 然后重新启动mysqld！ 2.可能进程里已经存在mysql进程 解决方法：用命令“ps -ef|grep mysqld”查看是否有mysqld进程，如果有使用“kill -9 进程号”杀死，然后重新启动mysqld！ 3.可能是第二次在机器上安装mysql，有残余数据影响了服务的启动。 解决方法：去mysql的数据目录/data看看，如果存在mysql-bin.index，就赶快把它删除掉吧，它就是罪魁祸首了。本人就是使用第三条方法解决的 ！http://blog.rekfan.com/?p=186 4.mysql在启动时没有指定配置文件时会使用/etc/my.cnf配置文件，请打开这个文件查看在[mysqld]节下有没有指定数据目录(datadir)。 解决方法：请在[mysqld]下设置这一行：datadir = /usr/local/mysql/data 5.skip-federated字段问题 解决方法：检查一下/etc/my.cnf文件中有没有没被注释掉的skip-federated字段，如果有就立即注释掉吧。 6.错误日志目录不存在 解决方法：使用“chown” “chmod”命令赋予mysql所有者及权限 7.selinux惹的祸，如果是centos系统，默认会开启selinux 解决方法：关闭它，打开/etc/selinux/config，把SELINUX=enforcing改为SELINUX=disabled后存盘退出重启机器试试。 Formula mysql is not installed 报错信息： brew services restart mysql Stopping `mysql`... (might take a while) ==&gt; Successfully stopped `mysql` (label: homebrew.mxcl.mysql) Error: Formula `mysql` is not installed. 解决方法： 查看mysql 的版本 brew services start mysql@5.7 ==&gt; Successfully started `mysql@5.7` (label: homebrew.mxcl.mysql@5.7)mysql 密码忘记或修改解决方案方法1： 用SET PASSWORD命令 首先登录MySQL。 格式：mysql&gt; set password for 用户名@localhost = password(‘新密码’); 例子：mysql&gt; set password for root@localhost = password(‘123’); 方法2：用mysqladmin 格式：mysqladmin -u用户名 -p旧密码 password 新密码 例子：mysqladmin -uroot -p123456 password 123 方法3：用UPDATE直接编辑user表 首先登录MySQL。 mysql&gt; use mysql; mysql&gt; update user set password=password(‘123’) where user=’root’ and host=’localhost’; mysql&gt; flush privileges; 方法4：在忘记root密码的时候，可以这样 以windows为例： 1. 关闭正在运行的MySQL服务。 2. 打开DOS窗口，转到mysql\bin目录。 3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。 5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 6. 连接权限数据库： use mysql; 。 6. 改密码：update user set password=password(“123”) where user=”root”;（别忘了最后加分号） 。 7. 刷新权限（必须步骤）：flush privileges; 。 8. 退出 quit。 9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zeppelin-常用篇]]></title>
    <url>%2F2019%2F09%2F15%2Fzeppelin-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[安装解释器#解释器所有安装 ./bin/install-interpreter.sh --all #解释器可安装列表 ./bin/install-interpreter.sh --list #解释器安装单独的 ./bin/install-interpreter.sh --name kylin ./bin/install-interpreter.sh --name livy hive 使用作业名设置``` %hive set mapred.job.name=zeppelin_hive_xianchang.yue; ``` shell 使用参数优化``` %shell set mapred.child.java.opts; mapred.child.java.opts=-Xmx1536m -Xms1536m -Xmn256m -XX:SurvivorRatio=6 -XX:MaxPermSize=128m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=80 -XX:GCTimeLimit=90 -XX:GCHeapFreeLimit=10 -XX:ParallelGCThreads=8 ```执行hive``` %shell export HADOOP_CLIENT_OPTS=&quot;-Xmx4096m $HADOOP_CLIENT_OPTS&quot; hive -e &quot; select * from test &quot;&gt;&gt;./template_size.txt ``` spark 使用spark 执行优化``` %spark.conf spark.app.name zeppeline_custom_conf spark.driver.memory 3g spark.executor.memory 2g spark.dynamicAllocation.enabled true spark.dynamicAllocation.minExecutors 10 spark.dynamicAllocation.maxExecutors 50 spark.executor.cores 3 spark.shuffle.service.enabled true ``` spark Streaming 执行``` %spark import org.apache.spark.streaming._ import org.apache.spark.streaming.StreamingContext import org.apache.spark.streaming.StreamingContext._ import org.apache.spark.streaming.dstream.DStream import org.apache.spark.streaming.Duration import org.apache.spark.streaming.Seconds val ssc = new StreamingContext(sc, Seconds(1)) ```执行后数据保存文件%spark import org.apache.spark.sql.types._ val sql_str =&quot;select * from test&quot; val df = sqlContext.sql(sql_str) val out_put_path = &quot;s3://tmp/tag_1&quot; df.repartition(1).write.format(&quot;csv&quot;).option(&quot;delimiter&quot;, &quot;\t&quot;).option(&quot;header&quot;, true).option(&quot;inferSchema&quot;, true).mode(&quot;overwrite&quot;).save(out_put_path) python 使用保存文件``` %python import commands print commands.getoutput(&quot;sh /var/tools/hadoop/download_file.sh&quot;+&quot; &quot;+z.input(&quot;s3下载目录:&quot;)+&quot; &quot;+z.input(&quot;保存目录:如 zhangsan/test01&quot;)+&quot; &quot; +z.input(&quot;保存文件名&quot;)) ```读取文件%python import urllib2 data = urllib2.urlopen(&quot;http://zeppeline.com:8060/file/shell/product/shellppp_demo.xls&quot;) for line in data: print line ####kyline的安装 Livy的集成Livy-env.sh livy.spark.master = yarn livy.spark.deploy-mode = cluster livy.repl.enable-hive-context = true livy.server.host 主机地址，默认为 0.0.0.0； livy.server.port 端口号，默认为 8998； livy.server.session.timeout-check 是否检测会话超时，默认为 true； livy.server.session.timeout 会话超时时间，默认为 1h； livy.server.session.state-retain.sec 已完成会话保留时间，默认为 600s； livy.rsc.jars RSC JAR 包位置，缓存在 HDFS 上，可以加速会话的启动速度； livy.repl.jars REPL JAR 包位置，缓存在 HDFS 上，可以加速会话的启动速度； livy.server.yarn.poll-interval YARN 状态刷新频率，默认为 5s； livy.ui.enabled 是否启动 UI 界面，默认为 true； 部署中遇到的问题：Spark 问题： https://www.oipapio.com/question-713829]]></content>
      <categories>
        <category>zeppelin</category>
      </categories>
      <tags>
        <tag>zeppelin-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[指导思想]]></title>
    <url>%2F2019%2F08%2F05%2F%E6%8C%87%E5%AF%BC%E6%80%9D%E6%83%B3%2F</url>
    <content type="text"><![CDATA[学习方法： 3 w 学习 提问的智慧：连接 一万小时定论：一万小时定论 其他 工作中如何做好技术积累 学习新技术的10个技巧 如何快速处理线上故障]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>指导思想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hbase-学习篇]]></title>
    <url>%2F2019%2F07%2F29%2Fhbase-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[####HBase的简介 HBase是一个分布式的、面向列的开源数据库，该技术来源于 Fay Chang 所撰写的Google论文“Bigtable：一个结构化数据的分布式存储系统”； 就像Bigtable利用了Google文件系统（File System）所提供的分布式数据存储一样，HBase在Hadoop之上提供了类似于Bigtable的能力； HBase是Apache的Hadoop项目的子项目。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库； 另一个不同的是HBase基于列的而不是基于行的模式；一张表的列簇不会超过5个，每个列簇中的列数没有限制； ####HBase的特点 容量大：HBase单表可以有上百亿行、百万列，数据矩阵横向和纵向两个维度所支持的数据量级都非常具有弹性； 面向列：HBase是面向列的存储和权限控制，并支持独立检索。列式存储，其数据在表中是按照某列存储的，这样在查询只需要少数几个字段的时候，能大大减少读取的数据量； 多版本：HBase每一个列的数据存储有多个Version（version）； 稀疏性：为空的列并不占用存储空间，表可以设计的非常稀疏； 扩展性：底层依赖于HDFS； 高可靠性：WAL机制保证了数据写入时不会因集群异常而导致写入数据丢失，Replication机制保证了在集群出现严重的问题时，数据不会发生丢失或损坏。而且HBase底层使用HDFS，HDFS本身也有备份； 高性能：底层的LSM数据结构和Rowkey有序排列等架构上的独特设计，使得HBase具有非常高的写入性能。region切分、主键索引和缓存机制使得HBase在海量数据下具备一定的随机读取性能，该性能针对Rowkey的查询能够达到毫秒级别； HBase架构图 HBase各部分的作用客户端Client * 整个HBase集群的访问入口； * 使用HBase RPC机制与HMaster和HRegionServer进行通信； * 与HMaster进行通信，进行管理类操作； * 与HRegionServer进行数据读写类操作； * 包含访问HBase的接口，并维护cache来加快对HBase的访问协调服务组件Zookeeper * 保证任何时候，集群中只有一个HMaster； * 存储所有HRegionServer的寻址入口； * 实时监控HRegionServer的上线和下线信息，并实时通知给HMaster； * 存储HBase的schema和table元数据； * Zookeeper Quorum存储.META.表地址、HMaster地址。主节点HMaster * HMaster没有单点问题，HBase中可以启动多个HMaster，通过Zookeeper的Master Election机制保证总有一个Master在运行，主要负责Table和Region的管理工作； * 管理用户对table的增删改查操作。 * 管理HRegionServer的负载均衡，调整Region分布； * Region Split后，负责新Region的分布； * 在HRegionServer停机后，负责失效HRegionServer上Region迁移工作。 Region节点HRegionServer HRegionServer： * 维护HRegion，处理对这些HRegion的IO请求，向HDFS文件系统中读写数据； * 负责切分在运行过程中变得过大的HRegion； * Client访问HBase上数据的过程并不需要Master参与（寻址访问Zookeeper和HRegionServer，数据读写访问HRegionServer）， HMaster仅仅维护着table和Region的元数据信息，负载很低。HBase &amp;&amp; Zookeeper * HBase依赖Zookeeper； * 默认情况下，HBase管理Zookeeper实例，比如，启动或停止Zookeeper； * HMaster与HRegionServer启动时会向Zookeeper注册。 * Zookeeper的引入使得HMaster不再是单点故障。 hbase rowkey 设计HBase是三维有序存储的，通过rowkey（行键），column key（column family和qualifier）和TimeStamp（时间戳）这个三个维度可以对HBase中的数据进行快速定位。 HBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有以下几种方式： 通过get方式，指定rowkey获取唯一一条记录； 通过scan方式，设置startRow和stopRow参数进行范围匹配； 全表扫描，即直接扫描整张表中所有行记录； 较新的hbase还可以通过column和values 进行索引，但是不走rowkey索引速度比较慢；#####rowkey 设计三原则 rowkey长度原则rowkey是一个二进制码流，可以是任意字符串，最大长度 64kb ，实际应用中一般为10-100bytes，以 byte[] 形式保存，一般设计成定长； 建议越短越好，不要超过16个字节，原因如下： 1.数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率； 2.MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率； 3.目前操作系统都是64位系统，内存8字节对齐，控制在16个字节，8字节的整数倍利用了操作系统的最佳特性；rowkey散列原则1.如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。 2.如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。rowkey唯一原则必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候， 要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。什么是热点？1.HBase中的行是按照rowkey的字典顺序排序的，这种设计优化了scan操作，可以将相关的行以及会被一起读取的行存取在临近位置，便于scan，然而糟糕的rowkey设计是热点的源头。 2.热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。 3.大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用，这也会影响同一个RegionServer上的其他region，由于主机无法服务其他region的请求。 设计良好的数据访问模式以使集群被充分，均衡的利用。 # 为了避免写热点，设计rowkey使得不同行在同一个region，但是在更多数据情况下，数据应该被写入集群的多个region，而不是一个。 下面是一些常见的避免热点的方法以及它们的优缺点： 加盐1.这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。 2.分配的前缀种类数量应该和你想使用数据分散到不同的region的数量一致。 3.加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。哈希1.哈希会使同一行永远用一个前缀加盐。 2.哈希也可以使负载分散到整个集群，但是读却是可以预测的。 3.使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据反转1.第三种防止热点的方法时反转固定长度或者数字格式的rowkey。 2.这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。 3.这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。 # 反转rowkey的例子以手机号为rowkey，可以将手机号反转后的字符串作为rowkey， 这样的就避免了以手机号那样比较固定开头导致热点问题时间戳反转一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用， 可以用 Long.Max_Value - timestamp 追加到key的末尾； 例如 [key][reverse_timestamp] , [key] 的最新值可以通过scan [key]获得[key]的第一条记录， 因为HBase中rowkey是有序的，第一条记录是最后录入的数据。 比如需要保存一个用户的操作记录，按照操作时间倒序排序，在设计rowkey的时候，可以这样设计， [userId反转][Long.Max_Value - timestamp]，在查询用户的所有操作记录数据的时候， 直接指定反转后的userId，startRow是[userId反转][000000000000], stopRow是[userId反转][Long.Max_Value - timestamp]， 如果需要查询某段时间的操作记录，startRow是[user反转][Long.Max_Value - 起始时间]，stopRow是[userId反转][Long.Max_Value - 结束时间]（达到热点分散，查询又可以支持多样性）。其他一些建议1.尽量减少行和列的大小在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。 2.如果你的rowkey和列名很大，甚至可以和具体的值相比较，那么你将会遇到一些有趣的问题。 3.HBase storefiles中的索引（有助于随机访问）最终占据了HBase分配的大量内存，因为具体的值和它的key很大。 4.可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。 5.压缩也有助于更大的索引。 6.列族尽可能越短越好，最好是一个字符，冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好]]></content>
      <categories>
        <category>hbase</category>
      </categories>
      <tags>
        <tag>hbase-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码库-split分割方式]]></title>
    <url>%2F2019%2F07%2F25%2F%E4%BB%A3%E7%A0%81%E5%BA%93-split%E5%88%86%E5%89%B2%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[split 案例String address=&quot;上海*上海市*闵行区*吴中路&quot;; String[] splitAddress=address.split(&quot;\\*&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]); String address=&quot;上海:上海市:闵行区:吴中路&quot;; String[] splitAddress=address.split(&quot;\:&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]); String address=&quot;上海.上海市.闵行区.吴中路&quot;; String[] splitAddress=address.split(&quot;\\.&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]); String address=&quot;上海^上海市^闵行区^吴中路&quot;; String[] splitAddress=address.split(&quot;\\^&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]); String address=&quot;上海@上海市@闵行区@吴中路&quot;; String[] splitAddress=address.split(&quot;@&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]); String address=&quot;上海,上海市,闵行区,吴中路&quot;; String[] splitAddress=address.split(&quot;,&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]); 【2】多个符号作为分隔符 String address=&quot;上海^上海市@闵行区#吴中路&quot;; String[] splitAddress=address.split(&quot;\\^|@|#&quot;); System.out.println(splitAddress[0]+splitAddress[1]+splitAddress[2]+splitAddress[3]);]]></content>
      <categories>
        <category>代码库</category>
      </categories>
      <tags>
        <tag>split</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pulsar-学习篇]]></title>
    <url>%2F2019%2F07%2F17%2Fpulsar-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>pulsar</category>
      </categories>
      <tags>
        <tag>pulsar-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[广告-学习篇]]></title>
    <url>%2F2019%2F07%2F12%2F%E5%B9%BF%E5%91%8A-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[术语理解1.dsp系统架构 实践 dsp 业务 1.1 美团DSP广告策略实践 DSP基本概念介绍： 广告平台：将广告素材分发给下游设备、目标用户，然后跟踪分析用户事件行为，并反馈广告主。 DSP：DemandSidePlatform，需求方平台。即将广告平台或者其他来源的广告素材分发给指定的其他广告平台，并收集分析广告的展示激活信息，反馈广告主广告术语：通用术语 包名：package name，可以唯一确定一个app。 CTR：click-through rate，点击率，点击/展现。 Campaign：广告计划，某个客户某个广告在某个区域的宣传，投放单元，比如“MT 安卓台湾”。 DSP：需求方平台。 广告素材 Offer：广告组织单元，商务运营层面的一支广告，约等于一个campaign。 有时3S系统内部的同一个UUID会拆分成3~4个campaign，分属于ADN1/2/3，这些campaign属于一个offer。 直客单：第一跳是3s，下一跳就是第三方（直接跳转到了第三方）的单子。 效果评估 CVR：安装/点击。 归因：简单理解就是把一个安装归功于某一个点击或者展示的过程。因此有点击归因、展示归因等不同细化叫法。 VTA：业务上指代透明卖。 透明卖是使用展示匹配安装进行结算。使用DSP的设备和M系统的campaign合成展示，与自然安装量进行匹配，同时vta透明卖的ctr和cvr需要控制在合理的范围内。 系统名称 fVTA：fake的VTA流量。]]></content>
      <categories>
        <category>广告</category>
      </categories>
      <tags>
        <tag>广告-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark-学习篇]]></title>
    <url>%2F2019%2F07%2F12%2Fspark-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[spark Spark运行模式(local standalond,yarn-client,yarn-cluster,mesos-client,mesos-cluster) spark参数总结 spark 常用算子 Spark on YARN客户端模式作业运行全过程分析 spark 原理解析（重要） spark batch Spark多文件输出(MultipleOutputFormat) 2.spark-mysql 操作 2.1 Spark读取数据库(Mysql)的四种方式讲解 2.2 Spark与Mysql(JdbcRDD)整合开发 2.3 spark 计算结果写入mysql spark Streaming 官网stream Spark Streaming 实现思路与模块概述 SparkStreaming向Hbase中写数据 Spark Streaming kafka实现数据零丢失的几种方式 Kafka+Spark Streaming+Redis实时系统实践 Spark Streaming中空batches处理的两种方法 spark 调优 spark性能优化：shuffle调优 spark性能调优：开发调优 spark性能调优：资源优化 Saprk Streaming性能调优 GC调优在Spark应用中的实践 JVM的GC调优-上 JVM的GC调优-下 sparkMLib 1.Spark MLlib训练的广告点击率预测模型 案例实践 基于Spark streaming的SQL服务实时自动化运维]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kafka-资料篇]]></title>
    <url>%2F2019%2F07%2F12%2Fkafka-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[官网 1.官网 kafka 技术内幕 Kafka技术内幕-日志压缩 中文教程 1.kafka kafka 实践 1.kafka broker的常用配置 kafka 面试问题 21个常见问题 常见问题]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kafka-问题篇]]></title>
    <url>%2F2019%2F07%2F11%2Fkafka-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[No resolvable bootstrap urls given in bootstrap.servers说明当前的bootstrap.servers 填写不正确或者未再配置conf 中设置 conf 基础配置 val props = parameterTool.getProperties //判断是线上还是线下 if (parameterTool.get(ENV_STATE_FLAG) == &quot;online&quot;) props.put(&quot;bootstrap.servers&quot;, parameterTool.get(KAFKA_ONLINE_BROKERS)) else props.put(&quot;bootstrap.servers&quot;, parameterTool.get(KAFKA_OFFLINE_BROKERS)) props.put(&quot;group.id&quot;, parameterTool.get(&quot;groupId&quot;)) props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;) props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;) props.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;) props 写kafka 超时Caused by: org.apache.kafka.common.errors.TimeoutException: Expiring 23 record(s) for Topic: 30001 ms has passed since last append解决方法： 查看 request.timeout.ms=120000 （defalt 30s） Timed out waiting for connection while in state: CONNECTING1.zookeeper 访问不了或者没有启动。 查看下zookeeper （网络是否通）是否正常启动。2.kafka 的zookeeper （server.properties里面）访问地址不正确，检查一下。3.kafka 的 broker.id （server.properties里面）没有注释掉，这里集群最好注释掉，不要手动指定。4.修改 kafka 配置 连接超时间，这里是以毫秒为单位。 zookeeper.connection.timeout.ms=60000]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-常用篇]]></title>
    <url>%2F2019%2F07%2F10%2Fhexo-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[创建新文件 在当前总目录下 hexo new &quot;hexo之基本操作&quot;清除缓存更新部署 hexo clean &amp;&amp; hexo g -dmetery--- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 author: 赵奇 img: /source/images/xxx.jpg top: true cover: true coverImg: /images/1.jpg password: toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown tags: - Typora - Markdown ---相关参考 主题代码 大佬博客 hexo+github+hexo-theme-matery搭建个人博客]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux-常用篇]]></title>
    <url>%2F2019%2F07%2F10%2Flinux-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[常用小技巧查询字符串在文件的位置### 在var 目录下查询包含“test.user”字符串的文件 并显示上下5行的信息。 grep -C 5 -rn &quot;test.user&quot; /var快速清除文件内容 &gt; filename 统计文件个数统计某文件夹下文件的个数 ls -l |grep &quot;^-&quot;|wc -l 统计某文件夹下目录的个数 ls -l |grep &quot;^ｄ&quot;|wc -l快捷键操作Ctl-U 删除光标到行首的所有字符,在某些设置下,删除全行 Ctl-W 删除当前光标到前边的最近一个空格之间的字符查看错误日志tail -n 2000 namenode.log | grep -i -A 30 -B 5 -E &quot;error|exception&quot; 读取namenode.log文件的末尾2000行，然后通过grep命令，忽略大小写过滤出包含error或者exception字符的行，并打印匹配行前面5行和后面30行的内容。这样不仅可以找出错误，还可以把异常堆栈信息找出来shell文本格式化代码： gg=G查看shell 脚本执行过程bash -x test.sh 案例1. 工具使用(sort|uniq|tr|cut|paste|split|file|wc|iconv)sort - 对内容排序 uniq - 去掉相邻重复内容 tr - 替换指定内容为新内容 cut / paste - 剪切/黏贴内容 split - 拆分文件 file - 判断文件类型 wc - 统计文件行数、单词数、字节数 iconv - 编码转换 #sort 按第2列排序 [root@localhost program_test]# sort -k 2 sort.txt 4 bad 5000 3 linux 50 1 mac 2000 2 winxp 100 #sort 逆序排序 [root@localhost program_test]# sort -r sort.txt 4 bad 5000 3 linux 50 2 winxp 100 1 mac 2000 [root ~]# cat foo.txt grape apple pitaya [root ~]# cat bar.txt 100 200 300 400 #paste 粘贴 拼接 [root ~]# paste foo.txt bar.txt grape 100 apple 200 pitaya 300 400 [root ~]# paste foo.txt bar.txt &gt; hello.txt [root ~]# cut -b 4-8 hello.txt pe 10 le 20 aya 3 0 [root ~]# cat hello.txt | tr &#39;\t&#39; &#39;,&#39; grape,100 apple,200 pitaya,300 ,400 #split 切分文件第100行 [root ~]# split -l 100 sohu.html hello [root ~]# wget https://www.baidu.com/img/bd_logo1.png #file 判断文件格式 [root ~]# file bd_logo1.png bd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced [root ~]# wc sohu.html 2979 6355 212527 sohu.html #wc 单词计数 wc -l sohu.html 2979 sohu.html #iconv iconv -f gb2312 -t utf-8 qq.html #curl 的使用 结果会被保存到index.html curl -o index.html http://www.codebelief.com wget http://www.qq.com -O qq.html 案例2-管道重定向查找record.log中包含AAA，但不包含BBB的记录的总数 [root ~]# cat record.log | grep AAA | grep -v BBB | wc -l 输出重定向和错误重定向 - &gt; / &gt;&gt; / 2&gt;。[root ~]# cat readme.txt banana apple grape apple grape watermelon pear pitaya [root ~]# cat readme.txt | sort | uniq &gt; result.txt [root ~]# cat result.txt apple banana grape pear pitaya watermelon输入重定向 - &lt;。[root ~]# echo &#39;hello, world!&#39; &gt; hello.txt [root ~]# wall &lt; hello.txt [root ~]# Broadcast message from root (Wed Jun 20 19:43:05 2018): hello, world! [root ~]# echo &#39;I will show you some code.&#39; &gt;&gt; hello.txt [root ~]# wall &lt; hello.txt [root ~]# Broadcast message from root (Wed Jun 20 19:43:55 2018): hello, world! I will show you some code. 案例3. 字符流编辑器 - sed。sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。 [root ~]# cat -n fruit.txt 1 banana 2 grape 3 apple 4 watermelon 5 orange 接下来，我们在第2行后面添加一个pitaya。 [root ~]# sed &#39;2a pitaya&#39; fruit.txt banana grape pitaya apple watermelon orange 注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。 在第2行前面插入一个waxberry。 [root ~]# sed &#39;2i waxberry&#39; fruit.txt banana waxberry grape apple watermelon orange 删除第3行。 [root ~]# sed &#39;3d&#39; fruit.txt banana grape watermelon orange 删除第2行到第4行。 [root ~]# sed &#39;2,4d&#39; fruit.txt banana orange 将文本中的字符a替换为@。 [root ~]# sed &#39;s#a#@#&#39; fruit.txt b@nana gr@pe @pple w@termelon or@nge 将文本中的字符a替换为@，使用全局模式。 [root ~]# sed &#39;s#a#@#g&#39; fruit.txt b@n@n@ gr@pe @pple w@termelon or@nge 案例4. awk-使用[root ~]# cat fruit2.txt 1 banana 120 2 grape 500 3 apple 1230 4 watermelon 80 5 orange 400 显示文件的第3行。[root ~]# awk &#39;NR==3&#39; fruit2.txt 3 apple 1230显示文件的第2列。[root ~]# awk &#39;{print $2}&#39; fruit2.txt banana grape apple watermelon orange显示文件的最后一列。[root ~]# awk &#39;{print $NF}&#39; fruit2.txt 120 500 1230 80 400输出末尾数字大于等于300的行。[root ~]# awk &#39;{if($3 &gt;= 300) {print $0}}&#39; fruit2.txt 2 grape 500 3 apple 1230 5 orange 400进行行的过滤awk &#39;NR &lt; 5&#39; #行号小于5 awk &#39;NR==1,NR==4 {print}&#39; file #行号等于1和4的打印出来 awk &#39;/linux/&#39; #包含linux文本的行（可以用正则表达式来指定，超级强大） awk &#39;!/linux/&#39; #不包含linux文本的行案例5. 统计文件的行数awk &#39; END {print NR}&#39;案例6. 将外部shell命令的输出读入到变量中使用getline，将外部shell命令的输出读入到变量cmdout中: echo | awk &#39;{&quot;grep root /etc/passwd&quot; | getline cmdout; print cmdout }&#39;案例9.替换jar 或war 中的文件1.首先查找出文件的绝对路径 jar tvf test.war | grep application.yml 2.解压文件 jar xvf test.war 3.然后将绝对路径下文件进行替换，然后添加到war 里 jar uvf test.war WEB-INF/classes/application.yml #jar 常见用法 列出 .jar/.war 文件内容 jar -tf file.jar -v 在标准输出中生成详细输出 -u 更新现有文件 -c 创建新归档文件 -f 指定归档文件名 -x 解档文件 -t 列出归档文件内容 -0 仅存储; 不使用任何 ZIP 压缩（把jar包放进war必须把这个参数加上） 案例8.按占用内存由高到低排序内存使用前10:ps auxw|head -1;ps auxw|sort -rn -k4|head -10内存整体情况free -m含义：USER 进程所属用户 PID 进程ID %CPU 进程占用CPU百分比 %MEM 进程占用内存百分比 VSZ 虚拟内存占用大小 单位：kb（killobytes） RSS 实际内存占用大小 单位：kb（killobytes） TTY 终端类型 STAT 进程状态 START 进程启动时刻 TIME 进程运行时长 COMMAND 启动进程的命令基本命令cat cat -s //多个空白行压缩成一个 cat *.txt | tr -s &#39;\n&#39; //移除空白行 cat -n //加行号文件1. 删除文件： rm -rf *log 等加于$ find ./ -name “*log” -exec rm {} 2. 搜寻文件或目录: $find ./ -name &quot;core*&quot; | xargs file 3. 查找所有非txt文本: find . ! -name &quot;*.txt&quot; -print 4. 统计文本中123 出现的个数： grep -c “123” filename 5. sort 排序：-n 按数字进行排序 VS -d 按字典序进行排序 -r 逆序排序 -k N 指定按第N列排序 ：sort -n -1k -2k sort -bd data // 忽略像空格之类的前导空白字符 6. 拼接文本 paste file1 file2系统# uname -a # 查看内核/操作系统/CPU信息 # head -n 1 /etc/issue # 查看操作系统版本 # cat /proc/cpuinfo # 查看CPU信息 # hostname # 查看计算机名 # lspci -tv # 列出所有PCI设备 # lsusb -tv # 列出所有USB设备 # lsmod # 列出加载的内核模块 # env # 查看环境变量资源# free -m # 查看内存使用量和交换区使用量 # df -h # 查看各分区使用情况 # du -sh &lt;目录名&gt; # 查看指定目录的大小 # grep MemTotal /proc/meminfo # 查看内存总量 # grep MemFree /proc/meminfo # 查看空闲内存量 # uptime # 查看系统运行时间、用户数、负载 # cat /proc/loadavg # 查看系统负载磁盘和分区# mount | column -t # 查看挂接的分区状态 # fdisk -l # 查看所有分区 # swapon -s # 查看所有交换分区 # hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) # dmesg | grep IDE # 查看启动时IDE设备检测状况 网络# ifconfig # 查看所有网络接口的属性 # iptables -L # 查看防火墙设置 # route -n # 查看路由表 # netstat -lntp # 查看所有监听端口 # netstat -antp # 查看所有已经建立的连接 # netstat -s # 查看网络统计信息 # ip route show进程# ps -ef # 查看所有进程 # top # 实时显示进程状态 #根据 top 中作业pid 查看作业进程 cd /proc/pid/ #查询单独一个指定pid 的内存和cpu 使用情况 ps -aux | grep pid top -p pid用户# w # 查看活动用户 # id &lt;用户名&gt; # 查看指定用户信息 # last # 查看用户登录日志 # cut -d: -f1 /etc/passwd # 查看系统所有用户 # cut -d: -f1 /etc/group # 查看系统所有组 # crontab -l # 查看当前用户的计划任务服务# chkconfig --list # 列出所有系统服务 # chkconfig --list | grep on # 列出所有启动的系统服务程序# rpm -qa # 查看所有安装的软件包小技巧：查看变量是否被声明：使用 :- 来测试是否一个变量是否被声明过。 如：if [ &quot;${NAME:-}&quot; = &quot;Kevin&quot; ] 如果 ${NAME}变量未声明则会变为空字符，你也可以设置为其他默认值. 例如：如果不存在，默认值设为：noname ，if [ &quot;${NAME:-noname}&quot; = &quot;Kevin” ]自定义 linux 命令：vim ~/.bashrc 中设置命令别名: alias lsl=&#39;ls -lrt&#39; alias lm=&#39;ls -al|more’ vi 快捷建A 移动光标到当前行尾，并进入 insert 状态a 在当前位置后进入 insert 状态dd 删除当前行D 删除光标之后的内容p 粘贴刚删除的文本ctrl+r 搜索历史命令ctrl+X Ctrl+E 调用默认编辑器去编辑一个特别长的命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cassandra-优化篇]]></title>
    <url>%2F2019%2F05%2F17%2Fcassandra-%E4%BC%98%E5%8C%96%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Cassandra不同于普通的应用程序，它是分布式数据库，它要大口吃内存，吃磁盘，吃CPU，所以机器要进行特殊的配置，以适应其需要。 使用最新的64位的jdk8的最新发布版本。 时钟同步，开启NTP服务. cassandra是分布式存储，就靠时间戳解决数据冲突，所以始终必须同步 TCP参数设置 在低带宽环境下，防火墙会检测闲置的连接并关闭，为了保护节点之间，或者多个DC节点之间的连接，建议如下配置系统参数 sudo sysctl -w net.ipv4.tcp_keepalive_time=60 net.ipv4.tcp_keepalive_probes=3 net.ipv4.tcp_keepalive_intvl=10 设置这个就是可以快速的发现底层的TCP连接是否已经关闭，它间隔60秒开始探测3次，每次探测间隔10秒，也就是说最多在60+3*10=90秒内就可以检测到连接被中断。为了支撑上千个数据库连接，还建议修改以下参数 sudo sysctl -w net.core.rmem_max=16777216 net.core.wmem_max=16777216 net.core.rmem_default=16777216 net.core.wmem_default=16777216 net.core.optmem_max=40960 net.ipv4.tcp_rmem=4096 87380 16777216 net.ipv4.tcp_wmem=4096 65536 16777216 为了让参数永久生效，记得把它们写入系统配置文件/etc/sysctl.conf里 禁用CPU动态跳频功能。 最近的linux系统增加了一个新特性，就是可以动态调整CPU频率，就是在机器低负载的时候，可以降低CPU频率，以达到降低功耗的目的。这种动态调频功能会影响cassandra数据库的吞吐量。建议禁用，让CPU一直维持恒定的频率输出，尽管这很耗电，但是保证你的数据库的吞吐量。 禁用方式： for CPUFREQ in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor do [ -f $CPUFREQ ] || continue echo -n performance &gt; $CPUFREQ done 禁用zone_reclaim_mode 官方建议禁用，这个是关于多核CPU使用NUMA架构，分别访问内存，内存回收方面的一个参数这个参数的解释，可以参考：http://linuxinsight.com/proc_sys_vm_zone_reclaim_mode.html这里面有一句话，当你的机器用作文件服务器，或者你的大部分内存需要用于系统文件缓存的时候，你需要禁用这个功能。我们的Cassandra就相当于文件服务器，它对IO是依赖的，它需要系统内存用于大量缓存DB文件。所以要禁用这个功能。echo 0 &gt; /proc/sys/vm/zone_reclaim_modeCassandra官方描述了如果不禁用这个参数带来的后果： 1、随机CPU尖峰带来时延增加，吞吐量增加。 2、程序假死，什么也不做。 3、一些突然发生又消失的莫名异常。 4、重启机器，可能在一段时间内不再出现异常。 资源限制放开。 cassandra会使用很多内存，很多连接，很多文件，所以一律放开。 &lt;cassandra_user&gt; – memlock unlimited &lt;cassandra_user&gt; – nofile 100000 &lt;cassandra_user&gt; – nproc 32768 &lt;cassandra_user&gt; – as unlimited 这个加入到/etc/security/limits.conf 里（不同操作系统，可能不同，后面不再注明）vm.max_map_count = 1048575 将这个加入到 /etc/sysctl.conf 里 禁用swap 关闭 sudo swapoff –all修改 /etc/fstab. 去掉swap挂载。swap文件内存交换区，当你的内存不够的时候，使用文件内存，这会让你的数据库卡成狗的，一律禁用。 文件预 默认保持64k即可 echo 64 &gt; /sys/class/block/{sda}/queue/read_ahead_kb 如果是ssd，设置为8k echo 8 &gt; /sys/class/block/{sda}/queue/read_ahead_kb 如果是ssd，还要设置下面的参数进行优化。 echo deadline &gt; /sys/block/sda/queue/scheduler #OR… #echo noop &gt; /sys/block/sda/queue/scheduler touch /var/lock/subsys/local echo 0 &gt; /sys/class/block/sda/queue/rotational 确保以上参数重启机器后仍然有效。 参考：赵岩的博客]]></content>
      <categories>
        <category>cassandra</category>
      </categories>
      <tags>
        <tag>cassandra-优化篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux-问题篇]]></title>
    <url>%2F2019%2F05%2F17%2Flinux-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[报错信息：run npm audit fix to fix them, or npm audit for details解决： npm audit fix --force]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cassandra-问题篇]]></title>
    <url>%2F2019%2F05%2F17%2Fcassandra-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[为什么不可以设置listen_address为0.0.0.0（意思是监听所有地址）？ Cassandra是一个基于gossip协议的分布式系统，监听地址是用来告诉其它节点来访问的，告诉别的节点说“连接我任何地址都可以”，是一个糟糕的想法，如果集群中不同的节点使用了不同方式的地址，悲剧的事情就要发生了。如果你不想为你集群中的每个节点单独配置ip（非常可以理解）,你可以不配，空着它，Cassandra将会使用InetAddress.getLocalHost()来选择地址，然后只要你或者你的运维团队保证这个是正确的(/etc/hosts/,dns 等等要配置对)。一个例外是JMX,他默认监听的地址是0.0.0.0（这个是java的bug 6425769）请看CASSANDRA-256 和 CASSANDRA-43获取这方面更多的细节。 cassandra用了哪些端口？ 默认7000作为集群通信端口（如果开启了SSL就是7001端口）。9042端口用于native协议的客户端连接。7199端口用于JMX，9160端口用于废弃的Thrift接口。内部节点通信以及native协议的端口在cassandra配置文件里可以配置。JMX端口可以在cassandra-env.sh配置（通过JVM的参数)。所有端口都是TCP的。 当往集群中增加新节点的时候，对于存在的数据发生了什么？ 当一个新节点加入到集群，它将会自动连接集群中的其它节点，并且去复制正确的数据到本地，同样的增加、替换、移动、删除节点都是这样的。 我删除了数据，但是磁盘使用率没有变化，这是为什么？ 写入到cassandra里的数据会被持久化到SSTable文件里，SSTable文件是不可改变的，也就是说当你执行删除的时候，数据不会从文件中被去除掉的。相反，一个标记（也叫tombstone)会被写入用于标记对应记录的新状态。不用担心，当数据和tombstone发生第一次compaction的时候，数据会被删除掉，相应的磁盘空间也被回收，你可以了解关于Compaction的更多细节。 为什么用nodetool ring只能看到一条记录？ 即便所有节点输出的日志里可以看出，他们都发现彼此加入到了这个ring。 这个发生于你的所有节点都配了通用的token，不要这么做。这经常发生于哪些使用VM部署cassandra的用户，（特别是使用Debian package，它会在安装完自动启动cassandra，所以会生成token并保存它。），安装好后就把VM整个克隆出另外的节点。增很容易修复，只要把数据目录以及commitlog目录删除，然后保证每个节点是随机生成的token，再启动就可以了。 我可以修改一个正在运行中的集群中的keyspace的副本因子吗？ 可以，但是修改后需要执行repair或者cleanup来改变已存数据的副本个数。首先使用cqlsh修改目标keyspace的副本因子。如果你是减少副本因子，你可以执行nodetool cleanup去删除多余的副本数据，对每个节点都要执行。如果你是增加副本因子，你需要执行nodetool repair来保证数据的副本个数满足当前的配置。 Repair只要对每个副本集执行一次即可。这是个敏感的操作，这会影响集群的性能。强烈建议执行rolling repair，因为试图一次修复整个集群的话，那可能是个坑。 可以使用cassandra存储大的二进制字段吗？ Cassandra并没有对存储大文件或者二进制，以及这样一个二进制数据被经常读，也就是整个发送到客户端的情况进行优化。因为存储小的二进制数据（小于1MB)应该不是问题。但是还是建议把大的二进制数据分隔成小块。需要特别注意的是，任何大于16MB的值，将被Cassandra拒绝掉，这是由max_mutation_size_in_kb配置项决定的（这个配置项默认是commitlog_segment_size_in_mb的一半，commitlog_segment_size_in_mb默认是32M)。 Nodetool连接远程服务器的时候，提示“Connection refused to host: 127.0.1.1” ，这是为什么？ nodetool依赖JMX，JMX依赖RMI。RMI在两端通信的时候会根据需要创建自己的listenners和connectors。通常，这些都是底层透明的，但是不正确的hostname解析，无论是在连接方还是被连接方，都会导致错乱和这样的拒绝异常。如果你在使用DNS。确保两端机器的/etc/hosts文件是正确的。如果还是失败的，你可以尝试通过jvm选项-Djava.rmi.server.hostname=指定你要连接的远程机器名称给JMX接口，配置项大体在cassandra-env.sh文件的靠下的位置。 端口占用 错误： Cassandra关闭后，重启，提示，7199端口被占用，分析原因是关闭时使用的ctrl+c，实际上并没有关闭cassandra服务进程，所以提示端口已被使用； yxcdeMacBook-Pro:3.11.4 yxc$ cqlsh Connection error: (&#39;Unable to connect to any servers&#39;, {&#39;127.0.0.1&#39;: error(61, &quot;Tried connecting to [(&#39;127.0.0.1&#39;, 9042)]. Last error: Connection refused&quot;)}) 解决：找出使用7199端口的进程lsof -i:7199杀死残留进程kill direct_pid 版本不一致 错误： Connection error: (‘Unable to connect to any servers’, {‘127.0.0.1’: ProtocolError(“cql_version ‘3.3.0’ is not supported by remote (w/ native protocol). Supported versions: [u’3.3.1’]”,)}) 解决： 修改cassandra_home/bin/cqlsh.py: DEFAULT_CQLVER = ‘3.3.0’为DEFAULT_CQLVER = ‘3.3.1’； All host(s) tried for query failed 错误： message: ‘All host(s) tried for query failed. First host tried, 127.0.0.1:9042: Error: connect ECONNREFUSED 127.0.0.1:9042. See innerErrors.’ } 解决： 修改cassandra_home/conf/cassandra.yaml: start_native_transport=false改为start_native_transport=true; Cannot build a cluster without contact points 解决： 不能构建cassandra 的集群，查看是否ip 没有写对 caching 增加导致负载升高 解决： Not enough replica available for query at consistency ONE (1 required but only 0 alive) https://issues.apache.org/jira/browse/CASSANDRA-7905 https://issues.apache.org/jira/browse/CASSANDRA-11815 https://stackoverflow.com/questions/27974911/not-enough-replica-available-for-query-at-consistency-one-1-required-but-only-0 复制数据的官网解释： https://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureDataDistributeReplication_c.html https://docs.datastax.com/en/archived/cassandra/2.1/cassandra/operations/ops_add_dc_to_cluster_t.htmlCassandra received an invalid gossip generation for peer 解决：链接 参考赵岩]]></content>
      <categories>
        <category>cassandra</category>
      </categories>
      <tags>
        <tag>cassandra-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[druid-学习篇]]></title>
    <url>%2F2019%2F05%2F17%2Fdruid-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[druid 系列csdn]]></content>
      <categories>
        <category>druid</category>
      </categories>
      <tags>
        <tag>druid-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[brew-使用篇]]></title>
    <url>%2F2019%2F05%2F17%2Fbrew-%E4%BD%BF%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[安装软件存放路径/usr/local/Cellar/常用命令brew --help #简洁命令帮助 man brew #完整命令帮助 brew install git #安装软件包(这里是示例安装的Git版本控制) brew uninstall git #卸载软件包 brew search git #搜索软件包 brew list #显示已经安装的所有软件包 brew update #同步远程最新更新情况，对本机已经安装并有更新的软件用*标明 brew outdated #查看已安装的哪些软件包需要更新 brew upgrade git #更新单个软件包 brew info git #查看软件包信息 brew home git #访问软件包官方站 brew cleanup #清理所有已安装软件包的历史老版本 brew cleanup git #清理单个已安装软件包的历史版本服务管理brew services list # 查看使用brew安装的服务列表 brew services run formula|--all # 启动服务（仅启动不注册） brew services start formula|--all # 启动服务，并注册 brew services stop formula|--all # 停止服务，并取消注册 brew services restart formula|--all # 重启服务，并注册 brew services cleanup # 清除已卸载应用的无用的配置问题及解决安装或卸载 问题 Error: No such keg: /usr/local/Cellar/****方法一： brew cleanup brew uninstall *** brew install *** 方法二： 如果方法一不生效，则查看是否有版本号，或者软件名错误]]></content>
      <categories>
        <category>brew</category>
      </categories>
      <tags>
        <tag>brew-使用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cassandra-常用篇]]></title>
    <url>%2F2019%2F05%2F15%2Fcassandra-%E5%B8%B8%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[cassandra mac os 安装 shell 命令登陆cqlsh -u cassandra -p cassandra --connect-timeout 300查看集群信息nodetool describecluster查看节点状态nodetool status重启节点sudo systemctl restart scylla-server查看系统相关日志信息sudo journalctl --follow _UID=`id -u scylla` Cql操作查看版本SHOW VERSION OR SELECT release_version from system.local; 查看Schema 信息 SELECT * FROM system_schema.keyspaces;keyspaces 操作#创建 CREATE KEYSPACE tutorialspoint WITH replication = {&#39;class&#39;:&#39;SimpleStrategy&#39;, &#39;replication_factor&#39; : 3}; #修改 ALTER KEYSPACE tutorialspoint WITH replication = {&#39;class&#39;:&#39;NetworkTopologyStrategy&#39;, &#39;replication_factor&#39; : 3}; #删除 DROP KEYSPACE “KeySpace name” #查看 desc keyspaces; #使用 use keyspaceNametable 操作#创建表 #1 CREATE TABLE user_action.user_history ( device_id text PRIMARY KEY, user_history text, dmp_tag text, install_pkg text ) WITH bloom_filter_fp_chance = 0.01 AND caching = {&#39;keys&#39;: &#39;ALL&#39;, &#39;rows_per_partition&#39;: &#39;ALL&#39;} AND comment = &#39;m user history action, tag, pkg records&#39; AND compaction = {&#39;class&#39;: &#39;SizeTieredCompactionStrategy&#39;, &#39;max_threshold&#39;: &#39;32&#39;, &#39;min_threshold&#39;: &#39;4&#39;} AND compression = {&#39;chunk_length_kb&#39;: &#39;1&#39;, &#39;crc_check_chance&#39;: &#39;0.000010&#39;, &#39;sstable_compression&#39;: &#39;org.apache.cassandra.io.compress.LZ4Compressor&#39;} AND crc_check_chance = 1.0 AND dclocal_read_repair_chance = 0.1 AND default_time_to_live = 15552000 AND gc_grace_seconds = 864000 AND max_index_interval = 2048 AND memtable_flush_period_in_ms = 0 AND min_index_interval = 128 AND read_repair_chance = 0.0 AND speculative_retry = &#39;99.0PERCENTILE&#39;; #2 CREATE TABLE test.test_user_action_history ( device_id text, user_history text, dmp_tag text, install_pkg text, PRIMARY KEY (device_id) ) WITH comment=&#39;test user history action records&#39; AND caching = {&#39;keys&#39;: &#39;ALL&#39;, &#39;rows_per_partition&#39;: &#39;ALL&#39;} AND compaction = {&#39;class&#39;: &#39;SizeTieredCompactionStrategy&#39;, &#39;max_threshold&#39;: &#39;32&#39;, &#39;min_threshold&#39;: &#39;4&#39;} AND compression = {&#39;chunk_length_kb&#39;: &#39;1&#39;, &#39;crc_check_chance&#39;: &#39;0.000010&#39;, &#39;sstable_compression&#39;: &#39;org.apache.cassandra.io.compress.LZ4Compressor&#39;}; ##添加列 ALTER TABLE emp ADD emp_email text; ##删除列 ALTER TABLE emp DROP emp_email; # 删除表 DROP TABLE emp; #截断表（删除所有数据）表结构保留 TRUNCATE student; #创建索引 CREATE INDEX name ON emp1 (emp_name); #删除索引 drop index name; #bacth 处理 BEGIN BATCH ... INSERT INTO emp (emp_id, emp_city, emp_name, emp_phone, emp_sal) values( 4,&#39;Pune&#39;,&#39;rajeev&#39;,9848022331, 30000); ... UPDATE emp SET emp_sal = 50000 WHERE emp_id =3; ... DELETE emp_city FROM emp WHERE emp_id = 2; ... APPLY BATCH; #table list desc tables; #查看表结构 desc table &#39;table_name&#39;; CURD 操作#插入 INSERT INTO emp (emp_id, emp_name, emp_city, emp_phone, emp_sal) VALUES(1,&#39;ram&#39;, &#39;Hyderabad&#39;, 9848022338, 50000); #修改 UPDATE emp SET emp_city=&#39;Delhi&#39;,emp_sal=50000 WHERE emp_id=2; #读取 select #删除 DELETE emp_sal FROM emp WHERE emp_id=3; 修改keyspaces 的副本 ALTER KEYSPACE library WITH REPLICATION = { &#39;class&#39; : &#39;SimpleStrategy&#39;, &#39;replication_factor&#39; : 1 };数据类型 数据类型 常量 描述 ascii strings 表示ASCII字符串 bigint bigint 表示64位有符号长 blob blobs 表示任意字节 Boolean booleans 表示true或false counter integers 表示计数器列 decimal integers, floats 表示变量精度十进制 double integers 表示64位IEEE-754浮点 float integers, floats 表示32位IEEE-754浮点 inet strings 表示一个IP地址，IPv4或IPv6 int integers 表示32位有符号整数 text strings 表示UTF8编码的字符串 timestamp integers, strings 表示时间戳 timeuuid uuids 表示类型1 UUID uuid uuids 表示类型1或类型4 UUID varchar strings 表示uTF8编码的字符串 varint integers 表示任意精度整数 集合类型 Cassandra查询语言还提供了一个集合数据类型。下表提供了CQL中可用的集合的列表。 集合 描述 备注 list 列表是一个或多个有序元素的集合。 将保持元素的顺序，并且值将被多次存储。 map map是键值对的集合。 set 集合是一个或多个元素的集合。 listCREATE TABLE data(name text PRIMARY KEY, email list&lt;text&gt;); INSERT INTO data(name, email) VALUES (&#39;ramu&#39;,[&#39;abc@gmail.com&#39;,&#39;cba@yahoo.com&#39;]) UPDATE data SET email = email +[&#39;xyz@tutorialspoint.com&#39;] where name = &#39;ramu&#39;; SELECT * FROM data; name | email ------+-------------------------------------------------------------- ramu | [&#39;abc@gmail.com&#39;, &#39;cba@yahoo.com&#39;, &#39;xyz@tutorialspoint.com&#39;]]]></content>
      <categories>
        <category>cassandra</category>
      </categories>
      <tags>
        <tag>cassandra-常用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cassandra-学习篇]]></title>
    <url>%2F2019%2F05%2F15%2Fcassandra-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[简介： Apache Cassandra 是一个开源的、分布式、无中心、弹性可扩展、高可用、容错、一致性可调、面向行的数据库，它基于 Amazon Dynamo 的分布式设计和 Google Bigtable 的数据模型，Cassandra 其协议是 P2P 的，并使用 gossip 来维护存活或死亡节点的列表（gossip 协议介绍：https://www.iteblog.com/archives/2505.html）由 Facebook 创建，在一些最流行的网站中得到应用. 优点：分布式和去中心化（Distributed and Decentralized）： 可以运行在多台机器上，并呈现给用户一个一致的整体； Cassandra 是无中心的，也就是说每个节点都是一样的，协议是 P2P 的，并使用 gossip 来维护存活或死亡节点的列表。 弹性可扩展： 集群可以不间断的情况下，方便扩展或缩减服务的规模，不需要重新启动进程，不必修改应用的查询，也无需自己手工重新均衡数据分布，只要加入新的计算机，Cassandra 就会自动地发现它并让它开始工作。 高可用和容错： 可以在不中断系统的情况下替换故障节点，还可以把数据分布到多个数据中心里，从而提供更好的本地访问性能，并且在某一数据中心发生火灾、洪水等不可抗灾难的时候防止系统彻底瘫痪 可调节一致性： 通过副本因子（replication factor），你可以决定准备牺牲多少性能来换取一致性。 副本因子是你要求更新在集群中传播到的节点数（注意，更新包括所有增加、删除和更新操作）。 一致性级别（consistency level）参数，这个参数决定了多少个副本写入成功才可以认定写操作是成功的，或者读取过程中读到多少个副本正确就可以认定是读成功的。这里 Cassandra 把决定一致性程度的权利留给了客户自己。 所以，如果需要的话，你可以设定一致性级别和副本因子相等，从而达到一个较高的一致性水平，不过这样就必须付出同步阻塞操作的代价，只有所有节点都被更新完成才能成功返回一次更新。而实际上，Cassandra 一般都不会这么来用，原因显而易见（这样就丧失了可用性目标，影响性能，而且这不是你选择 Cassandra 的初衷）。而如果一个客户端设置一致性级别低于副本因子的话，即使有节点宕机了，仍然可以写成功。 总体来说，Cassandra 更倾向于 CP，虽然它也可以通过调节一致性水平达到 AP；但是不推荐你这么设置。其CAP 定律的详细介绍可参见《分布式系统一致性问题、CAP定律以及 BASE 理论》以及《一篇文章搞清楚什么是分布式系统 CAP 定理》。 面向行 它的数据结构不是关系型的，而是一个多维稀疏哈希表。稀疏（Sparse）意味着任何一行都可能会有一列或者几列。更确切地说，应该把 Cassandra 看做是一个有索引的、面向行的存储系统。 灵活的模式（Flexible Schema） 从 3.0 版本开始，不推荐使用基于 Thrift API 的动态列创建的 API，并且 Cassandra 底层存储已经重新实现了，以更紧密地与 CQL 保持一致。 Cassandra 并没有完全限制动态扩展架构的能力，但它的工作方式却截然不同。 CQL 集合（比如 list、set、尤其是 map）提供了在无结构化的格式里面添加内容的能力，从而能扩展现有的模式。CQL 还提供了改变列的类型的能力，以支持 JSON 格式的文本的存储。 高性能(High Performance) 设计之初就特别考虑了要充分利用多处理器和多核计算机的性能，并考虑在分布于多个数据中心的大量这类服务器上运行。它可以一致而且无缝地扩展到数百台机器，存储数 TB 的数据。Cassandra 已经显示出了高负载下的良好表现，在一个非常普通的工作站上，Cassandra 也可以提供非常高的写吞吐量。而如果你增加更多的服务器，你还可以继续保持 Cassandra 所有的特性而无需牺牲性能 应用场景大规模部署 单节点不易发挥它的性能，多个节点部署cassandra才是最佳选择 写密集、统计和分析型工作 Cassandra 是为优异的写吞吐量而特别优化的。 早期用于存储用户状态更新、社交网络、建议/评价以及应用统计都是很好的应用场景。现又适用于窗口化的时间序列数据库，用于文档搜索的反向索引，以及分布式任务优先级队列。 地区分布 支持多地分布的数据存储，Cassandra 可以很容易配置成将数据分布到多个数据中心的存储方式。如果你有一个全球部署的应用，那么让数据贴近用户会获得不错的性能收益，Cassandra 正适合这种应用场合。 变化的应用 正在“初创阶段”，业务会不断改进，Cassandra 这种灵活的模式的数据模型可能更适合你。这让你的数据库能更快地跟上业务改进的步伐。 参考地址：cassandra 简介 Single column Primary Key Primary Key 可以由一列或多列组成,用于从表中检索数据，如果 Primary Key 由一列组成，那么称为 Single column Primary Key&gt; 如下： CREATE TABLE iteblog_user (first_name text , last_name text, PRIMARY KEY (first_name)) ; 我们在检索数据的时候需要指定 Primary Key,不指定查询数据会抛以下异常： InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING&quot;Composite Primary Key 如果 Primary Key 由多列组成，那么这种情况称为 Compound Primary Key 或 Composite Primary Key 如下： CREATE TABLE iteblog_user_composite (first_name text , last_name text, PRIMARY KEY (first_name, last_name)) ; 其中 first_name 称为 Partition key，last_name 称为 Clustering key（也可以称为 Clustering column）。在这种情况下，下面查询的前三条都是合法的，最后一条是非法的。 cqlsh:iteblog_keyspace&gt; select * from iteblog_user_composite; cqlsh:iteblog_keyspace&gt; select * from iteblog_user_composite where first_name = &#39;iteblog&#39;; cqlsh:iteblog_keyspace&gt; select * from iteblog_user_composite where first_name = &#39;iteblog&#39; and last_name = &#39;hadoop&#39;; //非法查询 cqlsh:iteblog_keyspace&gt; select * from iteblog_user_composite where last_name = &#39;hadoop&#39;; Partition key 和 Clustering key(查询的时候不可以仅指定，需要和partition key 组合) 也可以由多个字段组成，如果 Partition key 由多个字段组成，称之为 Composite partition key： create table iteblog_multiple ( k_part_one text, k_part_two int, k_clust_one text, k_clust_two int data text, PRIMARY KEY((k_part_one, k_part_two), k_clust_one, k_clust_two) ); 小知识：使用 Composite partition key 的一个原因其实一个 Partition 对应的 Cell 个数在 Cassandra 里面是有限制的。理论上来说，一个 Partition 的 Cell 个数大约在20亿个（231）。所以采用了 Composite partition key，我们可以将数据分散到不同的 Partition，这样有利于将同一个 Partition 的 Cell 个数减少。 Partition key &amp; Clustering key &amp; Primary Key 作用 Partition Key：将数据分散到集群的 node 上 Primary Key：在 Single column Primary Key 情况下作用和 Partition Key 一样；在 Composite Primary Key 情况下，组合 Partition key 字段决定数据的分发的节点； Clustering Key：决定同一个分区内相同 Partition Key 数据的排序，默认为升序，我们可以在建表语句里面手动设置排序的方式（DESC 或 ASC） 参考链接:Apache Cassandra Composite KeyPartition keyClustering key 介绍]]></content>
      <categories>
        <category>cassandra</category>
      </categories>
      <tags>
        <tag>cassandra-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码库-邮件发送]]></title>
    <url>%2F2019%2F05%2F06%2F%E4%BB%A3%E7%A0%81%E5%BA%93-%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%2F</url>
    <content type="text"><![CDATA[scala 版本示例：import org.slf4j.LoggerFactory import javax.mail._ import javax.mail.internet.InternetAddress import javax.mail.internet.MimeMessage import java.util.Properties object Mail { val logger = LoggerFactory.getLogger(Mail.getClass) val bodyHtml = &quot;&lt;!DOCTYPE html PUBLIC -//W3C//DTD HTML 4.01 Transitional//ENhttp://www.w3.org/TR/html4/loose.dtd&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type content=text/html; charset=utf-8 pageEncoding=UTF-8&gt;&lt;/head&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;&quot; val prop = new Properties() prop.put(&quot;mail.smtp.host&quot;,&quot;smtp.exmail.qq.com&quot;) prop.put(&quot;mail.smtp.auth&quot;,&quot;true&quot;) prop.put(&quot;mail.smtp.connectiontimeout&quot;,&quot;10000&quot;) prop.put(&quot;mail.smtp.timeout&quot;,&quot;20000&quot;) def send(address: String, title: String, content: String) { try { val addresses = address.split(&quot;,&quot;).map(new InternetAddress(_).asInstanceOf[Address]) val authenticator = new SMTPAuthenticator(&quot;username@qq.com&quot;, &quot;password&quot;) val sendMailSession = Session.getDefaultInstance(prop, authenticator) val newMessage = new MimeMessage(sendMailSession) newMessage.setFrom(new InternetAddress(&quot;username@qq.com&quot;)) newMessage.setRecipients(Message.RecipientType.TO, addresses) newMessage.setSubject(title) val html = String.format(bodyHtml, content) newMessage.setContent(html, &quot;text/html;charset=utf-8&quot;) Transport.send(newMessage) logger.info(&quot;send an email to address[{}] title[{}] content[{}]&quot;, addresses, title, content); } catch { case e: MessagingException =&gt; logger.info(&quot;error occur when mail&quot;, e) } } class SMTPAuthenticator(username: String, password: String) extends Authenticator { override def getPasswordAuthentication: PasswordAuthentication = new PasswordAuthentication(username, password) } }]]></content>
      <categories>
        <category>代码库</category>
      </categories>
      <tags>
        <tag>代码库-邮件发送</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark-问题篇]]></title>
    <url>%2F2019%2F04%2F29%2Fspark-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[org.apache.spark.SparkException: Could not find CoarseGrainedScheduler. 这个可能是一个资源问题，应该给任务分配更多的 cores 和Executors，并且分配更多的内存。并且需要给RDD分配更多的分区 在配置资源中加入这句话也许能解决你的问题： –conf spark.dynamicAllocation.enabled=false 经过一般调试，发现原来是因为spark任务生成task任务过少，而任务提交时所指定的Excutor 数过多导致，故调小 –num-executors 参数问题得以解决。 心跳超时 报错信息： WARN executor.Executor: Issue communicating with driver in heartbeater org.apache.spark.rpc.RpcTimeoutException: Futures timed out after [10 seconds]. This timeout is controlled by spark.executor.heartbeatInterval at org.apache.spark.rpc.RpcTimeout.org$apache$spark$rpc$RpcTimeout$$createRpcTimeoutException(RpcTimeout.scala:47) at org.apache.spark.rpc.RpcTimeout$$anonfun$addMessageIfTimeout$1.applyOrElse(RpcTimeout.scala:62) at org.apache.spark.rpc.RpcTimeout$$anonfun$addMessageIfTimeout$1.applyOrElse(RpcTimeout.scala:58) at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36) at org.apache.spark.rpc.RpcTimeout.awaitResult(RpcTimeout.scala:76) at org.apache.spark.rpc.RpcEndpointRef.askSync(RpcEndpointRef.scala:92) at org.apache.spark.executor.Executor.org$apache$spark$executor$Executor$$reportHeartBeat(Executor.scala:785) at org.apache.spark.executor.Executor$$anon$2$$anonfun$run$1.apply$mcV$sp(Executor.scala:814) at org.apache.spark.executor.Executor$$anon$2$$anonfun$run$1.apply(Executor.scala:814) at org.apache.spark.executor.Executor$$anon$2$$anonfun$run$1.apply(Executor.scala:814) at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1992) at org.apache.spark.executor.Executor$$anon$2.run(Executor.scala:814) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: java.util.concurrent.TimeoutException: Futures timed out after [10 seconds] at scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:219) at scala.concurrent.impl.Promise$DefaultPromise.result(Promise.scala:223) at org.apache.spark.util.ThreadUtils$.awaitResult(ThreadUtils.scala:201) at org.apache.spark.rpc.RpcTimeout.awaitResult(RpcTimeout.scala:75) ... 14 more 19/10/21 07:00:29 ERROR executor.Executor: Exit as unable to send heartbeats to driver more than 60 times 解决方法： --conf spark.executor.heartbeatInterval=15s --conf spark.network.timeout=120s --conf spark.core.connection.ack.wait.timeout=300sg]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS-使用篇]]></title>
    <url>%2F2019%2F04%2F29%2FmacOS-%E4%BD%BF%E7%94%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[快捷键：Command（或 Cmd）⌘ Shift ⇧ Option（或 Alt）⌥ Control（或 Ctrl）⌃ Caps Lock ⇪ Fn #窗口管理 退出关闭应用：Command+Q 最小化当前窗口: command+m #文本管理 打开文件系统： Command+O 新建文件夹：Command-Shift-N 将文件移至废纸篓： Command-Delete 清倒废纸篓： Command-Shift-Delete *** #### 目录地址： &gt; 软件的安装目录 ~/Library/Application Support &gt; brew 安装路径 /usr/local/Cellar/ &gt; 系统环境加载顺序 /etc/profile/etc/paths~/.bash_profile~/.bash_login~/.profile~/.bashrc ``` 软件 Mac Beyond Compare4 破解方法 tldr 命令帮助 常见问题 mac 的netstat 与 linux netstat 不同]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>macOS-使用篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技术文章]]></title>
    <url>%2F2019%2F04%2F29%2F%E7%BB%8F%E5%85%B8%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[技术文章 MySQL索引原理及慢查询优化 美团点评基于 Flink 的实时数仓建设实践 从零开始入门推荐算法工程师 计算广告与流处理技术综述 学习规划文章1.面试过阿里等互联网大公司，我知道了这些套路]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spark-调优篇]]></title>
    <url>%2F2019%2F04%2F28%2Fspark-%E8%B0%83%E4%BC%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[性能调优分配资源：spark-submit \ --class cn.spark.sparktest.core.WordCountCluster \ --num-executors 80 \ 配置executor的数量 --driver-memory 6g \ 配置driver的内存（影响不大） --executor-memory 6g \ 配置每个executor的内存大小 --executor-cores 3 \ 配置每个executor的cpu core数量(RDD cache/shuffle/task执行) --master yarn-cluster \ --queue root.default \ --conf spark.yarn.executor.memoryOverhead=2048 \ executor堆外内存 --conf spark.core.connection.ack.wait.timeout=300 \ 连接的超时时长 /usr/local/spark/spark.jar \ ${1} spark-submit \ --master yarn \ --deploy-mode cluster \ --executor-cores 3 \ --executor-memory 10G \ --driver-memory 4G \ --conf spark.dynamicAllocation.enabled=true \ --conf spark.shuffle.service.enabled=true \ --conf spark.dynamicAllocation.initialExecutors=5 \ --conf spark.dynamicAllocation.maxExecutors=40 \ --conf spark.dynamicAllocation.minExecutors=0 \ --conf spark.dynamicAllocation.executorIdleTimeout=30s \ --conf spark.dynamicAllocation.schedulerBacklogTimeout=10s \ SparkStreaming 优雅退出 public static void main(String[] args) throws Exception{ Logger.getLogger(&quot;org&quot;).setLevel(Level.ERROR); //String checkpointPath = PropertiesUtil.getProperty(&quot;streaming.checkpoint.path&quot;); JavaStreamingContext javaStreamingContext = JavaStreamingContext.getOrCreate(&quot;hdfs://Master:9000/streaming_checkpoint&quot;, createContext()); javaStreamingContext.start(); 每隔20秒钟监控是否有停止指令,如果有则优雅退出streaming final Properties serverProps = PropertiesUtil.properties; Thread thread = new Thread(new MonitorStopThread(javaStreamingContext,serverProps)); thread.start(); javaStreamingContext.awaitTermination(); } } 调节并行度： 并行度：其实就是指的是，Spark作业中，各个stage的task数量，也就代表了Spark作业的在各个阶段（stage）的并行度。 官方是推荐，task数量，设置成spark application总cpu core数量的23倍，比如150个cpu core，基本要设置task数量为300500； SparkConf conf = new SparkConf().set(“spark.default.parallelism”, “500”) InputDStream并行化数据接收 创建多个InputDStream来接收同一数据源,把多个topic数据细化为单一的kafkaStream来接收 创建kafkaStream Map&lt;String, String&gt; kafkaParams = new HashMap&lt;String, String&gt;(); kafkaParams.put(&quot;metadata.broker.list&quot;, &quot;192.168.1.164:9092,192.168.1.165:9092,192.168.1.166:9092&quot;); kafkaParams.put(&quot;zookeeper.connect&quot;,&quot;master:2181,data1:2181,data2:2181&quot;); 构建topic set String kafkaTopics = ConfigurationManager.getProperty(Constants.KAFKA_TOPICS); String[] kafkaTopicsSplited = kafkaTopics.split(&quot;,&quot;); Set&lt;String&gt; topics = new HashSet&lt;String&gt;(); for(String kafkaTopic : kafkaTopicsSplited) { topics.add(kafkaTopic); JavaPairInputDStream&lt;String, String&gt; kafkaStream = KafkaUtils.createDirectStream( jssc, String.class, String.class, StringDecoder.class, StringDecoder.class, kafkaParams, topics); InputDStream并行化数据接收 ``` int numStreams = 5; List&lt;JavaPairDStream&lt;String, String&gt;&gt; kafkaStreams = new ArrayList&lt;JavaPairDStream&lt;String,String&gt;&gt;(numStreams); for (int i = 0; i &lt; numStreams; i++) { kafkaStreams.add(KafkaUtils.createStream(...)); } JavaPairDStream&lt;String, String&gt; unifiedStream = streamingContext.union(kafkaStreams.get(0), kafkaStreams.subList(1, kafkaStreams.size())); unifiedStream.print(); ``` 增加block数量，增加每个batch rdd的partition数量，增加处理并行度第一步：receiver从数据源源源不断地获取到数据，首先是会按照block interval，将指定时间间隔的数据，收集为一个block；默认时间是200ms，官方推荐不要小于50ms； 第二步：根据指定batch interval时间间隔合并为一个batch，创建为一个rdd， 第三步：启动一个job，去处理这个batch rdd中的数据。 第四步：batch rdd 的partition数量是多少呢？一个batch有多少个block，就有多少个partition；就意味着并行度是多少；就意味着每个batch rdd有多少个task会并行计算和处理。 调优：如果希望可以比默认的task数量和并行度再多一些，可以手动调节blockinterval，减少block interval。每个batch可以包含更多的block。因此也就有更多的partition，因此就会有更多的task并行处理每个batch rdd。重分区，增加每个batch rdd的partition数量inputStream.repartition()：重分区，增加每个batch rdd的partition数量对dstream中的rdd进行重分区为指定数量的分区，就可以提高指定dstream的rdd的计算并行度调节并行度 重构RDD架构以及RDD持久化： RDD架构重构与优化 公共RDD一定要实现持久化,对于要多次计算和使用的公共RDD，一定要进行持久化。 持久化，是可以进行序列化的sessionid2actionRDD=sessionid2actionRDD.persist(StorageLevel.MEMORY_ONLY());``` MEMORY_ONLY 直接以Java对象的形式存储于JVM的内存中 MYMORY_AND_DISK 存储于JVM的内存+磁盘 MEMORY_ONLY_SER 序列化存储于内存中 MEMORY_AND_DISK_SER 序列化存储于内存+磁盘 ``` 为了数据的高可靠性，而且内存充足，可以使用双副本机制，进行持久化 实现RDD高可用性：启动WAL预写日志机制 spark streaming，从原理上来说，是通过receiver来进行数据接收的；接收到的数据，会被划分成一个一个的block；block会被组合成一个batch；针对一个batch，会创建一个rdd；receiver接收到数据后，就会立即将数据写入一份到容错文件系统（比如hdfs）上的checkpoint目录中的，另一份写入到磁盘文件中去；作为数据的冗余副本。无论你的程序怎么挂掉，或者是数据丢失，那么数据都不肯能会永久性的丢失；因为肯定有副本。 SparkConf conf = new SparkConf() .setMaster(&quot;local[2]&quot;) .setAppName(&quot;StreamingSpark&quot;); .set(&quot;spark.serializer&quot;,&quot;org.apache.spark.serializer.KryoSerializer&quot;); .set(&quot;spark.default.parallelism&quot;, &quot;1000&quot;); .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;); .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); JavaStreamingContext jssc = new JavaStreamingContext(conf,Durations.seconds(5)); jssc.checkpoint(&quot;hdfs://192.168.1.164:9000/checkpoint&quot;); 广播大变量（1m~100m）： 默认的情况下，task执行的算子中，使用了外部的变量，每个task都会获取一份变量的副本，有什么缺点呢？ 网络传输的开销、耗费内存、RDD持久化到内存（内存不够，持续到磁盘）、task创建对象导致gc； 广播变量，初始的时候，就在Drvier上有一份副本。 task在运行的时候，想要使用广播变量中的数据，此时首先会在自己本地的Executor对应的BlockManager中，尝试获取变量副本； 如果本地没有，那么就从Driver远程拉取变量副本，并保存在本地的BlockManager中； 此后这个executor上的task，都会直接使用本地的BlockManager中的副本。 executor的BlockManager除了从driver上拉取，也可能从其他节点的BlockManager上拉取变量副本，举例越近越好。 sc.boradcast(); 使用Kryo序列化: 默认情况下，Spark内部是使用Java的序列化机制，ObjectOutputStream / ObjectInputStream，对象输入输出流机制，来进行序列化。 Spark支持使用Kryo序列化机制。Kryo序列化机制，比默认的Java序列化机制，速度要快，序列化后的数据要更小，大概是Java序列化机制的1/10。 Kryo序列化机制，一旦启用以后，会生效的几个地方： ``` 1、算子函数中使用到的外部变量 2、持久化RDD时进行序列化，StorageLevel.MEMORY_ONLY_SER 3、shuffle .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.default.parallelism&quot;, &quot;1000&quot;); .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;); .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); .registerKryoClasses(new Class[]{CategorySortKey.class}) &gt; 4. 序列化 ``` 1、在SparkConf中设置一个属性，spark.serializer，org.apache.spark.serializer.KryoSerializer类； 2、注册你使用到的，需要通过Kryo序列化的，一些自定义类，SparkConf.registerKryoClasses() 使用fastutil优化数据格式: fastutil是扩展了Java标准集合框架（Map、List、Set；HashMap、ArrayList、HashSet）的类库，提供了特殊类型的map、set、list和queue； fastutil能够提供更小的内存占用，更快的存取速度；我们使用fastutil提供的集合类，来替代自己平时使用的JDK的原生的Map、List、Set，好处在于，fastutil集合类，可以减小内存的占用，并且在进行集合的遍历、根据索引（或者key）获取元素的值和设置元素的值的时候，提供更快的存取速度； fastutil也提供了64位的array、set和list，以及高性能快速的，以及实用的IO类，来处理二进制和文本类型的文件；fastutil最新版本要求Java 7以及以上版本； fastutil的每一种集合类型，都实现了对应的Java中的标准接口（比如fastutil的map，实现了Java的Map接口），因此可以直接放入已有系统的任何代码中。 fastutil还提供了一些JDK标准类库中没有的额外功能（比如双向迭代器）。fastutil除了对象和原始类型为元素的集合，fastutil也提供引用类型的支持，但是对引用类型是使用等于号（=）进行比较的，而不是equals()方法。 maven 依赖 &lt;dependency&gt; &lt;groupId&gt;fastutil&lt;/groupId&gt; &lt;artifactId&gt;fastutil&lt;/artifactId&gt; &lt;version&gt;5.0.9&lt;/version&gt; &lt;/dependency&gt; 调节数据本地化等待时长： PROCESS_LOCAL：进程本地化；NODE_LOCAL：节点本地化；NO_PREF：对于task来说，没有好坏之分；RACK_LOCAL：机架本地化；ANY：数据和task可能在集群中的任何地方，而且不在一个机架中，性能最差； 观察日志，spark作业的运行日志，推荐大家在测试的时候，先用client模式，在本地就直接可以看到比较全的日志。日志里面会显示，starting task。。。，PROCESS LOCAL（不用调节）、NODE LOCAL、ANY（调节一下数据本地化的等待时长），反复调节，每次调节完以后，再来运行，观察日志 怎么调节？ spark.locality.wait，默认是3s；6s，10s 默认情况下，下面3个的等待时长，都是跟上面那个是一样的，都是3s spark.locality.wait.process spark.locality.wait.node spark.locality.wait.rack new SparkConf() .set(&quot;spark.locality.wait&quot;, &quot;10&quot;) 定时清除不需要的数据 通过配置spark.cleaner.ttl为一个合理的值，但是这个值不能过小，因为如果后面计算需要用的数据被清除会带来不必要的麻烦。 另外通过配置spark.streaming.unpersist为true(默认就是true)来更智能地去持久化（unpersist）RDD。这个配置使系统找出那些不需要经常保有的RDD，然后去持久化它们。这可以减少Spark RDD的内存使用，也可能改善垃圾回收的行为。 去除压缩 (内存充足的情况下)在内存充足的情况下，可以设置spark.rdd.compress 设置为false. Yarn 优化Executors和cpu核心数设置和Spark On Yarn 动态资源分配 首先需要对YARN的NodeManager进行配置，使其支持Spark的Shuffle Service。 #修改 &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle,spark_shuffle&lt;/value&gt; &lt;/property&gt; #增加 &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;spark.shuffle.service.port&lt;/name&gt; &lt;value&gt;7337&lt;/value&gt; &lt;/property&gt; 将spark中对应jar包拷贝到hadoop的目录下： 首先找到spark版本的spark-&lt;version&gt;-yarn-shuffle.jar shuffle包，并将该包放到集群所有NodeManager的classpath下， 比如放到HADOOP_HOME/share/hadoop/yarn/lib JVM 调优原理概述以及降低cache操作的内存占比: full gc / minor gc，无论是快，还是慢，都会导致jvm的工作线程停止工作，stop the world。简而言之，就是说，gc的时候，spark停止工作了。等着垃圾回收结束。 spark中，堆内存又被划分成了两块儿，存储内存和执行内存； 一句话，让task执行算子函数时，有更多的内存可以使用。 GC优化策略(暂时不确定)建议用并行Mark-Sweep垃圾回收机制，虽然它消耗更多的资源，但是我们还是建议开启。在spark-submit中使用–driver-java-options “-XX:+UseConcMarkSweepGC”–conf “spark.executor.extraJavaOptions=-XX:+UseConcMarkSweepGC” 调节executor堆外内存与连接等待时长(在spark-sbmit中修改)： 有时候，如果你的spark作业处理的数据量特别特别大，几亿数据量；然后spark作业一运行，时不时的报错，shuffle file cannot find，executor、task lost，out of memory（内存溢出）；–conf spark.yarn.executor.memoryOverhead=2048 有时候，无法建立网络连接；会卡住；ok，spark默认的网络连接的超时时长，是60s；如果卡住60s都无法建立连接的话，那么就宣告失败了:一串file id。uuid（dsfsfd-2342vs–sdf–sdfsd）。not found。file lost。 –conf spark.core.connection.ack.wait.timeout=300 Shuffle调优原理概述： 在spark中，主要是以下几个算子：groupByKey、reduceByKey、countByKey、join，等等。 shuffle，一定是分为两个stage来完成的。因为这其实是个逆向的过程，不是stage决定shuffle，是shuffle决定stage。 shuffle前半部分的task在写入数据到磁盘文件之前，都会先写入一个一个的内存缓冲，内存缓冲满溢之后，再spill溢写到磁盘文件中。 合并map端输出文件： 开启shuffle map端输出文件合并的机制；默认情况下，是不开启的，就是会发生如上所述的大量map端输出文件的操作，严重影响性能。 new SparkConf().set(“spark.shuffle.consolidateFiles”, “true”)new SparkConf().set(“spark.shuffle.consolidateFiles”, “true”) 合并map端输出文件： map端内存缓冲：spark.shuffle.file.buffer，默认32k reduce端内存占比：spark.shuffle.memoryFraction，0.2 调节的时候的原则。spark.shuffle.file.buffer，每次扩大一倍，然后看看效果，64，128；spark.shuffle.memoryFraction，每次提高0.1，看看效果。不能调节的太大，太大了以后过犹不及，因为内存资源是有限的，你这里调节的太大了，其他环节的内存使用就会有问题了。 new SparkConf().set(&quot;spark.shuffle.file.buffer&quot;, &quot;64&quot;) new SparkConf().set(&quot;spark.shuffle.memoryFraction&quot;, &quot;0.3&quot;) HashShuffleManager与SortShuffleManager spark.shuffle.manager：hash、sort、tungsten-sort（自己实现内存管理），spark 1.2.x版本以后，默认的shuffle manager，是SortShuffleManager。 spark.shuffle.sort.bypassMergeThreshold：200（默认值为200） SortShuffleManager会避免像HashShuffleManager那样，默认就去创建多份磁盘文件。一个task，只会写入一个磁盘文件，不同reduce task的数据，用offset来划分界定。 new SparkConf().set(&quot;spark.shuffle.manager&quot;, &quot;sort&quot;) new SparkConf().set(&quot;spark.shuffle.sort.bypassMergeThreshold&quot;, &quot;550&quot;) 算子调优MapPartitions提升Map类操作性能: 如果是普通的map，比如一个partition中有1万条数据；function要执行和计算1万次。但是，使用MapPartitions操作之后，一个task仅仅会执行一次function，function一次接收所有的partition数据。只要执行一次就可以了，性能比较高。 但是，可能就OOM，内存溢出。 filter过后使用coalesce减少分区数量： 就会导致有些task运行的速度很快；有些task运行的速度很慢。这就是数据倾斜。 coalesce算子：主要就是用于在filter操作之后，针对每个partition的数据量各不相同的情况，来压缩partition的数量。减少partition的数量，而且让每个partition的数据量都尽量均匀紧凑。 foreachPartition优化写数据库性能：&gt; 1. 用了foreachPartition算子之后，好处在哪里？ 1、对于我们写的function函数，就调用一次，一次传入一个partition所有数据； 2、主要创建或者获取一个数据库连接就可以； 3、只要向数据库发送一次SQL语句和多组参数即可； &gt; 2. 很有可能会发生OOM，内存溢出的问题。 一个partition大概是1千条左右用foreach，跟用foreachPartition，性能的提升达到了2~3分钟。 repartition解决Spark SQL低并行度的性能问题：repartition算子，你用Spark SQL这一步的并行度和task数量，肯定是没有办法去改变了。但是呢，可以将你用Spark SQL查询出来的RDD，使用repartition算子，去重新进行分区，此时可以分区成多个partition，比如从20个partition，分区成100个。 reduceByKey本地聚合介绍：reduceByKey，相较于普通的shuffle操作（比如groupByKey），它的一个特点，就是说，会进行map端的本地聚合代码 调优进行HA机制处理-针对Driver高可用性 在创建和启动StreamingContext的时候，将元数据写入容错的文件系统（比如hdfs）。保证在driver挂掉之后，spark集群可以自己将driver重新启动起来；而且driver在启动的时候，不会重新创建一个streaming context，而是从容错文件系统（比如hdfs）中读取之前的元数据信息，包括job的执行进度，继续接着之前的进度，继续执行。使用这种机制，就必须使用cluster模式提交，确保driver运行在某个worker上面； JavaStreamingContextFactory contextFactory = new JavaStreamingContextFactory() { @Override public JavaStreamingContext create() { JavaStreamingContext jssc = new JavaStreamingContext(...); JavaDStream&lt;String&gt; lines = jssc.socketTextStream(...); jssc.checkpoint(checkpointDirectory); return jssc; } }; JavaStreamingContext context = JavaStreamingContext.getOrCreate(checkpointDirectory, contextFactory); context.start(); context.awaitTermination();JavaStreamingContext.getOrCreate 基于Function0&lt; JavaStreamingContext &gt; 进行Driver高可用 Function0&lt;JavaStreamingContext&gt; createContextFunc = new Function0&lt;JavaStreamingContext&gt;(){ @Override public JavaStreamingContext call() throws Exception { conf = new SparkConf() .setMaster(&quot;local[4]&quot;) .setAppName(&quot;java/RealTimeStreaming&quot;) .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.default.parallelism&quot;, &quot;10&quot;) .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;) .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); Map&lt;String, Object&gt; kafkaParams = new HashMap&lt;&gt;(); kafkaParams.put(&quot;bootstrap.servers&quot;, &quot;Master:9092,Worker1:9092,Worker2:9092&quot;); kafkaParams.put(&quot;key.deserializer&quot;, StringDeserializer.class); kafkaParams.put(&quot;value.deserializer&quot;, StringDeserializer.class); kafkaParams.put(&quot;group.id&quot;, &quot;TestGroup&quot;); kafkaParams.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;); kafkaParams.put(&quot;enable.auto.commit&quot;,true); JavaStreamingContext jssc = new JavaStreamingContext( conf, Durations.seconds(30)); jssc.checkpoint(&quot;hdfs://Master:9000/checkpoint&quot;); // 构建topic set String kafkaTopics = ConfigurationManager.getProperty(Constants.KAFKA_TOPICS); String[] kafkaTopicsSplited = kafkaTopics.split(&quot;,&quot;); Set&lt;String&gt; topics = new HashSet&lt;String&gt;(); for(String kafkaTopic : kafkaTopicsSplited) { topics.add(kafkaTopic); } JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; adRealTimeLogDStream = KafkaUtils.createDirectStream(jssc, LocationStrategies.PreferConsistent(), ConsumerStrategies.Subscribe(topics, kafkaParams)); hostMap = adRealTimeLogDStream.mapToPair(record -&gt; new Tuple2&lt;String, String&gt;(record.key(), record.value())); logPeakDstream = hostMap.mapToPair(new PairFunction&lt;Tuple2&lt;String, String&gt;, String, Long&gt;() { @Override public Tuple2&lt;String,Long&gt; call(Tuple2&lt;String, String&gt; tuple) throws Exception { String log = tuple._2; String[] logSplited = log.split(&quot;\\|&quot;); String eventTime= logSplited[1]; String todayDate = DATE_FORMAT.format(new Date()).trim(); String cutTime= eventTime.substring(13,eventTime.length()-7); String ip = logSplited[0].trim(); String host = logSplited[14].trim(); return new Tuple2&lt;String, Long&gt;(host+&quot;-&quot;+ip, 1L); } }); hostReduce = logPeakDstream.reduceByKeyAndWindow(new Function2&lt;Long, Long, Long&gt;() { @Override public Long call(Long v1, Long v2) throws Exception { return v1 + v2; } }, Durations.minutes(10),Durations.seconds(30)); JavaPairDStream&lt;String, Long&gt; topNPairRdd = hostReduce.transformToPair(new Function&lt;JavaPairRDD&lt;String, Long&gt;, JavaPairRDD&lt;String, Long&gt;&gt;() { @Override public JavaPairRDD&lt;String, Long&gt; call(JavaPairRDD&lt;String, Long&gt; rdd) throws Exception { JavaPairRDD&lt;Long, String&gt; sortRDD = (JavaPairRDD&lt;Long, String&gt;) rdd.mapToPair(record -&gt; new Tuple2&lt;Long, String&gt;(record._2, record._1)); JavaPairRDD&lt;String, Long&gt; sortedRdd = (JavaPairRDD&lt;String, Long&gt;) sortRDD.sortByKey(false).mapToPair(record -&gt; new Tuple2&lt;String, Long&gt;(record._2, record._1)); List&lt;Tuple2&lt;String, Long&gt;&gt; topNs = sortedRdd.take(5);//取前5个输出 System.out.println(&quot; &quot;); System.out.println(&quot;*****************峰值访问窗统计*******************&quot;); for (Tuple2&lt;String, Long&gt; topN : topNs) { System.out.println(topN); } System.out.println(&quot;**********************END***********************&quot;); System.out.println(&quot; &quot;); return sortedRdd; } }); topNPairRdd.foreachRDD(new VoidFunction&lt;JavaPairRDD&lt;String, Long&gt;&gt;() { @Override public void call(JavaPairRDD&lt;String, Long&gt; rdd) throws Exception { } }); logDetailDstream = hostMap.map(new Function&lt;Tuple2&lt;String,String&gt;, String&gt;() { @Override public String call(Tuple2&lt;String, String&gt; tuple) throws Exception { String log = tuple._2; String[] logSplited = log.split(&quot;\\|&quot;); String eventTime= logSplited[1]; String todayDate = DATE_FORMAT.format(new Date()).trim(); String cutTime= eventTime.substring(13,eventTime.length()-7); String[] urlDetails = logSplited[7].split(&quot;/&quot;); String ip = logSplited[0].trim(); String url =&quot;&quot;; if(urlDetails.length==4){ url = urlDetails[3]; }else if(urlDetails.length==5){ url = urlDetails[3] + &quot;/&quot; + urlDetails[4]; }else if(urlDetails.length&gt;=6){ url = urlDetails[3] + &quot;/&quot; + urlDetails[4]+ &quot;/&quot; + urlDetails[5]; } String host = logSplited[14].trim(); String dataTime =todayDate +&quot; &quot;+ cutTime; String bytesSent = logSplited[5].trim(); return dataTime+&quot; &quot;+host+&quot; &quot;+ip+&quot; &quot;+url+&quot; &quot;+bytesSent; } }); //logDetailDstream.print(); return jssc; } }; return createContextFunc; 提交方式 spark-submit --deploy-mode cluster --supervise SparkStreaming 与kafka整合调优 LocationStrategies 位置策略： The new Kafka consumer API will pre-fetch messages into buffers. Therefore it is important for performance reasons that the Spark integration keep cached consumers on executors (rather than recreating them for each batch), and prefer to schedule partitions on the host locations that have the appropriate consumers. 新的Kafka消费者API可以预获取消息缓存到缓冲区，因此Spark整合Kafka让消费者在executor上进行缓存对性能是非常有助的，可以调度消费者所在主机位置的分区。 In most cases, you should use LocationStrategies.PreferConsistent as shown above. This will distribute partitions evenly across available executors. If your executors are on the same hosts as your Kafka brokers, use PreferBrokers, which will prefer to schedule partitions on the Kafka leader for that partition. Finally, if you have a significant skew in load among partitions, use PreferFixed. This allows you to specify an explicit mapping of partitions to hosts (any unspecified partitions will use a consistent location). 通常，你可以使用 LocationStrategies.PreferConsistent，这个策略会将分区分布到所有可获得的executor上。如果你的executor和kafkabroker在同一主机上的话，可以使用PreferBrokers，这样kafka leader会为此分区进行调度。最后，如果你加载数据有倾斜的话可以使用PreferFixed，这将允许你制定一个分区和主机的映射（没有指定的分区将使用PreferConsistent 策略） The cache for consumers has a default maximum size of 64. If you expect to be handling more than (64 * number of executors) Kafka partitions, you can change this setting via spark.streaming.kafka.consumer.cache.maxCapacity 消费者默认缓存大小是64，如果你期望处理较大的Kafka分区的话，你可以使用 spark.streaming.kafka.consumer.cache.maxCapacity设置大小。 The cache is keyed by topicpartition and group.id, so use a separate group.id for each call to createDirectStream. 缓存是使用key为topic partition 和组id的，因此对于每一次调用 createDirectStream 可以使用不同的 group . id public static SparkConf conf = new SparkConf() .setMaster(&quot;local[4]&quot;) .setAppName(&quot;java/RealTimeStreaming&quot;) .set(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) .set(&quot;spark.default.parallelism&quot;, &quot;10&quot;) .set(&quot;spark.streaming.blockInterval&quot;, &quot;50&quot;) .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;, &quot;true&quot;); Map&lt;String, Object&gt; kafkaParams = new HashMap&lt;&gt;(); kafkaParams.put(&quot;bootstrap.servers&quot;, &quot;Master:9092,Worker1:9092,Worker2:9092&quot;); kafkaParams.put(&quot;key.deserializer&quot;, StringDeserializer.class); kafkaParams.put(&quot;value.deserializer&quot;, StringDeserializer.class); kafkaParams.put(&quot;group.id&quot;, &quot;TestGroup&quot;); kafkaParams.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;); kafkaParams.put(&quot;enable.auto.commit&quot;,true); JavaStreamingContext jssc = new JavaStreamingContext( conf, Durations.seconds(30)); jssc.checkpoint(&quot;hdfs://Master:9000/checkpoint&quot;); 构建topic set String kafkaTopics = ConfigurationManager.getProperty(Constants.KAFKA_TOPICS); String[] kafkaTopicsSplited = kafkaTopics.split(&quot;,&quot;); Set&lt;String&gt; topics = new HashSet&lt;String&gt;(); for(String kafkaTopic : kafkaTopicsSplited) { topics.add(kafkaTopic); } JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; adRealTimeLogDStream = KafkaUtils.createDirectStream(jssc, LocationStrategies.PreferConsistent(), ConsumerStrategies.Subscribe(topics, kafkaParams));]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>spark-调优篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grafana-资料篇]]></title>
    <url>%2F2019%2F04%2F28%2Fgrafana-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[参考地址： 官网 官网视频 安装插件 插件安装步骤 插件搜索]]></content>
      <categories>
        <category>grafana</category>
      </categories>
      <tags>
        <tag>grafana-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flink-资料篇]]></title>
    <url>%2F2019%2F04%2F26%2Fflink-%E8%B5%84%E6%96%99%E7%AF%87%2F</url>
    <content type="text"><![CDATA[flink 学习（系列） flink官网 training flink-阿里巴巴课程 flink-vinoYang博客 flink-云邪博客 云星数据-大数据团队 flink-归来朝歌博客 阿里云实时计算 flink 代码 flink flink-learning flink-training-exercises flink 书籍 flink基础教程 [#] 博客(单篇) 什么是流处理 理解Flink的设计原则 Google Stream 101越了批处理的流处理世界 Google Stream 102超越了批处理的流处理世界 Flink原理和实现 追源索骥：透过源码看懂Flink核心框架的执行流程 Flink的架构和拓扑概览 Flink核心框架的执行流程 理解 Flink 中的计算资源 Flink如何生成ExecutionGraph及物理执行图 Flink 生成StreamGraph Flink Window Flink Window的实现原理 Flink Window的实现原理：Session Window Flink 滑动窗口优化 Flink State Flink中的状态管理 Flink中的反压Back-Pressure Flink Operator Chain原理 Flink内存管理 Flink异步快照机制-Failover 数据流的类型和操作 Flink Async IO Flink源码解析 Stream Operator Flink SQL Flink SQL的大部分代码实现是阿里巴巴的Blink团队贡献给Apache的。 Flink SQL 核心功能解密 Flink SQL维表Join和异步优化 Flink SQL 异步IO设计 Flink SQL数据去重的技巧和思考 Flink SQL TOP N的挑战与实现 Flink SQL 流计算“撤回(Retraction)”案例分析 Flink SQL 解决热点问题的大杀器MiniBatch Flink Table API&amp;SQL的概念和通用API Flink CEP复杂事件处理系列1 Flink-CEP论文与源码解读之状态与状态转换 Flink之CEP-API简介 Flink之CEP案例分析-网络攻击检测 Flink-CEP之NFA Flink-CEP之NFA编译器 Flink-CEP之模式流与运算符 系列2 CEP In Flink (1) - CEP规则解析 CEP In Flink (2) - CEP规则匹配 CEP In Flink (3) - 匹配事件提取 CEP In Flink (4) - 使用瓶颈 Flink事务 Flink Streaming Ledger 支持流式处理ACID事务 Flink源码解析 Apache Flink源码解析 DataStream API Flink Exactly Once语义flink的两阶段提交协议-实现端到端的Exactly Once语义 Flink案例 Flink在唯品会的实践 Flink在美团的实践应用 Flink在G7的实践 Flink在饿了么的应用 基于Flink的实时特征平台在Flink的应用 日均处理万亿数据！Flink在快手的应用实践与技术演进之路 其它 流计算框架 Flink 与 Storm 的性能对比]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink-资料篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flink-问题篇]]></title>
    <url>%2F2019%2F04%2F26%2Fflink-%E9%97%AE%E9%A2%98%E7%AF%87%2F</url>
    <content type="text"><![CDATA[资源管理：flinkvcore:提示：并行度一定要小于solt数，也就是提交命令里 ynys的值，最好保持一致，这样可以将申请的资源充分利用。计算方式：如果并行度小于solt数（ynys），则vocer默认是：并行度 +1 ；如果并行度和solt数(yn*ys)一致，则vcore数为yn * ys + 1memory:计算方式：并行度和solt数保持一致时： yn * yjm + ytm并行度小于solt 数是：并行度 * yjm + ytm 隐式转换器的异常：错误信息：value foreach is not a member of java.util.ArrayList 解决：import scala.collection.JavaConversions._ 错误信息：could not find implicit value for evidence parameter of type org.apache.flink.api.common.typeinfo.TypeInformation 解决：import org.apache.flink.streaming.api.scala._（DataStream API） import org.apache.flink.api.scala._（DataSet API） 如果在使用泛型参数的函数或类中使用Flink操作，则TypeInformation必须可用于该参数。这可以通过使用上下文绑定来实现def myFunction[T: TypeInformation](input: DataSet[T]): DataSet[Seq[T]] = { input.reduceGroup( i =&gt; i.toSeq ) } ClassCastException：X无法强制转换为X1.尝试classloader.resolve-order: parent-first在配置中进行设置 2.从不同的执行尝试缓存类 3.通过child-first类加载进行类复制 AbstractMethodError或NoSuchFieldError 存在依赖项版本冲突,确保所有依赖项版本都一致。 事件正在进行，DataStream应用程序不产生任何输出1.如果您的DataStream应用程序使用事件时间，请检查您的水印是否已更新。 如果没有产生水印，事件时间窗口可能永远不会触发，应用程序将不会产生任何结果。 2.您可以在Flink的Web UI（水印部分）中查看水印是否正在取得进展。 exception reporting “Insufficient number of network buffers”1.原因可能：以很高的并发来执行flink ,增加了网络缓冲区的数量。 默认情况下，Flink占用网络缓冲区的JVM堆大小的10％，最小为64MB，最大为1GB。 2.可以通过修改一下以下参数来调整： taskmanager.network.memory.fraction taskmanager.network.memory.min taskmanager.network.memory.maxflink 配置信息 由于javadoc错误无法构建maven项目三个选择： 1.修复错误 2.禁用严格检查 3.在建造时跳过Javadoc &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; 构建时跳过javadoc mvn -Dmaven.javadoc.skip=true verifyjava.lang.ClassNotFoundException: scala.Product$class原因：构建文件不对。您的scala版本是2.12.x但您使用的是scala版本2.11中编译的库。 解决：查看构建文件的lib 中是否包含2.12的版本。Flink BucketingSink crashes with NoClassDefFoundError: Lorg/apache/hadoop/fs/FileSystem 缺少hadoop 依赖：（ 版本根据自己的来） &lt;dependency&gt; &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt; &lt;artifactId&gt;hadoop-common&lt;/artifactId&gt; &lt;version&gt;2.7.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt; &lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt; &lt;version&gt;2.7.1&lt;/version&gt; &lt;/dependency&gt; Name node is in safemodeorg.apache.hadoop.ipc.RemoteException(org.apache.hadoop.hdfs.server.namenode.SafeModeException): Cannot create file/user/test. Name node is in safe mode. 解决方法：bin/hadoop dfsadmin -safemode leave 参考：https://blog.csdn.net/hongweigg/article/details/7185328 No implicit arguments of type: XXXXXX错误：could not find implicit value for evidence parameter of type org.apache.flink.api.common.typeinfo.TypeInformation[Int]解决办法：import org.apache.flink.api.scala._ 或者 import org.apache.flink.streaming.api.scala._ Stack trace: ExitCodeException exitCode=1: 报错信息 Application application_1556525638125_0015 failed 1 times (global limit =2; local limit is =1) due to AM Container for appattempt_1556525638125_0015_000001 exited with exitCode: 1 Failing this attempt.Diagnostics: Exception from container-launch. Container id: container_e04_1556525638125_0015_01_000001 Exit code: 1 Stack trace: ExitCodeException exitCode=1: 解决方式： 1.查看提交flink 作业的版本是否和提交环境版本一致。Checkpoint失败：Checkpoint expired before completing env.enableCheckpointing(1000L) val checkpointConf = env.getCheckpointConfig checkpointConf.setMinPauseBetweenCheckpoints(30000L) checkpointConf.setCheckpointTimeout(8000L) 解决方式： 主要因为checkpointConf.setCheckpointTimeout(8000L)设置的太小了，默认是10min。 这里只设置了8sec。当一个Flink App背压的时候（例如由外部组件异常引起），Barrier会流动的非常缓慢，导致Checkpoint时长飙升。 FlinkException：The assigned slot container_XXX was removed 异常 问题原因：一般就是某一个Flink App内存占用大，导致TaskManager（在Yarn上就是Container）被Kill掉。如果代码写的没问题，就确实是资源不够了，其实1G Slot跑多个Task（Slot Group Share）其实挺容易出现的。因此有两种选择。可以根据具体情况，权衡选择一个。解决方式： 将该Flink App调度在Per Slot内存更大的集群上。 通过slotSharingGroup(“xxx”)，减少Slot中共享Task的个数 map 和list 声明方式val seMap: java.util.Map[String, java.util.Map[String, Object]] = new java.util.HashMap[String, java.util.Map[String, Object]]() val topList: java.util.List[String] = new java.util.ArrayList[String]()Flink参数设置slot数量增加,导致作业无法启动报错信息： Insufficient number of network buffers: required 96, but only 25 available. The total number of network buffers is currently set to 2048 of 32768 bytes each. You can increase this number by setting the configuration keys &#39;taskmanager.network.memory.fraction&#39;, &#39;taskmanager.network.memory.min&#39;, and &#39;taskmanager.network.memory.max&#39;解决方法： 调整Flink里面flink-conf.yaml里面的新增参数增加可支持的slot数量 taskmanager.network.memory.fraction: 0.1 taskmanager.network.memory.min: 268435456 taskmanager.network.memory.max: 4294967296flink 任务物理内存溢出问题定位org.apache.flink.yarn.YarnTaskExecutorRunner - RECEIVED SIGNAL 15: SIGTERM. Shutting down as requested.问题定位：物理内存溢出问题定位 某个TaskManger丢失的问题排查ERROR [flink-akka.remote.default-remote-dispatcher-5] org.apache.flink.runtime.rest.handler.legacy.TaskManagerLogHandler - Fetching TaskManager log failed. java.util.concurrent.CompletionException: java.io.IOException: TaskManager log files are unavailable. Log file could not be found at /mnt/disk1/log/hadoop-yarn/containers/application_1556227576661_152377/container_1556227576661_152377_01_000012/taskmanager.log地址：问题解决地址 flink 设置uid 以及savepointDataStream&lt;String&gt; stream = env. // Stateful source (e.g. Kafka) with ID .addSource(new StatefulSource()) .uid(&quot;source-id&quot;) // ID for the source operator .shuffle() // Stateful mapper with ID .map(new StatefulMapper()) .uid(&quot;mapper-id&quot;) 不人为指定ID，它们会被自动生成。 只要ID不变化，则程序可以自动的从savepoint恢复。 ID的生成依赖于程序的结构，并且对程序变化敏感。 因此强烈建议人为分配ID 可以将savepoint想象成持有每个有状态的操作的Operator ID到State的映射关系： Operator ID | State ------------+------------------------ source-id | State of StatefulSource mapper-id | State of StatefulMapper 在上面的例子中，print sink是无状态的，因此不是savepoint的一部分。默认情况下，会尝试映射savepoint的每条记录到新的程序中 参考： flink官网：https://flink.apache.org/gettinghelp.html]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink-问题篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.flink-学习篇]]></title>
    <url>%2F2019%2F04%2F26%2Fflink-%E5%AD%A6%E4%B9%A0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[什么是flink Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行状态计算。 flink 特点: 其异步和增量检查点算法确保对处理延迟的影响最小，同时保证一次性状态一致性。 随处部署应用程序: 常见的集群资源管理器（如Hadoop YARN，Apache Mesos和Kubernetes）集成，但也可以设置为作为独立集群运行 处理无界和有界数据 充分利用内存性能: 任务状态始终保留在内存中，如果状态大小超过可用内存，则保存在访问高效的磁盘上数据结构中 性能：每天处理数万亿个事件；维护多个TB的状态；在数千个内核的运行 flink丰富状态功能： 多状态基元：Flink为不同的数据结构提供状态基元，例如原子值，列表或映射。 可插拔状态后端：应用程序状态由可插拔状态后端管理和检查点。(内存或RocksDB 存储或自定义) 完全一次的状态一致性。 非常大的状态：由于其异步和增量检查点算法，Flink能够维持几兆兆字节的应用程序状态。 可扩展的应用程序：Flink通过将状态重新分配给更多或更少的工作人员来支持有状态应用程序的扩展。 flink 的容错机制： 一致的检查点: 如果发生故障，将重新启动应用程序并从最新检查点加载其状态,此功能可以保证一次性状态一致性。 高效检查点: Flink可以执行异步和增量检查点，以便将检查点对应用程序的延迟SLA的影响保持在非常小的水平。 端到端完全一次: Flink为特定存储系统提供事务接收器，保证数据只写出一次，即使出现故障 与集群管理器集成: Flink与集群管理器紧密集成，例如Hadoop YARN，Mesos或Kubernetes。当进程失败时，将自动启动一个新进程来接管其工作。 高可用性设置: Flink具有高可用性模式，可消除所有单点故障。HA模式基于Apache ZooKeeper，这是一种经过验证的可靠分布式协调服务。 Savepoints操作：用于启动状态兼容的应用程序并初始化其状态。 适用场景： 程序版本升级。 程序迁移集群。 flink 版本更新。 暂停和恢复、存档。 A/B测试：启动同一保存点的所有版本来比较两个（或更多）不同版本的应用程序的性能或质量。 flink 丰富time功能: Event-time Mode(事件时间):根据事件的时间戳计算结果 Watermark Support（水印支持）:使用水印来推断事件时间应用中的时间，也可以使用水印来推断事件时间应用中的时间。 Late Data Handling(延迟数据处理):当使用水印在事件 - 时间模式下处理流时，可能会在所有相关事件到达之前完成计算. Processing-time Mode(处理时间):由处理机器的挂钟时间触发的计算,处理时间模式适用于具有严格的低延迟要求的某些应用，这些要求可以容忍近似结果. flink 分层API: ProcessFunctions:提供对时间和状态的细粒度控制,可以任意修改其状态并注册将在未来触发回调函数的定时器,因此，它可以根据许多有状态事件驱动的应用程序的需要实现复杂的事件业务逻辑:open -&gt; processElement -&gt; onTimer（相关介绍） DataStream API: 提供了许多常见的流处理操作，如窗口，记录在-A-时间变换，并丰富事件原语 SQL和Table API: Table API和SQL利用Apache Calcite进行解析，验证和查询优化,它们可以与DataStream和DataSet API无缝集成，并支持用户定义的标量，聚合和表值函数。 flink Libraries: 复杂事件处理（CEP）:CEP库的应用包括网络入侵检测，业务流程监控和欺诈检测。 DataSet API: 用于批处理应用程序的核心API。 Gelly：Gelly是一个可扩展的图形处理和分析库。 flink 监控方式： Web UI:可以检查，监视和调试正在运行的应用程序。 日志记录：Flink实现了流行的slf4j日志记录界面，并与日志框架log4j或logback集成。 指标：Flink具有复杂的指标系统，可收集和报告系统和用户定义的指标。 REST API：Flink公开REST API以提交新应用程序，获取正在运行的应用程序的保存点或取消应用程序。 flink 框架学习flink-datasource]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink-学习篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markDown-使用]]></title>
    <url>%2F2019%2F04%2F25%2FmarkDown-%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[标签# h1 最大 ## h2 ### h3 #### h4 ##### h5 ###### h6 最小 段落及区块引用 &gt; 插入链接和图片链接 []() [点击跳转至百度](http://www.baidu.com) 图片 ![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;) ![图片](https://user-gold-cdn.xitu.io/2018/4/18/162d75d959444389?w=1240&amp;h=703&amp;f=jpeg&amp;s=56927) 列表* | + | - 是无序列表 1. 数字点加空格 是有序列表 列表中加入了区块引用，区域引用标记符也需要缩进4个空格 上一级和下一级之间敲三个空格即可 示例： * 段落一 &gt; 区块标记一 &gt;&gt;区块标记二 * 段落二 &gt; 区块标记二 分割线 *** 强调 *这里是斜体* **这里是加粗** ***这里是斜线加粗*** ～～这里是删除线～～ 代码块 单行代码：单反引号包裹 代码块：三个反引号包裹。 表格表头|条目一|条目二 :---:|:---:|:---: 项目|项目一|项目二 注意： 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markDown-使用</tag>
      </tags>
  </entry>
</search>
